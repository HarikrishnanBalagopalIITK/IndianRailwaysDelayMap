{"version":3,"sources":["../src/FileSaver.js","node_modules/d3-queue/build/d3-queue.js","node_modules/leaflet-image/index.js","node_modules/@polymer/polymer/lib/utils/boot.js","node_modules/@polymer/polymer/lib/utils/resolve-url.js","node_modules/@polymer/polymer/lib/utils/settings.js","node_modules/@polymer/polymer/lib/utils/mixin.js","node_modules/@polymer/polymer/lib/elements/dom-module.js","node_modules/@polymer/polymer/lib/utils/style-gather.js","node_modules/@polymer/polymer/lib/utils/wrap.js","node_modules/@polymer/polymer/lib/utils/path.js","node_modules/@polymer/polymer/lib/utils/case-map.js","node_modules/@polymer/polymer/lib/utils/async.js","node_modules/@polymer/polymer/lib/mixins/properties-changed.js","node_modules/@polymer/polymer/lib/mixins/property-accessors.js","node_modules/@polymer/polymer/lib/mixins/template-stamp.js","node_modules/@polymer/polymer/lib/mixins/property-effects.js","node_modules/@polymer/polymer/lib/utils/telemetry.js","node_modules/@polymer/polymer/lib/mixins/properties-mixin.js","node_modules/@polymer/polymer/lib/mixins/element-mixin.js","node_modules/@polymer/polymer/lib/utils/html-tag.js","node_modules/@polymer/polymer/polymer-element.js","node_modules/@polymer/polymer/lib/utils/debounce.js","node_modules/@google-web-components/google-chart/loader.js","node_modules/@google-web-components/google-chart/google-chart.js","main.js"],"names":["window","JSCompiler_renameProperty","prop","obj","workingURL","resolveDoc","CSS_URL_RX","ABS_URL","resolveUrl","url","baseURI","test","undefined","u","URL","pathname","href","e","document","location","implementation","createHTMLDocument","base","createElement","head","appendChild","anchor","body","resolveCss","cssText","replace","m","pre","post","pathFromUrl","substring","lastIndexOf","useShadow","ShadyDOM","useNativeCSSProperties","Boolean","ShadyCSS","nativeCss","useNativeCustomElements","customElements","polyfillWrapFlushCallback","rootPath","setRootPath","path","sanitizeDOMValue","Polymer","setSanitizeDOMValue","newSanitizeDOMValue","passiveTouchGestures","setPassiveTouchGestures","usePassive","strictTemplatePolicy","setStrictTemplatePolicy","useStrictPolicy","allowTemplateFromDomModule","setAllowTemplateFromDomModule","allowDomModule","legacyOptimizations","setLegacyOptimizations","useLegacyOptimizations","syncInitialRender","setSyncInitialRender","useSyncInitialRender","cancelSyntheticClickEvents","setCancelSyntheticClickEvents","useCancelSyntheticClickEvents","dedupeId","MixinFunction","prototype","__mixinApplications","__mixinSet","dedupingMixin","mixin","mixinApplications","WeakMap","mixinDedupeId","baseSet","map","extended","get","set","mixinSet","Object","create","modules","lcModules","setModule","id","module","toLowerCase","findModule","styleOutsideTemplateCheck","inst","querySelector","console","warn","DomModule","HTMLElement","observedAttributes","import","selector","attributeChangedCallback","name","old","value","namespace","register","assetpath","__assetpath","owner","HTMLImports","importForElement","ownerDocument","getAttribute","Error","define","MODULE_STYLE_LINK_SELECTOR","INCLUDE_ATTR","SHADY_UNSCOPED_ATTR","importModule","moduleId","styleForImport","importDoc","container","importCss","textContent","style","templateWithAssetPath","stylesFromModules","moduleIds","trim","split","styles","i","length","push","stylesFromModule","_styles","_stylesFromModuleImports","template","stylesFromTemplate","e$","content","querySelectorAll","include","filter","item","index","self","indexOf","stylesFromModuleImports","p$","p","unscoped","hasAttribute","_unscopedStyle","setAttribute","_style","cssFromModules","cssFromModule","_cssText","_cssFromModuleImports","t","cssFromTemplate","parentNode","removeChild","cssFromModuleImports","wrap","n","isPath","root","dotIndex","slice","isAncestor","isDescendant","translate","newBase","matches","normalize","Array","isArray","parts","args","toString","j","join","info","last","isDeep","caseMap","DASH_TO_CAMEL","CAMEL_TO_DASH","dashToCamelCase","dash","toUpperCase","camelToDashCase","camel","microtaskCurrHandle","microtaskLastHandle","microtaskCallbacks","microtaskNodeContent","microtaskNode","createTextNode","microtaskFlush","len","cb","setTimeout","splice","MutationObserver","observe","characterData","timeOut","after","delay","run","fn","cancel","handle","clearTimeout","animationFrame","requestAnimationFrame","cancelAnimationFrame","idlePeriod","requestIdleCallback","cancelIdleCallback","microTask","callback","idx","microtask","PropertiesChanged","superClass","createProperties","props","proto","_createPropertyAccessor","attributeNameForProperty","property","typeForProperty","readOnly","_addPropertyToAttributeMap","hasOwnProperty","__dataHasAccessor","assign","_definePropertyAccessor","__dataAttributes","attr","constructor","defineProperty","_getProperty","_setProperty","__dataEnabled","__dataReady","__dataInvalid","__data","__dataPending","__dataOld","__dataInstanceProps","__serializing","_initializeProperties","ready","_flushProperties","_initializeInstanceProperties","_setPendingProperty","_invalidateProperties","ext","changed","_shouldPropertyChange","_enableProperties","changedProps","_shouldPropertiesChange","_propertiesChanged","currentProps","oldProps","_attributeToProperty","attribute","type","_deserializeValue","_propertyToAttribute","arguments","_valueToNodeAttribute","node","str","_serializeValue","removeAttribute","Number","nativeProperties","getOwnPropertyNames","getPrototypeOf","saveAccessorValue","model","__dataProto","PropertyAccessors","createPropertiesForAttributes","a$","_initializeProtoProperties","_ensureAttribute","el","Date","JSON","stringify","x","outValue","parse","isNaN","String","_hasAccessor","_isPropertyPending","templateExtensions","placeholderBugDetect","placeholderBug","hasPlaceholderBug","placeholder","fixPlaceholder","localName","wrapTemplateExtension","is","replaceChild","attributes","findTemplateNode","nodeInfo","parent","parentInfo","firstChild","nextSibling","parentIndex","applyIdToMap","applyEventListener","events","_addMethodEventListenerToNode","applyTemplateContent","templateInfo","_templateInfo","createNodeEventHandler","context","eventName","methodName","_methodHost","handler","detail","TemplateStamp","_parseTemplate","outerTemplateInfo","nodeInfoList","stripWhiteSpace","_parseTemplateContent","_parseTemplateNode","noted","element","hasInsertionPoint","_parseTemplateNestedTemplate","_parseTemplateChildNodes","hasAttributes","_parseTemplateNodeAttributes","next","nodeType","Node","TEXT_NODE","childInfo","infoIndex","createDocumentFragment","attrs","from","a","_parseTemplateNodeAttribute","_contentForTemplate","_stampTemplate","HTMLTemplateElement","decorate","dom","importNode","__noInsertionPoint","nodes","nodeList","$","l","_addEventListenerToNode","addEventListener","_removeEventListenerFromNode","removeEventListener","TYPES","COMPUTE","REFLECT","NOTIFY","PROPAGATE","OBSERVE","READ_ONLY","capitalAttributeRegex","DataTrigger","DataEffect","ensureOwnEffectMap","effects","protoFx","instFx","runEffects","hasPaths","extraArgs","ran","runEffectsForProperty","fxs","fx","lastRun","pathMatchesTrigger","trigger","triggerPath","structured","wildcard","runObserverEffect","method","changedProp","call","dynamicFn","runNotifyEffects","notifyProps","notified","host","notifyPath","__dataHost","rootProperty","dispatchNotifyEvent","queueProperty","dispatchEvent","CustomEvent","runNotifyEffect","handleNotification","event","fromProp","toPath","negate","fromPath","currentTarget","_setPendingPropertyOrPath","runReflectEffect","attrName","runComputedEffects","computeEffects","inputProps","runComputedEffect","result","runMethodEffect","computedProp","methodInfo","computeLinkedPaths","links","__dataLinkedPaths","link","b","addBinding","kind","target","literal","bindings","binding","isCompound","shouldAddListener","listenerEvent","listenerNegate","part","compoundIndex","addEffectForBindingPart","dependencies","evaluator","parseArg","_addTemplatePropertyEffect","runBindingEffect","source","__isPropertyEffectsClient","_enqueueClient","applyBindingValue","_evaluateBinding","computeBindingValue","_setUnmanagedPropertyToNode","storage","__dataCompoundStorage","mode","setupBindings","setupCompoundStorage","addNotifyListener","literals","createMethodEffect","sig","effectFn","static","arg","_addPropertyEffect","_marshalArgs","apply","emptyArray","IDENT","NUMBER","SQUOTE_STRING","DQUOTE_STRING","STRING","ARGUMENT","ARGUMENTS","ARGUMENT_LIST","BINDING","OPEN_BRACKET","CLOSE_BRACKET","NEGATE","EXPRESSION","bindingRegex","RegExp","literalFromParts","s","parseMethod","expression","match","parseArgs","argList","rawArg","fc","getArgValue","data","notifySplices","array","splices","indexSplices","notifySplice","addedCount","removed","object","upper","PropertyEffects","propertyEffectsBase","__dataCounter","__dataClientsReady","__dataPendingClients","__dataToNotify","__dataHasPaths","__dataTemp","__dataClientsInitialized","__computeEffects","__reflectEffects","__notifyEffects","__propagateEffects","__observeEffects","__readOnly","__templateInfo","PROPERTY_EFFECT_TYPES","hostStack","registerHost","effect","_removePropertyEffect","_hasPropertyEffect","_hasReadOnlyEffect","_hasNotifyEffect","_hasReflectEffect","_hasComputedEffect","shouldNotify","isPathNotification","propIsPath","prevProps","client","_flushClients","__enableOrFlushClients","_readyClients","clients","setProperties","setReadOnly","_propagatePropertyChanges","propertyEffects","nextTemplateInfo","linkPaths","to","unlinkPaths","items","ret","pop","hadLength","start","deleteCount","Math","floor","shift","unshift","propPath","_createReadOnlyProperty","protectedSetter","_createPropertyObserver","_createMethodObserver","_createNotifyingProperty","_createReflectedProperty","_createComputedProperty","values","pathValue","addPropertyEffect","createPropertyObserver","createMethodObserver","createNotifyingProperty","createReadOnlyProperty","createReflectedProperty","createComputedProperty","bindTemplate","_bindTemplate","instanceBinding","wasPreBound","__templateInfoLast","previousTemplateInfo","hostProps","beginHosting","endHosting","childNodes","_removeBoundDom","_parseBindings","origName","text","lastIndex","exec","customEvent","notifyEvent","colon","signature","dynamicFns","HostStack","stack","stackLen","instanceCount","incrementInstanceCount","registrations","_regLog","log","dumpRegistrations","forEach","normalizeProperties","output","o","PropertiesMixin","superPropertiesClass","superCtor","ownProperties","properties","__ownProperties","_properties","__observedAttributes","keys","finalize","__finalized","_finalizeClass","__properties","connectedCallback","disconnectedCallback","version","builtCSS","ElementMixin","polymerElementBase","PolymerElement","polymerElementVersion","observers","__ownObservers","ownObservers","createObservers","_prepareTemplate","error","cloneNode","_template","allProps","computed","reflectToAttribute","notify","observer","createPropertyFromConfig","getTemplateFromDomModule","importPath","meta","importMeta","_importPath","_finalizeTemplate","propertyDefaults","__propertyDefaults","_processStyleText","__polymerFinalized","processElementStyles","klass","templateStyles","stylesWithImports","linkedStyles","firstTemplateChild","firstElementChild","insertBefore","templateStyleIndex","templateStyle","prepareTemplate","styleElement","_attachDom","attachShadow","shadowRoot","shadyUpgradeFragment","flushInitial","updateStyles","styleSubtree","styleDocument","LiteralString","string","literalValue","htmlValue","html","strings","innerHTML","reduce","acc","v","htmlLiteral","Debouncer","_asyncModule","_callback","_timer","setConfig","asyncModule","debouncerQueue","delete","isActive","_cancelAsync","flush","debounce","debouncer","Set","enqueueDebouncer","add","flushDebouncers","didFlush","size","loaderPromise","Promise","resolve","reject","google","charts","load","loaderScript","src","LoadSettings","settings","packages","language","documentElement","lang","mapsApiKey","dataTable","visualization","DataTable","getNumberOfRows","cols","arrayToDataTable","createChartWrapper","ChartWrapper","DEFAULT_EVENTS","CHART_TYPES","GoogleChart","_typeChanged","options","_rowsOrColumnsChanged","rows","_dataChanged","view","_viewChanged","selection","_setSelection","drawn","_data","_setDrawn","_chartWrapper","_redrawDebouncer","chartdiv","then","chartWrapper","addListener","getChart","getSelection","_propagateEvents","setChartType","lastChart","addOneTimeListener","chart","includes","children","_localizeGlobalStylesheets","redraw","eventTarget","bubbles","composed","setSelection","oldSelection","newSelection","setDataTable","setOptions","draw","imageURI","getImageURI","dt","addRows","reason","isString","fetch","response","json","stylesheets","stylesheetsArray","sheetLinkEl","isGchartStylesheet","clonedLinkEl","cout","cerr","sel","middleindiacoords","NDLScoords","DELAY_MIN","DELAY_MAX","DELAY_RANGE","PARTITIONS","STEP","delayRangeColors","accessToken","stationMarkers","stationData","stationsByName","searchBar","months","month_keys","newMap","satelliteLayer","streetsLayer","counter","main","createMap","Worker","onmessage","handleRow","attribution","tileOptions","maxZoom","mapBoxURL","L","tileLayer","mapOptions","preferCanvas","layers","center","zoom","normalizeStationName","roundValue","round","EPSILON","nextStage","isValid","normalized_name","station_name","station_code","red","blueToRed","yr_mean","delayColor","color","colorClass","threshold","google_chart_string","month","key","mean","std","lower","stationPopupHtml","yr_std","christmas17_mean","christmas17_std","diwali18_mean","diwali18_std","holi18_mean","holi18_std","marker","circleMarker","longitude","latitude","radius","bindPopup","option","stationsLayer","layerGroup","addLayer","baseMaps","overlayMaps","control","addTo","dataList","append","handleSearch","saveButton","handleClickSave","classList","openPopup","query","station","panTo","alert","loading","remove","err","canvas","filename","toBlob","blob"],"mappings":"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","file":"main.6bf44408.js","sourceRoot":"..","sourcesContent":["/*\n* FileSaver.js\n* A saveAs() FileSaver implementation.\n*\n* By Eli Grey, http://eligrey.com\n*\n* License : https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md (MIT)\n* source  : http://purl.eligrey.com/github/FileSaver.js\n*/\n\n// The one and only way of getting global scope in all environments\n// https://stackoverflow.com/q/3277182/1008999\nvar _global = typeof window === 'object' && window.window === window\n  ? window : typeof self === 'object' && self.self === self\n  ? self : typeof global === 'object' && global.global === global\n  ? global\n  : this\n\nfunction bom (blob, opts) {\n  if (typeof opts === 'undefined') opts = { autoBom: false }\n  else if (typeof opts !== 'object') {\n    console.warn('Deprecated: Expected third argument to be a object')\n    opts = { autoBom: !opts }\n  }\n\n  // prepend BOM for UTF-8 XML and text/* types (including HTML)\n  // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\n  if (opts.autoBom && /^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\n    return new Blob([String.fromCharCode(0xFEFF), blob], { type: blob.type })\n  }\n  return blob\n}\n\nfunction download (url, name, opts) {\n  var xhr = new XMLHttpRequest()\n  xhr.open('GET', url)\n  xhr.responseType = 'blob'\n  xhr.onload = function () {\n    saveAs(xhr.response, name, opts)\n  }\n  xhr.onerror = function () {\n    console.error('could not download file')\n  }\n  xhr.send()\n}\n\nfunction corsEnabled (url) {\n  var xhr = new XMLHttpRequest()\n  // use sync to avoid popup blocker\n  xhr.open('HEAD', url, false)\n  try {\n    xhr.send()\n  } catch (e) {}\n  return xhr.status >= 200 && xhr.status <= 299\n}\n\n// `a.click()` doesn't work for all browsers (#465)\nfunction click (node) {\n  try {\n    node.dispatchEvent(new MouseEvent('click'))\n  } catch (e) {\n    var evt = document.createEvent('MouseEvents')\n    evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80,\n                          20, false, false, false, false, 0, null)\n    node.dispatchEvent(evt)\n  }\n}\n\nvar saveAs = _global.saveAs || (\n  // probably in some web worker\n  (typeof window !== 'object' || window !== _global)\n    ? function saveAs () { /* noop */ }\n\n  // Use download attribute first if possible (#193 Lumia mobile)\n  : 'download' in HTMLAnchorElement.prototype\n  ? function saveAs (blob, name, opts) {\n    var URL = _global.URL || _global.webkitURL\n    var a = document.createElement('a')\n    name = name || blob.name || 'download'\n\n    a.download = name\n    a.rel = 'noopener' // tabnabbing\n\n    // TODO: detect chrome extensions & packaged apps\n    // a.target = '_blank'\n\n    if (typeof blob === 'string') {\n      // Support regular links\n      a.href = blob\n      if (a.origin !== location.origin) {\n        corsEnabled(a.href)\n          ? download(blob, name, opts)\n          : click(a, a.target = '_blank')\n      } else {\n        click(a)\n      }\n    } else {\n      // Support blobs\n      a.href = URL.createObjectURL(blob)\n      setTimeout(function () { URL.revokeObjectURL(a.href) }, 4E4) // 40s\n      setTimeout(function () { click(a) }, 0)\n    }\n  }\n\n  // Use msSaveOrOpenBlob as a second approach\n  : 'msSaveOrOpenBlob' in navigator\n  ? function saveAs (blob, name, opts) {\n    name = name || blob.name || 'download'\n\n    if (typeof blob === 'string') {\n      if (corsEnabled(blob)) {\n        download(blob, name, opts)\n      } else {\n        var a = document.createElement('a')\n        a.href = blob\n        a.target = '_blank'\n        setTimeout(function () { click(a) })\n      }\n    } else {\n      navigator.msSaveOrOpenBlob(bom(blob, opts), name)\n    }\n  }\n\n  // Fallback to using FileReader and a popup\n  : function saveAs (blob, name, opts, popup) {\n    // Open a popup immediately do go around popup blocker\n    // Mostly only available on user interaction and the fileReader is async so...\n    popup = popup || open('', '_blank')\n    if (popup) {\n      popup.document.title =\n      popup.document.body.innerText = 'downloading...'\n    }\n\n    if (typeof blob === 'string') return download(blob, name, opts)\n\n    var force = blob.type === 'application/octet-stream'\n    var isSafari = /constructor/i.test(_global.HTMLElement) || _global.safari\n    var isChromeIOS = /CriOS\\/[\\d]+/.test(navigator.userAgent)\n\n    if ((isChromeIOS || (force && isSafari)) && typeof FileReader === 'object') {\n      // Safari doesn't allow downloading of blob URLs\n      var reader = new FileReader()\n      reader.onloadend = function () {\n        var url = reader.result\n        url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, 'data:attachment/file;')\n        if (popup) popup.location.href = url\n        else location = url\n        popup = null // reverse-tabnabbing #460\n      }\n      reader.readAsDataURL(blob)\n    } else {\n      var URL = _global.URL || _global.webkitURL\n      var url = URL.createObjectURL(blob)\n      if (popup) popup.location = url\n      else location.href = url\n      popup = null // reverse-tabnabbing #460\n      setTimeout(function () { URL.revokeObjectURL(url) }, 4E4) // 40s\n    }\n  }\n)\n\n_global.saveAs = saveAs.saveAs = saveAs\n\nif (typeof module !== 'undefined') {\n  module.exports = saveAs;\n}\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.d3_queue = global.d3_queue || {})));\n}(this, function (exports) { 'use strict';\n\n  var version = \"2.0.3\";\n\n  var slice = [].slice;\n\n  var noabort = {};\n\n  function Queue(size) {\n    if (!(size >= 1)) throw new Error;\n    this._size = size;\n    this._call =\n    this._error = null;\n    this._tasks = [];\n    this._data = [];\n    this._waiting =\n    this._active =\n    this._ended =\n    this._start = 0; // inside a synchronous task callback?\n  }\n\n  Queue.prototype = queue.prototype = {\n    constructor: Queue,\n    defer: function(callback) {\n      if (typeof callback !== \"function\" || this._call) throw new Error;\n      if (this._error != null) return this;\n      var t = slice.call(arguments, 1);\n      t.push(callback);\n      ++this._waiting, this._tasks.push(t);\n      poke(this);\n      return this;\n    },\n    abort: function() {\n      if (this._error == null) abort(this, new Error(\"abort\"));\n      return this;\n    },\n    await: function(callback) {\n      if (typeof callback !== \"function\" || this._call) throw new Error;\n      this._call = function(error, results) { callback.apply(null, [error].concat(results)); };\n      maybeNotify(this);\n      return this;\n    },\n    awaitAll: function(callback) {\n      if (typeof callback !== \"function\" || this._call) throw new Error;\n      this._call = callback;\n      maybeNotify(this);\n      return this;\n    }\n  };\n\n  function poke(q) {\n    if (!q._start) try { start(q); } // let the current task complete\n    catch (e) { if (q._tasks[q._ended + q._active - 1]) abort(q, e); } // task errored synchronously\n  }\n\n  function start(q) {\n    while (q._start = q._waiting && q._active < q._size) {\n      var i = q._ended + q._active,\n          t = q._tasks[i],\n          j = t.length - 1,\n          c = t[j];\n      t[j] = end(q, i);\n      --q._waiting, ++q._active;\n      t = c.apply(null, t);\n      if (!q._tasks[i]) continue; // task finished synchronously\n      q._tasks[i] = t || noabort;\n    }\n  }\n\n  function end(q, i) {\n    return function(e, r) {\n      if (!q._tasks[i]) return; // ignore multiple callbacks\n      --q._active, ++q._ended;\n      q._tasks[i] = null;\n      if (q._error != null) return; // ignore secondary errors\n      if (e != null) {\n        abort(q, e);\n      } else {\n        q._data[i] = r;\n        if (q._waiting) poke(q);\n        else maybeNotify(q);\n      }\n    };\n  }\n\n  function abort(q, e) {\n    var i = q._tasks.length, t;\n    q._error = e; // ignore active callbacks\n    q._data = undefined; // allow gc\n    q._waiting = NaN; // prevent starting\n\n    while (--i >= 0) {\n      if (t = q._tasks[i]) {\n        q._tasks[i] = null;\n        if (t.abort) try { t.abort(); }\n        catch (e) { /* ignore */ }\n      }\n    }\n\n    q._active = NaN; // allow notification\n    maybeNotify(q);\n  }\n\n  function maybeNotify(q) {\n    if (!q._active && q._call) q._call(q._error, q._data);\n  }\n\n  function queue(concurrency) {\n    return new Queue(arguments.length ? +concurrency : Infinity);\n  }\n\n  exports.version = version;\n  exports.queue = queue;\n\n}));","/* global L */\n\nvar queue = require('d3-queue').queue;\n\nvar cacheBusterDate = +new Date();\n\n// leaflet-image\nmodule.exports = function leafletImage(map, callback) {\n\n    var hasMapbox = !!L.mapbox;\n\n    var dimensions = map.getSize(),\n        layerQueue = new queue(1);\n\n    var canvas = document.createElement('canvas');\n    canvas.width = dimensions.x;\n    canvas.height = dimensions.y;\n    var ctx = canvas.getContext('2d');\n\n    // dummy canvas image when loadTile get 404 error\n    // and layer don't have errorTileUrl\n    var dummycanvas = document.createElement('canvas');\n    dummycanvas.width = 1;\n    dummycanvas.height = 1;\n    var dummyctx = dummycanvas.getContext('2d');\n    dummyctx.fillStyle = 'rgba(0,0,0,0)';\n    dummyctx.fillRect(0, 0, 1, 1);\n\n    // layers are drawn in the same order as they are composed in the DOM:\n    // tiles, paths, and then markers\n    map.eachLayer(drawTileLayer);\n    map.eachLayer(drawEsriDynamicLayer);\n    \n    if (map._pathRoot) {\n        layerQueue.defer(handlePathRoot, map._pathRoot);\n    } else if (map._panes) {\n        var firstCanvas = map._panes.overlayPane.getElementsByTagName('canvas').item(0);\n        if (firstCanvas) { layerQueue.defer(handlePathRoot, firstCanvas); }\n    }\n    map.eachLayer(drawMarkerLayer);\n    layerQueue.awaitAll(layersDone);\n\n    function drawTileLayer(l) {\n        if (l instanceof L.TileLayer) layerQueue.defer(handleTileLayer, l);\n        else if (l._heat) layerQueue.defer(handlePathRoot, l._canvas);\n    }\n\n    function drawMarkerLayer(l) {\n        if (l instanceof L.Marker && l.options.icon instanceof L.Icon) {\n            layerQueue.defer(handleMarkerLayer, l);\n        }\n    }\n    \n    function drawEsriDynamicLayer(l) {\n        if (!L.esri) return;\n       \n        if (l instanceof L.esri.DynamicMapLayer) {                       \n            layerQueue.defer(handleEsriDymamicLayer, l);\n        }\n    }\n\n    function done() {\n        callback(null, canvas);\n    }\n\n    function layersDone(err, layers) {\n        if (err) throw err;\n        layers.forEach(function (layer) {\n            if (layer && layer.canvas) {\n                ctx.drawImage(layer.canvas, 0, 0);\n            }\n        });\n        done();\n    }\n\n    function handleTileLayer(layer, callback) {\n        // `L.TileLayer.Canvas` was removed in leaflet 1.0\n        var isCanvasLayer = (L.TileLayer.Canvas && layer instanceof L.TileLayer.Canvas),\n            canvas = document.createElement('canvas');\n\n        canvas.width = dimensions.x;\n        canvas.height = dimensions.y;\n\n        var ctx = canvas.getContext('2d'),\n            bounds = map.getPixelBounds(),\n            zoom = map.getZoom(),\n            tileSize = layer.options.tileSize;\n\n        if (zoom > layer.options.maxZoom ||\n            zoom < layer.options.minZoom ||\n            // mapbox.tileLayer\n            (hasMapbox &&\n                layer instanceof L.mapbox.tileLayer && !layer.options.tiles)) {\n            return callback();\n        }\n\n        var tileBounds = L.bounds(\n            bounds.min.divideBy(tileSize)._floor(),\n            bounds.max.divideBy(tileSize)._floor()),\n            tiles = [],\n            j, i,\n            tileQueue = new queue(1);\n\n        for (j = tileBounds.min.y; j <= tileBounds.max.y; j++) {\n            for (i = tileBounds.min.x; i <= tileBounds.max.x; i++) {\n                tiles.push(new L.Point(i, j));\n            }\n        }\n\n        tiles.forEach(function (tilePoint) {\n            var originalTilePoint = tilePoint.clone();\n\n            if (layer._adjustTilePoint) {\n                layer._adjustTilePoint(tilePoint);\n            }\n\n            var tilePos = originalTilePoint\n                .scaleBy(new L.Point(tileSize, tileSize))\n                .subtract(bounds.min);\n\n            if (tilePoint.y >= 0) {\n                if (isCanvasLayer) {\n                    var tile = layer._tiles[tilePoint.x + ':' + tilePoint.y];\n                    tileQueue.defer(canvasTile, tile, tilePos, tileSize);\n                } else {\n                    var url = addCacheString(layer.getTileUrl(tilePoint));\n                    tileQueue.defer(loadTile, url, tilePos, tileSize);\n                }\n            }\n        });\n\n        tileQueue.awaitAll(tileQueueFinish);\n\n        function canvasTile(tile, tilePos, tileSize, callback) {\n            callback(null, {\n                img: tile,\n                pos: tilePos,\n                size: tileSize\n            });\n        }\n\n        function loadTile(url, tilePos, tileSize, callback) {\n            var im = new Image();\n            im.crossOrigin = '';\n            im.onload = function () {\n                callback(null, {\n                    img: this,\n                    pos: tilePos,\n                    size: tileSize\n                });\n            };\n            im.onerror = function (e) {\n                // use canvas instead of errorTileUrl if errorTileUrl get 404\n                if (layer.options.errorTileUrl != '' && e.target.errorCheck === undefined) {\n                    e.target.errorCheck = true;\n                    e.target.src = layer.options.errorTileUrl;\n                } else {\n                    callback(null, {\n                        img: dummycanvas,\n                        pos: tilePos,\n                        size: tileSize\n                    });\n                }\n            };\n            im.src = url;\n        }\n\n        function tileQueueFinish(err, data) {\n            data.forEach(drawTile);\n            callback(null, { canvas: canvas });\n        }\n\n        function drawTile(d) {\n            ctx.drawImage(d.img, Math.floor(d.pos.x), Math.floor(d.pos.y),\n                d.size, d.size);\n        }\n    }\n\n    function handlePathRoot(root, callback) {\n        var bounds = map.getPixelBounds(),\n            origin = map.getPixelOrigin(),\n            canvas = document.createElement('canvas');\n        canvas.width = dimensions.x;\n        canvas.height = dimensions.y;\n        var ctx = canvas.getContext('2d');\n        var pos = L.DomUtil.getPosition(root).subtract(bounds.min).add(origin);\n        try {\n            ctx.drawImage(root, pos.x, pos.y, canvas.width - (pos.x * 2), canvas.height - (pos.y * 2));\n            callback(null, {\n                canvas: canvas\n            });\n        } catch(e) {\n            console.error('Element could not be drawn on canvas', root); // eslint-disable-line no-console\n        }\n    }\n\n    function handleMarkerLayer(marker, callback) {\n        var canvas = document.createElement('canvas'),\n            ctx = canvas.getContext('2d'),\n            pixelBounds = map.getPixelBounds(),\n            minPoint = new L.Point(pixelBounds.min.x, pixelBounds.min.y),\n            pixelPoint = map.project(marker.getLatLng()),\n            isBase64 = /^data\\:/.test(marker._icon.src),\n            url = isBase64 ? marker._icon.src : addCacheString(marker._icon.src),\n            im = new Image(),\n            options = marker.options.icon.options,\n            size = options.iconSize,\n            pos = pixelPoint.subtract(minPoint),\n            anchor = L.point(options.iconAnchor || size && size.divideBy(2, true));\n\n        if (size instanceof L.Point) size = [size.x, size.y];\n\n        var x = Math.round(pos.x - size[0] + anchor.x),\n            y = Math.round(pos.y - anchor.y);\n\n        canvas.width = dimensions.x;\n        canvas.height = dimensions.y;\n        im.crossOrigin = '';\n\n        im.onload = function () {\n            ctx.drawImage(this, x, y, size[0], size[1]);\n            callback(null, {\n                canvas: canvas\n            });\n        };\n\n        im.src = url;\n\n        if (isBase64) im.onload();\n    }\n    \n    function handleEsriDymamicLayer(dynamicLayer, callback) {\n        var canvas = document.createElement('canvas');\n        canvas.width = dimensions.x;\n        canvas.height = dimensions.y;\n    \n        var ctx = canvas.getContext('2d');\n    \n        var im = new Image();\n        im.crossOrigin = '';\n        im.src = addCacheString(dynamicLayer._currentImage._image.src);\n    \n        im.onload = function() {\n            ctx.drawImage(im, 0, 0);\n            callback(null, {\n                canvas: canvas\n            });\n        };\n    }\n\n    function addCacheString(url) {\n        // If it's a data URL we don't want to touch this.\n        if (isDataURL(url) || url.indexOf('mapbox.com/styles/v1') !== -1) {\n            return url;\n        }\n        return url + ((url.match(/\\?/)) ? '&' : '?') + 'cache=' + cacheBusterDate;\n    }\n\n    function isDataURL(url) {\n        var dataURLRegex = /^\\s*data:([a-z]+\\/[a-z]+(;[a-z\\-]+\\=[a-z\\-]+)?)?(;base64)?,[a-z0-9\\!\\$\\&\\'\\,\\(\\)\\*\\+\\,\\;\\=\\-\\.\\_\\~\\:\\@\\/\\?\\%\\s]*\\s*$/i;\n        return !!url.match(dataURLRegex);\n    }\n\n};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/* eslint-disable no-unused-vars */\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is replaced by the munged name for object[property]\n * We cannot alias this function, so we have to use a small shim that has the same behavior when not compiling.\n *\n * @param {string} prop Property name\n * @param {?Object} obj Reference object\n * @return {string} Potentially renamed property name\n */\nwindow.JSCompiler_renameProperty = function(prop, obj) {\n  return prop;\n};\n/* eslint-enable */\n\nexport {};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nlet CSS_URL_RX = /(url\\()([^)]*)(\\))/g;\nlet ABS_URL = /(^\\/[^\\/])|(^#)|(^[\\w-\\d]*:)/;\nlet workingURL;\nlet resolveDoc;\n/**\n * Resolves the given URL against the provided `baseUri'.\n *\n * Note that this function performs no resolution for URLs that start\n * with `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\n * URL resolution, use `window.URL`.\n *\n * @param {string} url Input URL to resolve\n * @param {?string=} baseURI Base URI to resolve the URL against\n * @return {string} resolved URL\n */\nexport function resolveUrl(url, baseURI) {\n  if (url && ABS_URL.test(url)) {\n    return url;\n  }\n  if (url === '//') {\n    return url;\n  }\n  // Lazy feature detection.\n  if (workingURL === undefined) {\n    workingURL = false;\n    try {\n      const u = new URL('b', 'http://a');\n      u.pathname = 'c%20d';\n      workingURL = (u.href === 'http://a/c%20d');\n    } catch (e) {\n      // silently fail\n    }\n  }\n  if (!baseURI) {\n    baseURI = document.baseURI || window.location.href;\n  }\n  if (workingURL) {\n    try {\n      return (new URL(url, baseURI)).href;\n    } catch (e) {\n      // Bad url or baseURI structure. Do not attempt to resolve.\n      return url;\n    }\n  }\n  // Fallback to creating an anchor into a disconnected document.\n  if (!resolveDoc) {\n    resolveDoc = document.implementation.createHTMLDocument('temp');\n    resolveDoc.base = resolveDoc.createElement('base');\n    resolveDoc.head.appendChild(resolveDoc.base);\n    resolveDoc.anchor = resolveDoc.createElement('a');\n    resolveDoc.body.appendChild(resolveDoc.anchor);\n  }\n  resolveDoc.base.href = baseURI;\n  resolveDoc.anchor.href = url;\n  return resolveDoc.anchor.href || url;\n\n}\n\n/**\n * Resolves any relative URL's in the given CSS text against the provided\n * `ownerDocument`'s `baseURI`.\n *\n * @param {string} cssText CSS text to process\n * @param {string} baseURI Base URI to resolve the URL against\n * @return {string} Processed CSS text with resolved URL's\n */\nexport function resolveCss(cssText, baseURI) {\n  return cssText.replace(CSS_URL_RX, function(m, pre, url, post) {\n    return pre + '\\'' +\n      resolveUrl(url.replace(/[\"']/g, ''), baseURI) +\n      '\\'' + post;\n  });\n}\n\n/**\n * Returns a path from a given `url`. The path includes the trailing\n * `/` from the url.\n *\n * @param {string} url Input URL to transform\n * @return {string} resolved path\n */\nexport function pathFromUrl(url) {\n  return url.substring(0, url.lastIndexOf('/') + 1);\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nimport { pathFromUrl } from './resolve-url.js';\nexport const useShadow = !(window.ShadyDOM);\nexport const useNativeCSSProperties = Boolean(!window.ShadyCSS || window.ShadyCSS.nativeCss);\nexport const useNativeCustomElements = !(window.customElements.polyfillWrapFlushCallback);\n\n\n/**\n * Globally settable property that is automatically assigned to\n * `ElementMixin` instances, useful for binding in templates to\n * make URL's relative to an application's root.  Defaults to the main\n * document URL, but can be overridden by users.  It may be useful to set\n * `rootPath` to provide a stable application mount path when\n * using client side routing.\n */\nexport let rootPath = pathFromUrl(document.baseURI || window.location.href);\n\n/**\n * Sets the global rootPath property used by `ElementMixin` and\n * available via `rootPath`.\n *\n * @param {string} path The new root path\n * @return {void}\n */\nexport const setRootPath = function(path) {\n  rootPath = path;\n};\n\n/**\n * A global callback used to sanitize any value before inserting it into the DOM.\n * The callback signature is:\n *\n *  function sanitizeDOMValue(value, name, type, node) { ... }\n *\n * Where:\n *\n * `value` is the value to sanitize.\n * `name` is the name of an attribute or property (for example, href).\n * `type` indicates where the value is being inserted: one of property, attribute, or text.\n * `node` is the node where the value is being inserted.\n *\n * @type {(function(*,string,string,Node):*)|undefined}\n */\nexport let sanitizeDOMValue = window.Polymer && window.Polymer.sanitizeDOMValue || undefined;\n\n/**\n * Sets the global sanitizeDOMValue available via this module's exported\n * `sanitizeDOMValue` variable.\n *\n * @param {(function(*,string,string,Node):*)|undefined} newSanitizeDOMValue the global sanitizeDOMValue callback\n * @return {void}\n */\nexport const setSanitizeDOMValue = function(newSanitizeDOMValue) {\n  sanitizeDOMValue = newSanitizeDOMValue;\n};\n\n/**\n * Globally settable property to make Polymer Gestures use passive TouchEvent listeners when recognizing gestures.\n * When set to `true`, gestures made from touch will not be able to prevent scrolling, allowing for smoother\n * scrolling performance.\n * Defaults to `false` for backwards compatibility.\n */\nexport let passiveTouchGestures = false;\n\n/**\n * Sets `passiveTouchGestures` globally for all elements using Polymer Gestures.\n *\n * @param {boolean} usePassive enable or disable passive touch gestures globally\n * @return {void}\n */\nexport const setPassiveTouchGestures = function(usePassive) {\n  passiveTouchGestures = usePassive;\n};\n\n/**\n * Setting to ensure Polymer template evaluation only occurs based on tempates\n * defined in trusted script.  When true, `<dom-module>` re-registration is\n * disallowed, `<dom-bind>` is disabled, and `<dom-if>`/`<dom-repeat>`\n * templates will only evaluate in the context of a trusted element template.\n */\nexport let strictTemplatePolicy = false;\n\n/**\n * Sets `strictTemplatePolicy` globally for all elements\n *\n * @param {boolean} useStrictPolicy enable or disable strict template policy\n *   globally\n * @return {void}\n */\nexport const setStrictTemplatePolicy = function(useStrictPolicy) {\n  strictTemplatePolicy = useStrictPolicy;\n};\n\n/**\n * Setting to enable dom-module lookup from Polymer.Element.  By default,\n * templates must be defined in script using the `static get template()`\n * getter and the `html` tag function.  To enable legacy loading of templates\n * via dom-module, set this flag to true.\n */\nexport let allowTemplateFromDomModule = false;\n\n/**\n * Sets `lookupTemplateFromDomModule` globally for all elements\n *\n * @param {boolean} allowDomModule enable or disable template lookup\n *   globally\n * @return {void}\n */\nexport const setAllowTemplateFromDomModule = function(allowDomModule) {\n  allowTemplateFromDomModule = allowDomModule;\n};\n\n/**\n * Setting to skip processing style includes and re-writing urls in css styles.\n * Normally \"included\" styles are pulled into the element and all urls in styles\n * are re-written to be relative to the containing script url.\n * If no includes or relative urls are used in styles, these steps can be\n * skipped as an optimization.\n */\nexport let legacyOptimizations = false;\n\n/**\n * Sets `legacyOptimizations` globally for all elements to enable optimizations\n * when only legacy based elements are used.\n *\n * @param {boolean} useLegacyOptimizations enable or disable legacy optimizations\n * includes and url rewriting\n * @return {void}\n */\nexport const setLegacyOptimizations = function(useLegacyOptimizations) {\n  legacyOptimizations = useLegacyOptimizations;\n};\n\n/**\n * Setting to perform initial rendering synchronously when running under ShadyDOM.\n * This matches the behavior of Polymer 1.\n */\nexport let syncInitialRender = false;\n\n/**\n * Sets `syncInitialRender` globally for all elements to enable synchronous\n * initial rendering.\n *\n * @param {boolean} useSyncInitialRender enable or disable synchronous initial\n * rendering globally.\n * @return {void}\n */\nexport const setSyncInitialRender = function(useSyncInitialRender) {\n  syncInitialRender = useSyncInitialRender;\n};\n\n/**\n * Setting to cancel synthetic click events fired by older mobile browsers. Modern browsers\n * no longer fire synthetic click events, and the cancellation behavior can interfere\n * when programmatically clicking on elements.\n */\nexport let cancelSyntheticClickEvents = true;\n\n/**\n * Sets `setCancelSyntheticEvents` globally for all elements to cancel synthetic click events.\n *\n * @param {boolean} useCancelSyntheticClickEvents enable or disable cancelling synthetic\n * events\n * @return {void}\n */\nexport const setCancelSyntheticClickEvents = function(useCancelSyntheticClickEvents) {\n  cancelSyntheticClickEvents = useCancelSyntheticClickEvents;\n};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\n// unique global id for deduping mixins.\nlet dedupeId = 0;\n\n/**\n * @constructor\n * @extends {Function}\n * @private\n */\nfunction MixinFunction(){}\n/** @type {(WeakMap | undefined)} */\nMixinFunction.prototype.__mixinApplications;\n/** @type {(Object | undefined)} */\nMixinFunction.prototype.__mixinSet;\n\n/* eslint-disable valid-jsdoc */\n/**\n * Wraps an ES6 class expression mixin such that the mixin is only applied\n * if it has not already been applied its base argument. Also memoizes mixin\n * applications.\n *\n * @template T\n * @param {T} mixin ES6 class expression mixin to wrap\n * @return {T}\n * @suppress {invalidCasts}\n */\nexport const dedupingMixin = function(mixin) {\n  let mixinApplications = /** @type {!MixinFunction} */(mixin).__mixinApplications;\n  if (!mixinApplications) {\n    mixinApplications = new WeakMap();\n    /** @type {!MixinFunction} */(mixin).__mixinApplications = mixinApplications;\n  }\n  // maintain a unique id for each mixin\n  let mixinDedupeId = dedupeId++;\n  function dedupingMixin(base) {\n    let baseSet = /** @type {!MixinFunction} */(base).__mixinSet;\n    if (baseSet && baseSet[mixinDedupeId]) {\n      return base;\n    }\n    let map = mixinApplications;\n    let extended = map.get(base);\n    if (!extended) {\n      extended = /** @type {!Function} */(mixin)(base);\n      map.set(base, extended);\n    }\n    // copy inherited mixin set from the extended class, or the base class\n    // NOTE: we avoid use of Set here because some browser (IE11)\n    // cannot extend a base Set via the constructor.\n    let mixinSet = Object.create(/** @type {!MixinFunction} */(extended).__mixinSet || baseSet || null);\n    mixinSet[mixinDedupeId] = true;\n    /** @type {!MixinFunction} */(extended).__mixinSet = mixinSet;\n    return extended;\n  }\n\n  return dedupingMixin;\n};\n/* eslint-enable valid-jsdoc */\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { resolveUrl, pathFromUrl } from '../utils/resolve-url.js';\nimport { strictTemplatePolicy } from '../utils/settings.js';\n\nlet modules = {};\nlet lcModules = {};\n/**\n * Sets a dom-module into the global registry by id.\n *\n * @param {string} id dom-module id\n * @param {DomModule} module dom-module instance\n * @return {void}\n */\nfunction setModule(id, module) {\n  // store id separate from lowercased id so that\n  // in all cases mixedCase id will stored distinctly\n  // and lowercase version is a fallback\n  modules[id] = lcModules[id.toLowerCase()] = module;\n}\n/**\n * Retrieves a dom-module from the global registry by id.\n *\n * @param {string} id dom-module id\n * @return {DomModule!} dom-module instance\n */\nfunction findModule(id) {\n  return modules[id] || lcModules[id.toLowerCase()];\n}\n\nfunction styleOutsideTemplateCheck(inst) {\n  if (inst.querySelector('style')) {\n    console.warn('dom-module %s has style outside template', inst.id);\n  }\n}\n\n/**\n * The `dom-module` element registers the dom it contains to the name given\n * by the module's id attribute. It provides a unified database of dom\n * accessible via its static `import` API.\n *\n * A key use case of `dom-module` is for providing custom element `<template>`s\n * via HTML imports that are parsed by the native HTML parser, that can be\n * relocated during a bundling pass and still looked up by `id`.\n *\n * Example:\n *\n *     <dom-module id=\"foo\">\n *       <img src=\"stuff.png\">\n *     </dom-module>\n *\n * Then in code in some other location that cannot access the dom-module above\n *\n *     let img = customElements.get('dom-module').import('foo', 'img');\n *\n * @customElement\n * @extends HTMLElement\n * @summary Custom element that provides a registry of relocatable DOM content\n *   by `id` that is agnostic to bundling.\n * @unrestricted\n */\nexport class DomModule extends HTMLElement {\n\n  /** @override */\n  static get observedAttributes() { return ['id']; }\n\n  /**\n   * Retrieves the element specified by the css `selector` in the module\n   * registered by `id`. For example, this.import('foo', 'img');\n   * @param {string} id The id of the dom-module in which to search.\n   * @param {string=} selector The css selector by which to find the element.\n   * @return {Element} Returns the element which matches `selector` in the\n   * module registered at the specified `id`.\n   *\n   * @export\n   * @nocollapse Referred to indirectly in style-gather.js\n   */\n  static import(id, selector) {\n    if (id) {\n      let m = findModule(id);\n      if (m && selector) {\n        return m.querySelector(selector);\n      }\n      return m;\n    }\n    return null;\n  }\n\n  /* eslint-disable no-unused-vars */\n  /**\n   * @param {string} name Name of attribute.\n   * @param {?string} old Old value of attribute.\n   * @param {?string} value Current value of attribute.\n   * @param {?string} namespace Attribute namespace.\n   * @return {void}\n   * @override\n   */\n  attributeChangedCallback(name, old, value, namespace) {\n    if (old !== value) {\n      this.register();\n    }\n  }\n  /* eslint-enable no-unused-args */\n\n  /**\n   * The absolute URL of the original location of this `dom-module`.\n   *\n   * This value will differ from this element's `ownerDocument` in the\n   * following ways:\n   * - Takes into account any `assetpath` attribute added during bundling\n   *   to indicate the original location relative to the bundled location\n   * - Uses the HTMLImports polyfill's `importForElement` API to ensure\n   *   the path is relative to the import document's location since\n   *   `ownerDocument` is not currently polyfilled\n   */\n  get assetpath() {\n    // Don't override existing assetpath.\n    if (!this.__assetpath) {\n      // note: assetpath set via an attribute must be relative to this\n      // element's location; accomodate polyfilled HTMLImports\n      const owner = window.HTMLImports && HTMLImports.importForElement ?\n        HTMLImports.importForElement(this) || document : this.ownerDocument;\n      const url = resolveUrl(\n        this.getAttribute('assetpath') || '', owner.baseURI);\n      this.__assetpath = pathFromUrl(url);\n    }\n    return this.__assetpath;\n  }\n\n  /**\n   * Registers the dom-module at a given id. This method should only be called\n   * when a dom-module is imperatively created. For\n   * example, `document.createElement('dom-module').register('foo')`.\n   * @param {string=} id The id at which to register the dom-module.\n   * @return {void}\n   */\n  register(id) {\n    id = id || this.id;\n    if (id) {\n      // Under strictTemplatePolicy, reject and null out any re-registered\n      // dom-module since it is ambiguous whether first-in or last-in is trusted\n      if (strictTemplatePolicy && findModule(id) !== undefined) {\n        setModule(id, null);\n        throw new Error(`strictTemplatePolicy: dom-module ${id} re-registered`);\n      }\n      this.id = id;\n      setModule(id, this);\n      styleOutsideTemplateCheck(this);\n    }\n  }\n}\n\nDomModule.prototype['modules'] = modules;\n\ncustomElements.define('dom-module', DomModule);\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * Module with utilities for collection CSS text from `<templates>`, external\n * stylesheets, and `dom-module`s.\n *\n * @summary Module with utilities for collection CSS text from various sources.\n */\n\nimport { DomModule } from '../elements/dom-module.js';\nimport { resolveCss } from './resolve-url.js';\n\nconst MODULE_STYLE_LINK_SELECTOR = 'link[rel=import][type~=css]';\nconst INCLUDE_ATTR = 'include';\nconst SHADY_UNSCOPED_ATTR = 'shady-unscoped';\n\n/**\n * @param {string} moduleId .\n * @return {?DomModule} .\n */\nfunction importModule(moduleId) {\n  return /** @type {?DomModule} */(DomModule.import(moduleId));\n}\n\nfunction styleForImport(importDoc) {\n  // NOTE: polyfill affordance.\n  // under the HTMLImports polyfill, there will be no 'body',\n  // but the import pseudo-doc can be used directly.\n  let container = importDoc.body ? importDoc.body : importDoc;\n  const importCss = resolveCss(container.textContent,\n    importDoc.baseURI);\n  const style = document.createElement('style');\n  style.textContent = importCss;\n  return style;\n}\n\n/** @typedef {{assetpath: string}} */\nlet templateWithAssetPath; // eslint-disable-line no-unused-vars\n\n\n/**\n * Returns a list of <style> elements in a space-separated list of `dom-module`s.\n *\n * @function\n * @param {string} moduleIds List of dom-module id's within which to\n * search for css.\n * @return {!Array<!HTMLStyleElement>} Array of contained <style> elements\n */\nexport function stylesFromModules(moduleIds) {\n const modules = moduleIds.trim().split(/\\s+/);\n const styles = [];\n for (let i=0; i < modules.length; i++) {\n   styles.push(...stylesFromModule(modules[i]));\n }\n return styles;\n}\n\n/**\n * Returns a list of <style> elements in a given `dom-module`.\n * Styles in a `dom-module` can come either from `<style>`s within the\n * first `<template>`, or else from one or more\n * `<link rel=\"import\" type=\"css\">` links outside the template.\n *\n * @param {string} moduleId dom-module id to gather styles from\n * @return {!Array<!HTMLStyleElement>} Array of contained styles.\n */\nexport function stylesFromModule(moduleId) {\n  const m = importModule(moduleId);\n\n  if (!m) {\n    console.warn('Could not find style data in module named', moduleId);\n    return [];\n  }\n\n  if (m._styles === undefined) {\n    const styles = [];\n    // module imports: <link rel=\"import\" type=\"css\">\n    styles.push(..._stylesFromModuleImports(m));\n    // include css from the first template in the module\n    const template = /** @type {?HTMLTemplateElement} */(\n        m.querySelector('template'));\n    if (template) {\n      styles.push(...stylesFromTemplate(template,\n        /** @type {templateWithAssetPath} */(m).assetpath));\n    }\n\n    m._styles = styles;\n  }\n\n  return m._styles;\n}\n\n/**\n * Returns the `<style>` elements within a given template.\n *\n * @param {!HTMLTemplateElement} template Template to gather styles from\n * @param {string=} baseURI baseURI for style content\n * @return {!Array<!HTMLStyleElement>} Array of styles\n */\nexport function stylesFromTemplate(template, baseURI) {\n  if (!template._styles) {\n    const styles = [];\n    // if element is a template, get content from its .content\n    const e$ = template.content.querySelectorAll('style');\n    for (let i=0; i < e$.length; i++) {\n      let e = e$[i];\n      // support style sharing by allowing styles to \"include\"\n      // other dom-modules that contain styling\n      let include = e.getAttribute(INCLUDE_ATTR);\n      if (include) {\n        styles.push(...stylesFromModules(include).filter(function(item, index, self) {\n          return self.indexOf(item) === index;\n        }));\n      }\n      if (baseURI) {\n        e.textContent =\n            resolveCss(e.textContent, /** @type {string} */ (baseURI));\n      }\n      styles.push(e);\n    }\n    template._styles = styles;\n  }\n  return template._styles;\n}\n\n/**\n * Returns a list of <style> elements  from stylesheets loaded via `<link rel=\"import\" type=\"css\">` links within the specified `dom-module`.\n *\n * @param {string} moduleId Id of `dom-module` to gather CSS from\n * @return {!Array<!HTMLStyleElement>} Array of contained styles.\n */\nexport function stylesFromModuleImports(moduleId) {\n let m = importModule(moduleId);\n return m ? _stylesFromModuleImports(m) : [];\n}\n\n/**\n * @param {!HTMLElement} module dom-module element that could contain `<link rel=\"import\" type=\"css\">` styles\n * @return {!Array<!HTMLStyleElement>} Array of contained styles\n */\nfunction _stylesFromModuleImports(module) {\n  const styles = [];\n  const p$ = module.querySelectorAll(MODULE_STYLE_LINK_SELECTOR);\n  for (let i=0; i < p$.length; i++) {\n    let p = p$[i];\n    if (p.import) {\n      const importDoc = p.import;\n      const unscoped = p.hasAttribute(SHADY_UNSCOPED_ATTR);\n      if (unscoped && !importDoc._unscopedStyle) {\n        const style = styleForImport(importDoc);\n        style.setAttribute(SHADY_UNSCOPED_ATTR, '');\n        importDoc._unscopedStyle = style;\n      } else if (!importDoc._style) {\n        importDoc._style = styleForImport(importDoc);\n      }\n      styles.push(unscoped ? importDoc._unscopedStyle : importDoc._style);\n    }\n  }\n  return styles;\n}\n\n/**\n *\n * Returns CSS text of styles in a space-separated list of `dom-module`s.\n * Note: This method is deprecated, use `stylesFromModules` instead.\n *\n * @deprecated\n * @param {string} moduleIds List of dom-module id's within which to\n * search for css.\n * @return {string} Concatenated CSS content from specified `dom-module`s\n */\nexport function cssFromModules(moduleIds) {\n let modules = moduleIds.trim().split(/\\s+/);\n let cssText = '';\n for (let i=0; i < modules.length; i++) {\n   cssText += cssFromModule(modules[i]);\n }\n return cssText;\n}\n\n/**\n * Returns CSS text of styles in a given `dom-module`.  CSS in a `dom-module`\n * can come either from `<style>`s within the first `<template>`, or else\n * from one or more `<link rel=\"import\" type=\"css\">` links outside the\n * template.\n *\n * Any `<styles>` processed are removed from their original location.\n * Note: This method is deprecated, use `styleFromModule` instead.\n *\n * @deprecated\n * @param {string} moduleId dom-module id to gather styles from\n * @return {string} Concatenated CSS content from specified `dom-module`\n */\nexport function cssFromModule(moduleId) {\n  let m = importModule(moduleId);\n  if (m && m._cssText === undefined) {\n    // module imports: <link rel=\"import\" type=\"css\">\n    let cssText = _cssFromModuleImports(m);\n    // include css from the first template in the module\n    let t = /** @type {?HTMLTemplateElement} */(m.querySelector('template'));\n    if (t) {\n      cssText += cssFromTemplate(t,\n        /** @type {templateWithAssetPath} */(m).assetpath);\n    }\n    m._cssText = cssText || null;\n  }\n  if (!m) {\n    console.warn('Could not find style data in module named', moduleId);\n  }\n  return m && m._cssText || '';\n}\n\n/**\n * Returns CSS text of `<styles>` within a given template.\n *\n * Any `<styles>` processed are removed from their original location.\n * Note: This method is deprecated, use `styleFromTemplate` instead.\n *\n * @deprecated\n * @param {!HTMLTemplateElement} template Template to gather styles from\n * @param {string} baseURI Base URI to resolve the URL against\n * @return {string} Concatenated CSS content from specified template\n */\nexport function cssFromTemplate(template, baseURI) {\n  let cssText = '';\n  const e$ = stylesFromTemplate(template, baseURI);\n  // if element is a template, get content from its .content\n  for (let i=0; i < e$.length; i++) {\n    let e = e$[i];\n    if (e.parentNode) {\n      e.parentNode.removeChild(e);\n    }\n    cssText += e.textContent;\n  }\n  return cssText;\n}\n\n/**\n * Returns CSS text from stylesheets loaded via `<link rel=\"import\" type=\"css\">`\n * links within the specified `dom-module`.\n *\n * Note: This method is deprecated, use `stylesFromModuleImports` instead.\n *\n * @deprecated\n *\n * @param {string} moduleId Id of `dom-module` to gather CSS from\n * @return {string} Concatenated CSS content from links in specified `dom-module`\n */\nexport function cssFromModuleImports(moduleId) {\n  let m = importModule(moduleId);\n  return m ? _cssFromModuleImports(m) : '';\n}\n\n/**\n * @deprecated\n * @param {!HTMLElement} module dom-module element that could contain `<link rel=\"import\" type=\"css\">` styles\n * @return {string} Concatenated CSS content from links in the dom-module\n */\nfunction _cssFromModuleImports(module) {\n  let cssText = '';\n  let styles = _stylesFromModuleImports(module);\n  for (let i=0; i < styles.length; i++) {\n    cssText += styles[i].textContent;\n  }\n  return cssText;\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/* eslint-disable valid-jsdoc */\n/**\n * Node wrapper to ensure ShadowDOM safe operation regardless of polyfill\n * presence or mode. Note that with the introduction of `ShadyDOM.noPatch`,\n * a node wrapper must be used to access ShadowDOM API.\n * This is similar to using `Polymer.dom` but relies exclusively\n * on the presence of the ShadyDOM polyfill rather than requiring the loading\n * of legacy (Polymer.dom) API.\n * @type {function(Node):Node}\n */\nexport const wrap = (window['ShadyDOM'] && window['ShadyDOM']['noPatch'] && window['ShadyDOM']['wrap']) ?\n  window['ShadyDOM']['wrap'] :\n  (window['ShadyDOM'] ? (n) => ShadyDOM['patch'](n) : (n) => n);\n\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\n/**\n * Module with utilities for manipulating structured data path strings.\n *\n * @summary Module with utilities for manipulating structured data path strings.\n */\n\n/**\n * Returns true if the given string is a structured data path (has dots).\n *\n * Example:\n *\n * ```\n * isPath('foo.bar.baz') // true\n * isPath('foo')         // false\n * ```\n *\n * @param {string} path Path string\n * @return {boolean} True if the string contained one or more dots\n */\nexport function isPath(path) {\n  return path.indexOf('.') >= 0;\n}\n\n/**\n * Returns the root property name for the given path.\n *\n * Example:\n *\n * ```\n * root('foo.bar.baz') // 'foo'\n * root('foo')         // 'foo'\n * ```\n *\n * @param {string} path Path string\n * @return {string} Root property name\n */\nexport function root(path) {\n  let dotIndex = path.indexOf('.');\n  if (dotIndex === -1) {\n    return path;\n  }\n  return path.slice(0, dotIndex);\n}\n\n/**\n * Given `base` is `foo.bar`, `foo` is an ancestor, `foo.bar` is not\n * Returns true if the given path is an ancestor of the base path.\n *\n * Example:\n *\n * ```\n * isAncestor('foo.bar', 'foo')         // true\n * isAncestor('foo.bar', 'foo.bar')     // false\n * isAncestor('foo.bar', 'foo.bar.baz') // false\n * ```\n *\n * @param {string} base Path string to test against.\n * @param {string} path Path string to test.\n * @return {boolean} True if `path` is an ancestor of `base`.\n */\nexport function isAncestor(base, path) {\n  //     base.startsWith(path + '.');\n  return base.indexOf(path + '.') === 0;\n}\n\n/**\n * Given `base` is `foo.bar`, `foo.bar.baz` is an descendant\n *\n * Example:\n *\n * ```\n * isDescendant('foo.bar', 'foo.bar.baz') // true\n * isDescendant('foo.bar', 'foo.bar')     // false\n * isDescendant('foo.bar', 'foo')         // false\n * ```\n *\n * @param {string} base Path string to test against.\n * @param {string} path Path string to test.\n * @return {boolean} True if `path` is a descendant of `base`.\n */\nexport function isDescendant(base, path) {\n  //     path.startsWith(base + '.');\n  return path.indexOf(base + '.') === 0;\n}\n\n/**\n * Replaces a previous base path with a new base path, preserving the\n * remainder of the path.\n *\n * User must ensure `path` has a prefix of `base`.\n *\n * Example:\n *\n * ```\n * translate('foo.bar', 'zot', 'foo.bar.baz') // 'zot.baz'\n * ```\n *\n * @param {string} base Current base string to remove\n * @param {string} newBase New base string to replace with\n * @param {string} path Path to translate\n * @return {string} Translated string\n */\nexport function translate(base, newBase, path) {\n  return newBase + path.slice(base.length);\n}\n\n/**\n * @param {string} base Path string to test against\n * @param {string} path Path string to test\n * @return {boolean} True if `path` is equal to `base`\n */\nexport function matches(base, path) {\n  return (base === path) ||\n         isAncestor(base, path) ||\n         isDescendant(base, path);\n}\n\n/**\n * Converts array-based paths to flattened path.  String-based paths\n * are returned as-is.\n *\n * Example:\n *\n * ```\n * normalize(['foo.bar', 0, 'baz'])  // 'foo.bar.0.baz'\n * normalize('foo.bar.0.baz')        // 'foo.bar.0.baz'\n * ```\n *\n * @param {string | !Array<string|number>} path Input path\n * @return {string} Flattened path\n */\nexport function normalize(path) {\n  if (Array.isArray(path)) {\n    let parts = [];\n    for (let i=0; i<path.length; i++) {\n      let args = path[i].toString().split('.');\n      for (let j=0; j<args.length; j++) {\n        parts.push(args[j]);\n      }\n    }\n    return parts.join('.');\n  } else {\n    return path;\n  }\n}\n\n/**\n * Splits a path into an array of property names. Accepts either arrays\n * of path parts or strings.\n *\n * Example:\n *\n * ```\n * split(['foo.bar', 0, 'baz'])  // ['foo', 'bar', '0', 'baz']\n * split('foo.bar.0.baz')        // ['foo', 'bar', '0', 'baz']\n * ```\n *\n * @param {string | !Array<string|number>} path Input path\n * @return {!Array<string>} Array of path parts\n * @suppress {checkTypes}\n */\nexport function split(path) {\n  if (Array.isArray(path)) {\n    return normalize(path).split('.');\n  }\n  return path.toString().split('.');\n}\n\n/**\n * Reads a value from a path.  If any sub-property in the path is `undefined`,\n * this method returns `undefined` (will never throw.\n *\n * @param {Object} root Object from which to dereference path from\n * @param {string | !Array<string|number>} path Path to read\n * @param {Object=} info If an object is provided to `info`, the normalized\n *  (flattened) path will be set to `info.path`.\n * @return {*} Value at path, or `undefined` if the path could not be\n *  fully dereferenced.\n */\nexport function get(root, path, info) {\n  let prop = root;\n  let parts = split(path);\n  // Loop over path parts[0..n-1] and dereference\n  for (let i=0; i<parts.length; i++) {\n    if (!prop) {\n      return;\n    }\n    let part = parts[i];\n    prop = prop[part];\n  }\n  if (info) {\n    info.path = parts.join('.');\n  }\n  return prop;\n}\n\n/**\n * Sets a value to a path.  If any sub-property in the path is `undefined`,\n * this method will no-op.\n *\n * @param {Object} root Object from which to dereference path from\n * @param {string | !Array<string|number>} path Path to set\n * @param {*} value Value to set to path\n * @return {string | undefined} The normalized version of the input path\n */\nexport function set(root, path, value) {\n  let prop = root;\n  let parts = split(path);\n  let last = parts[parts.length-1];\n  if (parts.length > 1) {\n    // Loop over path parts[0..n-2] and dereference\n    for (let i=0; i<parts.length-1; i++) {\n      let part = parts[i];\n      prop = prop[part];\n      if (!prop) {\n        return;\n      }\n    }\n    // Set value to object at end of path\n    prop[last] = value;\n  } else {\n    // Simple property set\n    prop[path] = value;\n  }\n  return parts.join('.');\n}\n\n/**\n * Returns true if the given string is a structured data path (has dots).\n *\n * This function is deprecated.  Use `isPath` instead.\n *\n * Example:\n *\n * ```\n * isDeep('foo.bar.baz') // true\n * isDeep('foo')         // false\n * ```\n *\n * @deprecated\n * @param {string} path Path string\n * @return {boolean} True if the string contained one or more dots\n */\nexport const isDeep = isPath;\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nconst caseMap = {};\nconst DASH_TO_CAMEL = /-[a-z]/g;\nconst CAMEL_TO_DASH = /([A-Z])/g;\n\n/**\n * @fileoverview Module with utilities for converting between \"dash-case\" and\n * \"camelCase\" identifiers.\n */\n\n/**\n * Converts \"dash-case\" identifier (e.g. `foo-bar-baz`) to \"camelCase\"\n * (e.g. `fooBarBaz`).\n *\n * @param {string} dash Dash-case identifier\n * @return {string} Camel-case representation of the identifier\n */\nexport function dashToCamelCase(dash) {\n  return caseMap[dash] || (\n    caseMap[dash] = dash.indexOf('-') < 0 ? dash : dash.replace(DASH_TO_CAMEL,\n      (m) => m[1].toUpperCase()\n    )\n  );\n}\n\n/**\n * Converts \"camelCase\" identifier (e.g. `fooBarBaz`) to \"dash-case\"\n * (e.g. `foo-bar-baz`).\n *\n * @param {string} camel Camel-case identifier\n * @return {string} Dash-case representation of the identifier\n */\nexport function camelToDashCase(camel) {\n  return caseMap[camel] || (\n    caseMap[camel] = camel.replace(CAMEL_TO_DASH, '-$1').toLowerCase()\n  );\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * @fileoverview\n *\n * This module provides a number of strategies for enqueuing asynchronous\n * tasks. Each sub-module provides a standard `run(fn)` interface that returns a\n * handle, and a `cancel(handle)` interface for canceling async tasks before\n * they run.\n *\n * @summary Module that provides a number of strategies for enqueuing\n * asynchronous tasks.\n */\n\nimport './boot.js';\n\n// Microtask implemented using Mutation Observer\nlet microtaskCurrHandle = 0;\nlet microtaskLastHandle = 0;\nlet microtaskCallbacks = [];\nlet microtaskNodeContent = 0;\nlet microtaskNode = document.createTextNode('');\nnew window.MutationObserver(microtaskFlush).observe(microtaskNode, {characterData: true});\n\nfunction microtaskFlush() {\n  const len = microtaskCallbacks.length;\n  for (let i = 0; i < len; i++) {\n    let cb = microtaskCallbacks[i];\n    if (cb) {\n      try {\n        cb();\n      } catch (e) {\n        setTimeout(() => { throw e; });\n      }\n    }\n  }\n  microtaskCallbacks.splice(0, len);\n  microtaskLastHandle += len;\n}\n\n/**\n * Async interface wrapper around `setTimeout`.\n *\n * @namespace\n * @summary Async interface wrapper around `setTimeout`.\n */\nconst timeOut = {\n  /**\n   * Returns a sub-module with the async interface providing the provided\n   * delay.\n   *\n   * @memberof timeOut\n   * @param {number=} delay Time to wait before calling callbacks in ms\n   * @return {!AsyncInterface} An async timeout interface\n   */\n  after(delay) {\n    return {\n      run(fn) { return window.setTimeout(fn, delay); },\n      cancel(handle) {\n        window.clearTimeout(handle);\n      }\n    };\n  },\n  /**\n   * Enqueues a function called in the next task.\n   *\n   * @memberof timeOut\n   * @param {!Function} fn Callback to run\n   * @param {number=} delay Delay in milliseconds\n   * @return {number} Handle used for canceling task\n   */\n  run(fn, delay) {\n    return window.setTimeout(fn, delay);\n  },\n  /**\n   * Cancels a previously enqueued `timeOut` callback.\n   *\n   * @memberof timeOut\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    window.clearTimeout(handle);\n  }\n};\nexport {timeOut};\n\n/**\n * Async interface wrapper around `requestAnimationFrame`.\n *\n * @namespace\n * @summary Async interface wrapper around `requestAnimationFrame`.\n */\nconst animationFrame = {\n  /**\n   * Enqueues a function called at `requestAnimationFrame` timing.\n   *\n   * @memberof animationFrame\n   * @param {function(number):void} fn Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(fn) {\n    return window.requestAnimationFrame(fn);\n  },\n  /**\n   * Cancels a previously enqueued `animationFrame` callback.\n   *\n   * @memberof animationFrame\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    window.cancelAnimationFrame(handle);\n  }\n};\nexport {animationFrame};\n\n/**\n * Async interface wrapper around `requestIdleCallback`.  Falls back to\n * `setTimeout` on browsers that do not support `requestIdleCallback`.\n *\n * @namespace\n * @summary Async interface wrapper around `requestIdleCallback`.\n */\nconst idlePeriod = {\n  /**\n   * Enqueues a function called at `requestIdleCallback` timing.\n   *\n   * @memberof idlePeriod\n   * @param {function(!IdleDeadline):void} fn Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(fn) {\n    return window.requestIdleCallback ?\n      window.requestIdleCallback(fn) :\n      window.setTimeout(fn, 16);\n  },\n  /**\n   * Cancels a previously enqueued `idlePeriod` callback.\n   *\n   * @memberof idlePeriod\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    window.cancelIdleCallback ?\n      window.cancelIdleCallback(handle) :\n      window.clearTimeout(handle);\n  }\n};\nexport {idlePeriod};\n\n/**\n * Async interface for enqueuing callbacks that run at microtask timing.\n *\n * Note that microtask timing is achieved via a single `MutationObserver`,\n * and thus callbacks enqueued with this API will all run in a single\n * batch, and not interleaved with other microtasks such as promises.\n * Promises are avoided as an implementation choice for the time being\n * due to Safari bugs that cause Promises to lack microtask guarantees.\n *\n * @namespace\n * @summary Async interface for enqueuing callbacks that run at microtask\n *   timing.\n */\nconst microTask = {\n\n  /**\n   * Enqueues a function called at microtask timing.\n   *\n   * @memberof microTask\n   * @param {!Function=} callback Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(callback) {\n    microtaskNode.textContent = microtaskNodeContent++;\n    microtaskCallbacks.push(callback);\n    return microtaskCurrHandle++;\n  },\n\n  /**\n   * Cancels a previously enqueued `microTask` callback.\n   *\n   * @memberof microTask\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    const idx = handle - microtaskLastHandle;\n    if (idx >= 0) {\n      if (!microtaskCallbacks[idx]) {\n        throw new Error('invalid async handle: ' + handle);\n      }\n      microtaskCallbacks[idx] = null;\n    }\n  }\n\n};\nexport {microTask};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { microTask } from '../utils/async.js';\nimport { wrap } from '../utils/wrap.js';\n\n/** @const {!AsyncInterface} */\nconst microtask = microTask;\n\n/**\n * Element class mixin that provides basic meta-programming for creating one\n * or more property accessors (getter/setter pair) that enqueue an async\n * (batched) `_propertiesChanged` callback.\n *\n * For basic usage of this mixin, call `MyClass.createProperties(props)`\n * once at class definition time to create property accessors for properties\n * named in props, implement `_propertiesChanged` to react as desired to\n * property changes, and implement `static get observedAttributes()` and\n * include lowercase versions of any property names that should be set from\n * attributes. Last, call `this._enableProperties()` in the element's\n * `connectedCallback` to enable the accessors.\n *\n * @mixinFunction\n * @polymer\n * @summary Element class mixin for reacting to property changes from\n *   generated property accessors.\n * @template T\n * @param {function(new:T)} superClass Class to apply mixin to.\n * @return {function(new:T)} superClass with mixin applied.\n */\nexport const PropertiesChanged = dedupingMixin(\n    /**\n     * @template T\n     * @param {function(new:T)} superClass Class to apply mixin to.\n     * @return {function(new:T)} superClass with mixin applied.\n     */\n    (superClass) => {\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_PropertiesChanged}\n   * @unrestricted\n   */\n  class PropertiesChanged extends superClass {\n\n    /**\n     * Creates property accessors for the given property names.\n     * @param {!Object} props Object whose keys are names of accessors.\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static createProperties(props) {\n      const proto = this.prototype;\n      for (let prop in props) {\n        // don't stomp an existing accessor\n        if (!(prop in proto)) {\n          proto._createPropertyAccessor(prop);\n        }\n      }\n    }\n\n    /**\n     * Returns an attribute name that corresponds to the given property.\n     * The attribute name is the lowercased property name. Override to\n     * customize this mapping.\n     * @param {string} property Property to convert\n     * @return {string} Attribute name corresponding to the given property.\n     *\n     * @protected\n     * @nocollapse\n     */\n    static attributeNameForProperty(property) {\n      return property.toLowerCase();\n    }\n\n    /**\n     * Override point to provide a type to which to deserialize a value to\n     * a given property.\n     * @param {string} name Name of property\n     *\n     * @protected\n     * @nocollapse\n     */\n    static typeForProperty(name) { } //eslint-disable-line no-unused-vars\n\n    /**\n     * Creates a setter/getter pair for the named property with its own\n     * local storage.  The getter returns the value in the local storage,\n     * and the setter calls `_setProperty`, which updates the local storage\n     * for the property and enqueues a `_propertiesChanged` callback.\n     *\n     * This method may be called on a prototype or an instance.  Calling\n     * this method may overwrite a property value that already exists on\n     * the prototype/instance by creating the accessor.\n     *\n     * @param {string} property Name of the property\n     * @param {boolean=} readOnly When true, no setter is created; the\n     *   protected `_setProperty` function must be used to set the property\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _createPropertyAccessor(property, readOnly) {\n      this._addPropertyToAttributeMap(property);\n      if (!this.hasOwnProperty(JSCompiler_renameProperty('__dataHasAccessor', this))) {\n        this.__dataHasAccessor = Object.assign({}, this.__dataHasAccessor);\n      }\n      if (!this.__dataHasAccessor[property]) {\n        this.__dataHasAccessor[property] = true;\n        this._definePropertyAccessor(property, readOnly);\n      }\n    }\n\n    /**\n     * Adds the given `property` to a map matching attribute names\n     * to property names, using `attributeNameForProperty`. This map is\n     * used when deserializing attribute values to properties.\n     *\n     * @param {string} property Name of the property\n     * @override\n     */\n    _addPropertyToAttributeMap(property) {\n      if (!this.hasOwnProperty(JSCompiler_renameProperty('__dataAttributes', this))) {\n        this.__dataAttributes = Object.assign({}, this.__dataAttributes);\n      }\n      if (!this.__dataAttributes[property]) {\n        const attr = this.constructor.attributeNameForProperty(property);\n        this.__dataAttributes[attr] = property;\n      }\n    }\n\n    /**\n     * Defines a property accessor for the given property.\n     * @param {string} property Name of the property\n     * @param {boolean=} readOnly When true, no setter is created\n     * @return {void}\n     * @override\n     */\n     _definePropertyAccessor(property, readOnly) {\n      Object.defineProperty(this, property, {\n        /* eslint-disable valid-jsdoc */\n        /** @this {PropertiesChanged} */\n        get() {\n          return this._getProperty(property);\n        },\n        /** @this {PropertiesChanged} */\n        set: readOnly ? function () {} : function (value) {\n          this._setProperty(property, value);\n        }\n        /* eslint-enable */\n      });\n    }\n\n    constructor() {\n      super();\n      /** @type {boolean} */\n      this.__dataEnabled = false;\n      this.__dataReady = false;\n      this.__dataInvalid = false;\n      this.__data = {};\n      this.__dataPending = null;\n      this.__dataOld = null;\n      this.__dataInstanceProps = null;\n      this.__serializing = false;\n      this._initializeProperties();\n    }\n\n    /**\n     * Lifecycle callback called when properties are enabled via\n     * `_enableProperties`.\n     *\n     * Users may override this function to implement behavior that is\n     * dependent on the element having its property data initialized, e.g.\n     * from defaults (initialized from `constructor`, `_initializeProperties`),\n     * `attributeChangedCallback`, or values propagated from host e.g. via\n     * bindings.  `super.ready()` must be called to ensure the data system\n     * becomes enabled.\n     *\n     * @return {void}\n     * @public\n     * @override\n     */\n    ready() {\n      this.__dataReady = true;\n      this._flushProperties();\n    }\n\n    /**\n     * Initializes the local storage for property accessors.\n     *\n     * Provided as an override point for performing any setup work prior\n     * to initializing the property accessor system.\n     *\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _initializeProperties() {\n      // Capture instance properties; these will be set into accessors\n      // during first flush. Don't set them here, since we want\n      // these to overwrite defaults/constructor assignments\n      for (let p in this.__dataHasAccessor) {\n        if (this.hasOwnProperty(p)) {\n          this.__dataInstanceProps = this.__dataInstanceProps || {};\n          this.__dataInstanceProps[p] = this[p];\n          delete this[p];\n        }\n      }\n    }\n\n    /**\n     * Called at ready time with bag of instance properties that overwrote\n     * accessors when the element upgraded.\n     *\n     * The default implementation sets these properties back into the\n     * setter at ready time.  This method is provided as an override\n     * point for customizing or providing more efficient initialization.\n     *\n     * @param {Object} props Bag of property values that were overwritten\n     *   when creating property accessors.\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _initializeInstanceProperties(props) {\n      Object.assign(this, props);\n    }\n\n    /**\n     * Updates the local storage for a property (via `_setPendingProperty`)\n     * and enqueues a `_proeprtiesChanged` callback.\n     *\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _setProperty(property, value) {\n      if (this._setPendingProperty(property, value)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Returns the value for the given property.\n     * @param {string} property Name of property\n     * @return {*} Value for the given property\n     * @protected\n     * @override\n     */\n    _getProperty(property) {\n      return this.__data[property];\n    }\n\n    /* eslint-disable no-unused-vars */\n    /**\n     * Updates the local storage for a property, records the previous value,\n     * and adds it to the set of \"pending changes\" that will be passed to the\n     * `_propertiesChanged` callback.  This method does not enqueue the\n     * `_propertiesChanged` callback.\n     *\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @param {boolean=} ext Not used here; affordance for closure\n     * @return {boolean} Returns true if the property changed\n     * @protected\n     * @override\n     */\n    _setPendingProperty(property, value, ext) {\n      let old = this.__data[property];\n      let changed = this._shouldPropertyChange(property, value, old);\n      if (changed) {\n        if (!this.__dataPending) {\n          this.__dataPending = {};\n          this.__dataOld = {};\n        }\n        // Ensure old is captured from the last turn\n        if (this.__dataOld && !(property in this.__dataOld)) {\n          this.__dataOld[property] = old;\n        }\n        this.__data[property] = value;\n        this.__dataPending[property] = value;\n      }\n      return changed;\n    }\n    /* eslint-enable */\n\n    /**\n     * Marks the properties as invalid, and enqueues an async\n     * `_propertiesChanged` callback.\n     *\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _invalidateProperties() {\n      if (!this.__dataInvalid && this.__dataReady) {\n        this.__dataInvalid = true;\n        microtask.run(() => {\n          if (this.__dataInvalid) {\n            this.__dataInvalid = false;\n            this._flushProperties();\n          }\n        });\n      }\n    }\n\n    /**\n     * Call to enable property accessor processing. Before this method is\n     * called accessor values will be set but side effects are\n     * queued. When called, any pending side effects occur immediately.\n     * For elements, generally `connectedCallback` is a normal spot to do so.\n     * It is safe to call this method multiple times as it only turns on\n     * property accessors once.\n     *\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _enableProperties() {\n      if (!this.__dataEnabled) {\n        this.__dataEnabled = true;\n        if (this.__dataInstanceProps) {\n          this._initializeInstanceProperties(this.__dataInstanceProps);\n          this.__dataInstanceProps = null;\n        }\n        this.ready();\n      }\n    }\n\n    /**\n     * Calls the `_propertiesChanged` callback with the current set of\n     * pending changes (and old values recorded when pending changes were\n     * set), and resets the pending set of changes. Generally, this method\n     * should not be called in user code.\n     *\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _flushProperties() {\n      const props = this.__data;\n      const changedProps = this.__dataPending;\n      const old = this.__dataOld;\n      if (this._shouldPropertiesChange(props, changedProps, old)) {\n        this.__dataPending = null;\n        this.__dataOld = null;\n        this._propertiesChanged(props, changedProps, old);\n      }\n    }\n\n    /**\n     * Called in `_flushProperties` to determine if `_propertiesChanged`\n     * should be called. The default implementation returns true if\n     * properties are pending. Override to customize when\n     * `_propertiesChanged` is called.\n     * @param {!Object} currentProps Bag of all current accessor values\n     * @param {?Object} changedProps Bag of properties changed since the last\n     *   call to `_propertiesChanged`\n     * @param {?Object} oldProps Bag of previous values for each property\n     *   in `changedProps`\n     * @return {boolean} true if changedProps is truthy\n     * @override\n     */\n    _shouldPropertiesChange(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars\n      return Boolean(changedProps);\n    }\n\n    /**\n     * Callback called when any properties with accessors created via\n     * `_createPropertyAccessor` have been set.\n     *\n     * @param {!Object} currentProps Bag of all current accessor values\n     * @param {?Object} changedProps Bag of properties changed since the last\n     *   call to `_propertiesChanged`\n     * @param {?Object} oldProps Bag of previous values for each property\n     *   in `changedProps`\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _propertiesChanged(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Method called to determine whether a property value should be\n     * considered as a change and cause the `_propertiesChanged` callback\n     * to be enqueued.\n     *\n     * The default implementation returns `true` if a strict equality\n     * check fails. The method always returns false for `NaN`.\n     *\n     * Override this method to e.g. provide stricter checking for\n     * Objects/Arrays when using immutable patterns.\n     *\n     * @param {string} property Property name\n     * @param {*} value New property value\n     * @param {*} old Previous property value\n     * @return {boolean} Whether the property should be considered a change\n     *   and enqueue a `_proeprtiesChanged` callback\n     * @protected\n     * @override\n     */\n    _shouldPropertyChange(property, value, old) {\n      return (\n        // Strict equality check\n        (old !== value &&\n          // This ensures (old==NaN, value==NaN) always returns false\n          (old === old || value === value))\n      );\n    }\n\n    /**\n     * Implements native Custom Elements `attributeChangedCallback` to\n     * set an attribute value to a property via `_attributeToProperty`.\n     *\n     * @param {string} name Name of attribute that changed\n     * @param {?string} old Old attribute value\n     * @param {?string} value New attribute value\n     * @param {?string} namespace Attribute namespace.\n     * @return {void}\n     * @suppress {missingProperties} Super may or may not implement the callback\n     * @override\n     */\n    attributeChangedCallback(name, old, value, namespace) {\n      if (old !== value) {\n        this._attributeToProperty(name, value);\n      }\n      if (super.attributeChangedCallback) {\n        super.attributeChangedCallback(name, old, value, namespace);\n      }\n    }\n\n    /**\n     * Deserializes an attribute to its associated property.\n     *\n     * This method calls the `_deserializeValue` method to convert the string to\n     * a typed value.\n     *\n     * @param {string} attribute Name of attribute to deserialize.\n     * @param {?string} value of the attribute.\n     * @param {*=} type type to deserialize to, defaults to the value\n     * returned from `typeForProperty`\n     * @return {void}\n     * @override\n     */\n    _attributeToProperty(attribute, value, type) {\n      if (!this.__serializing) {\n        const map = this.__dataAttributes;\n        const property = map && map[attribute] || attribute;\n        this[property] = this._deserializeValue(value, type ||\n          this.constructor.typeForProperty(property));\n      }\n    }\n\n    /**\n     * Serializes a property to its associated attribute.\n     *\n     * @suppress {invalidCasts} Closure can't figure out `this` is an element.\n     *\n     * @param {string} property Property name to reflect.\n     * @param {string=} attribute Attribute name to reflect to.\n     * @param {*=} value Property value to refect.\n     * @return {void}\n     * @override\n     */\n    _propertyToAttribute(property, attribute, value) {\n      this.__serializing = true;\n      value = (arguments.length < 3) ? this[property] : value;\n      this._valueToNodeAttribute(/** @type {!HTMLElement} */(this), value,\n        attribute || this.constructor.attributeNameForProperty(property));\n      this.__serializing = false;\n    }\n\n    /**\n     * Sets a typed value to an HTML attribute on a node.\n     *\n     * This method calls the `_serializeValue` method to convert the typed\n     * value to a string.  If the `_serializeValue` method returns `undefined`,\n     * the attribute will be removed (this is the default for boolean\n     * type `false`).\n     *\n     * @param {Element} node Element to set attribute to.\n     * @param {*} value Value to serialize.\n     * @param {string} attribute Attribute name to serialize to.\n     * @return {void}\n     * @override\n     */\n    _valueToNodeAttribute(node, value, attribute) {\n      const str = this._serializeValue(value);\n      if (attribute === 'class' || attribute === 'name' || attribute === 'slot') {\n        node = /** @type {?Element} */(wrap(node));\n      }\n      if (str === undefined) {\n        node.removeAttribute(attribute);\n      } else {\n        node.setAttribute(attribute, str);\n      }\n    }\n\n    /**\n     * Converts a typed JavaScript value to a string.\n     *\n     * This method is called when setting JS property values to\n     * HTML attributes.  Users may override this method to provide\n     * serialization for custom types.\n     *\n     * @param {*} value Property value to serialize.\n     * @return {string | undefined} String serialized from the provided\n     * property  value.\n     * @override\n     */\n    _serializeValue(value) {\n      switch (typeof value) {\n        case 'boolean':\n          return value ? '' : undefined;\n        default:\n          return value != null ? value.toString() : undefined;\n      }\n    }\n\n    /**\n     * Converts a string to a typed JavaScript value.\n     *\n     * This method is called when reading HTML attribute values to\n     * JS properties.  Users may override this method to provide\n     * deserialization for custom `type`s. Types for `Boolean`, `String`,\n     * and `Number` convert attributes to the expected types.\n     *\n     * @param {?string} value Value to deserialize.\n     * @param {*=} type Type to deserialize the string to.\n     * @return {*} Typed value deserialized from the provided string.\n     * @override\n     */\n    _deserializeValue(value, type) {\n      switch (type) {\n        case Boolean:\n          return (value !== null);\n        case Number:\n          return Number(value);\n        default:\n          return value;\n      }\n    }\n\n  }\n\n  return PropertiesChanged;\n});\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { camelToDashCase, dashToCamelCase } from '../utils/case-map.js';\nimport { PropertiesChanged } from './properties-changed.js';\n\n// Save map of native properties; this forms a blacklist or properties\n// that won't have their values \"saved\" by `saveAccessorValue`, since\n// reading from an HTMLElement accessor from the context of a prototype throws\nconst nativeProperties = {};\nlet proto = HTMLElement.prototype;\nwhile (proto) {\n  let props = Object.getOwnPropertyNames(proto);\n  for (let i=0; i<props.length; i++) {\n    nativeProperties[props[i]] = true;\n  }\n  proto = Object.getPrototypeOf(proto);\n}\n\n/**\n * Used to save the value of a property that will be overridden with\n * an accessor. If the `model` is a prototype, the values will be saved\n * in `__dataProto`, and it's up to the user (or downstream mixin) to\n * decide how/when to set these values back into the accessors.\n * If `model` is already an instance (it has a `__data` property), then\n * the value will be set as a pending property, meaning the user should\n * call `_invalidateProperties` or `_flushProperties` to take effect\n *\n * @param {Object} model Prototype or instance\n * @param {string} property Name of property\n * @return {void}\n * @private\n */\nfunction saveAccessorValue(model, property) {\n  // Don't read/store value for any native properties since they could throw\n  if (!nativeProperties[property]) {\n    let value = model[property];\n    if (value !== undefined) {\n      if (model.__data) {\n        // Adding accessor to instance; update the property\n        // It is the user's responsibility to call _flushProperties\n        model._setPendingProperty(property, value);\n      } else {\n        // Adding accessor to proto; save proto's value for instance-time use\n        if (!model.__dataProto) {\n          model.__dataProto = {};\n        } else if (!model.hasOwnProperty(JSCompiler_renameProperty('__dataProto', model))) {\n          model.__dataProto = Object.create(model.__dataProto);\n        }\n        model.__dataProto[property] = value;\n      }\n    }\n  }\n}\n\n/**\n * Element class mixin that provides basic meta-programming for creating one\n * or more property accessors (getter/setter pair) that enqueue an async\n * (batched) `_propertiesChanged` callback.\n *\n * For basic usage of this mixin:\n *\n * -   Declare attributes to observe via the standard `static get\n *     observedAttributes()`. Use `dash-case` attribute names to represent\n *     `camelCase` property names.\n * -   Implement the `_propertiesChanged` callback on the class.\n * -   Call `MyClass.createPropertiesForAttributes()` **once** on the class to\n *     generate property accessors for each observed attribute. This must be\n *     called before the first instance is created, for example, by calling it\n *     before calling `customElements.define`. It can also be called lazily from\n *     the element's `constructor`, as long as it's guarded so that the call is\n *     only made once, when the first instance is created.\n * -   Call `this._enableProperties()` in the element's `connectedCallback` to\n *     enable the accessors.\n *\n * Any `observedAttributes` will automatically be\n * deserialized via `attributeChangedCallback` and set to the associated\n * property using `dash-case`-to-`camelCase` convention.\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin PropertiesChanged\n * @summary Element class mixin for reacting to property changes from\n *   generated property accessors.\n * @template T\n * @param {function(new:T)} superClass Class to apply mixin to.\n * @return {function(new:T)} superClass with mixin applied.\n */\nexport const PropertyAccessors = dedupingMixin(superClass => {\n\n  /**\n   * @constructor\n   * @implements {Polymer_PropertiesChanged}\n   * @unrestricted\n   * @private\n   */\n   const base = PropertiesChanged(superClass);\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_PropertyAccessors}\n   * @extends {base}\n   * @unrestricted\n   */\n  class PropertyAccessors extends base {\n\n    /**\n     * Generates property accessors for all attributes in the standard\n     * static `observedAttributes` array.\n     *\n     * Attribute names are mapped to property names using the `dash-case` to\n     * `camelCase` convention\n     *\n     * @return {void}\n     * @nocollapse\n     */\n    static createPropertiesForAttributes() {\n      let a$ =  /** @type {?} */ (this).observedAttributes;\n      for (let i=0; i < a$.length; i++) {\n        this.prototype._createPropertyAccessor(dashToCamelCase(a$[i]));\n      }\n    }\n\n    /**\n     * Returns an attribute name that corresponds to the given property.\n     * By default, converts camel to dash case, e.g. `fooBar` to `foo-bar`.\n     * @param {string} property Property to convert\n     * @return {string} Attribute name corresponding to the given property.\n     *\n     * @protected\n     * @nocollapse\n     */\n    static attributeNameForProperty(property) {\n      return camelToDashCase(property);\n    }\n\n    /**\n     * Overrides PropertiesChanged implementation to initialize values for\n     * accessors created for values that already existed on the element\n     * prototype.\n     *\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _initializeProperties() {\n      if (this.__dataProto) {\n        this._initializeProtoProperties(this.__dataProto);\n        this.__dataProto = null;\n      }\n      super._initializeProperties();\n    }\n\n    /**\n     * Called at instance time with bag of properties that were overwritten\n     * by accessors on the prototype when accessors were created.\n     *\n     * The default implementation sets these properties back into the\n     * setter at instance time.  This method is provided as an override\n     * point for customizing or providing more efficient initialization.\n     *\n     * @param {Object} props Bag of property values that were overwritten\n     *   when creating property accessors.\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _initializeProtoProperties(props) {\n      for (let p in props) {\n        this._setProperty(p, props[p]);\n      }\n    }\n\n    /**\n     * Ensures the element has the given attribute. If it does not,\n     * assigns the given value to the attribute.\n     *\n     * @suppress {invalidCasts} Closure can't figure out `this` is infact an\n     *     element\n     *\n     * @param {string} attribute Name of attribute to ensure is set.\n     * @param {string} value of the attribute.\n     * @return {void}\n     * @override\n     */\n    _ensureAttribute(attribute, value) {\n      const el = /** @type {!HTMLElement} */(this);\n      if (!el.hasAttribute(attribute)) {\n        this._valueToNodeAttribute(el, value, attribute);\n      }\n    }\n\n    /**\n     * Overrides PropertiesChanged implemention to serialize objects as JSON.\n     *\n     * @param {*} value Property value to serialize.\n     * @return {string | undefined} String serialized from the provided property\n     *     value.\n     * @override\n     */\n    _serializeValue(value) {\n      /* eslint-disable no-fallthrough */\n      switch (typeof value) {\n        case 'object':\n          if (value instanceof Date) {\n            return value.toString();\n          } else if (value) {\n            try {\n              return JSON.stringify(value);\n            } catch(x) {\n              return '';\n            }\n          }\n\n        default:\n          return super._serializeValue(value);\n      }\n    }\n\n    /**\n     * Converts a string to a typed JavaScript value.\n     *\n     * This method is called by Polymer when reading HTML attribute values to\n     * JS properties.  Users may override this method on Polymer element\n     * prototypes to provide deserialization for custom `type`s.  Note,\n     * the `type` argument is the value of the `type` field provided in the\n     * `properties` configuration object for a given property, and is\n     * by convention the constructor for the type to deserialize.\n     *\n     *\n     * @param {?string} value Attribute value to deserialize.\n     * @param {*=} type Type to deserialize the string to.\n     * @return {*} Typed value deserialized from the provided string.\n     * @override\n     */\n    _deserializeValue(value, type) {\n      /**\n       * @type {*}\n       */\n      let outValue;\n      switch (type) {\n        case Object:\n          try {\n            outValue = JSON.parse(/** @type {string} */(value));\n          } catch(x) {\n            // allow non-JSON literals like Strings and Numbers\n            outValue = value;\n          }\n          break;\n        case Array:\n          try {\n            outValue = JSON.parse(/** @type {string} */(value));\n          } catch(x) {\n            outValue = null;\n            console.warn(`Polymer::Attributes: couldn't decode Array as JSON: ${value}`);\n          }\n          break;\n        case Date:\n          outValue = isNaN(value) ? String(value) : Number(value);\n          outValue = new Date(outValue);\n          break;\n        default:\n          outValue = super._deserializeValue(value, type);\n          break;\n      }\n      return outValue;\n    }\n    /* eslint-enable no-fallthrough */\n\n    /**\n     * Overrides PropertiesChanged implementation to save existing prototype\n     * property value so that it can be reset.\n     * @param {string} property Name of the property\n     * @param {boolean=} readOnly When true, no setter is created\n     *\n     * When calling on a prototype, any overwritten values are saved in\n     * `__dataProto`, and it is up to the subclasser to decide how/when\n     * to set those properties back into the accessor.  When calling on an\n     * instance, the overwritten value is set via `_setPendingProperty`,\n     * and the user should call `_invalidateProperties` or `_flushProperties`\n     * for the values to take effect.\n     * @protected\n     * @return {void}\n     * @override\n     */\n    _definePropertyAccessor(property, readOnly) {\n      saveAccessorValue(this, property);\n      super._definePropertyAccessor(property, readOnly);\n    }\n\n    /**\n     * Returns true if this library created an accessor for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if an accessor was created\n     * @override\n     */\n    _hasAccessor(property) {\n      return this.__dataHasAccessor && this.__dataHasAccessor[property];\n    }\n\n    /**\n     * Returns true if the specified property has a pending change.\n     *\n     * @param {string} prop Property name\n     * @return {boolean} True if property has a pending change\n     * @protected\n     * @override\n     */\n    _isPropertyPending(prop) {\n      return Boolean(this.__dataPending && (prop in this.__dataPending));\n    }\n\n  }\n\n  return PropertyAccessors;\n\n});\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\n\n// 1.x backwards-compatible auto-wrapper for template type extensions\n// This is a clear layering violation and gives favored-nation status to\n// dom-if and dom-repeat templates.  This is a conceit we're choosing to keep\n// a.) to ease 1.x backwards-compatibility due to loss of `is`, and\n// b.) to maintain if/repeat capability in parser-constrained elements\n//     (e.g. table, select) in lieu of native CE type extensions without\n//     massive new invention in this space (e.g. directive system)\nconst templateExtensions = {\n  'dom-if': true,\n  'dom-repeat': true\n};\n\nlet placeholderBugDetect = false;\nlet placeholderBug = false;\n\nfunction hasPlaceholderBug() {\n  if (!placeholderBugDetect) {\n    placeholderBugDetect = true;\n    const t = document.createElement('textarea');\n    t.placeholder = 'a';\n    placeholderBug = t.placeholder === t.textContent;\n  }\n  return placeholderBug;\n}\n\n/**\n * Some browsers have a bug with textarea, where placeholder text is copied as\n * a textnode child of the textarea.\n *\n * If the placeholder is a binding, this can break template stamping in two\n * ways.\n *\n * One issue is that when the `placeholder` attribute is removed when the\n * binding is processed, the textnode child of the textarea is deleted, and the\n * template info tries to bind into that node.\n *\n * With `legacyOptimizations` in use, when the template is stamped and the\n * `textarea.textContent` binding is processed, no corresponding node is found\n * because it was removed during parsing. An exception is generated when this\n * binding is updated.\n *\n * With `legacyOptimizations` not in use, the template is cloned before\n * processing and this changes the above behavior. The cloned template also has\n * a value property set to the placeholder and textContent. This prevents the\n * removal of the textContent when the placeholder attribute is removed.\n * Therefore the exception does not occur. However, there is an extra\n * unnecessary binding.\n *\n * @param {!Node} node Check node for placeholder bug\n * @return {void}\n */\nfunction fixPlaceholder(node) {\n  if (hasPlaceholderBug() && node.localName === 'textarea' && node.placeholder\n        && node.placeholder === node.textContent) {\n    node.textContent = null;\n  }\n}\n\nfunction wrapTemplateExtension(node) {\n  let is = node.getAttribute('is');\n  if (is && templateExtensions[is]) {\n    let t = node;\n    t.removeAttribute('is');\n    node = t.ownerDocument.createElement(is);\n    t.parentNode.replaceChild(node, t);\n    node.appendChild(t);\n    while(t.attributes.length) {\n      node.setAttribute(t.attributes[0].name, t.attributes[0].value);\n      t.removeAttribute(t.attributes[0].name);\n    }\n  }\n  return node;\n}\n\nfunction findTemplateNode(root, nodeInfo) {\n  // recursively ascend tree until we hit root\n  let parent = nodeInfo.parentInfo && findTemplateNode(root, nodeInfo.parentInfo);\n  // unwind the stack, returning the indexed node at each level\n  if (parent) {\n    // note: marginally faster than indexing via childNodes\n    // (http://jsperf.com/childnodes-lookup)\n    for (let n=parent.firstChild, i=0; n; n=n.nextSibling) {\n      if (nodeInfo.parentIndex === i++) {\n        return n;\n      }\n    }\n  } else {\n    return root;\n  }\n}\n\n// construct `$` map (from id annotations)\nfunction applyIdToMap(inst, map, node, nodeInfo) {\n  if (nodeInfo.id) {\n    map[nodeInfo.id] = node;\n  }\n}\n\n// install event listeners (from event annotations)\nfunction applyEventListener(inst, node, nodeInfo) {\n  if (nodeInfo.events && nodeInfo.events.length) {\n    for (let j=0, e$=nodeInfo.events, e; (j<e$.length) && (e=e$[j]); j++) {\n      inst._addMethodEventListenerToNode(node, e.name, e.value, inst);\n    }\n  }\n}\n\n// push configuration references at configure time\nfunction applyTemplateContent(inst, node, nodeInfo) {\n  if (nodeInfo.templateInfo) {\n    node._templateInfo = nodeInfo.templateInfo;\n  }\n}\n\nfunction createNodeEventHandler(context, eventName, methodName) {\n  // Instances can optionally have a _methodHost which allows redirecting where\n  // to find methods. Currently used by `templatize`.\n  context = context._methodHost || context;\n  let handler = function(e) {\n    if (context[methodName]) {\n      context[methodName](e, e.detail);\n    } else {\n      console.warn('listener method `' + methodName + '` not defined');\n    }\n  };\n  return handler;\n}\n\n/**\n * Element mixin that provides basic template parsing and stamping, including\n * the following template-related features for stamped templates:\n *\n * - Declarative event listeners (`on-eventname=\"listener\"`)\n * - Map of node id's to stamped node instances (`this.$.id`)\n * - Nested template content caching/removal and re-installation (performance\n *   optimization)\n *\n * @mixinFunction\n * @polymer\n * @summary Element class mixin that provides basic template parsing and stamping\n * @template T\n * @param {function(new:T)} superClass Class to apply mixin to.\n * @return {function(new:T)} superClass with mixin applied.\n */\nexport const TemplateStamp = dedupingMixin(\n    /**\n     * @template T\n     * @param {function(new:T)} superClass Class to apply mixin to.\n     * @return {function(new:T)} superClass with mixin applied.\n     */\n    (superClass) => {\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_TemplateStamp}\n   */\n  class TemplateStamp extends superClass {\n\n    /**\n     * Scans a template to produce template metadata.\n     *\n     * Template-specific metadata are stored in the object returned, and node-\n     * specific metadata are stored in objects in its flattened `nodeInfoList`\n     * array.  Only nodes in the template that were parsed as nodes of\n     * interest contain an object in `nodeInfoList`.  Each `nodeInfo` object\n     * contains an `index` (`childNodes` index in parent) and optionally\n     * `parent`, which points to node info of its parent (including its index).\n     *\n     * The template metadata object returned from this method has the following\n     * structure (many fields optional):\n     *\n     * ```js\n     *   {\n     *     // Flattened list of node metadata (for nodes that generated metadata)\n     *     nodeInfoList: [\n     *       {\n     *         // `id` attribute for any nodes with id's for generating `$` map\n     *         id: {string},\n     *         // `on-event=\"handler\"` metadata\n     *         events: [\n     *           {\n     *             name: {string},   // event name\n     *             value: {string},  // handler method name\n     *           }, ...\n     *         ],\n     *         // Notes when the template contained a `<slot>` for shady DOM\n     *         // optimization purposes\n     *         hasInsertionPoint: {boolean},\n     *         // For nested `<template>`` nodes, nested template metadata\n     *         templateInfo: {object}, // nested template metadata\n     *         // Metadata to allow efficient retrieval of instanced node\n     *         // corresponding to this metadata\n     *         parentInfo: {number},   // reference to parent nodeInfo>\n     *         parentIndex: {number},  // index in parent's `childNodes` collection\n     *         infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n     *       },\n     *       ...\n     *     ],\n     *     // When true, the template had the `strip-whitespace` attribute\n     *     // or was nested in a template with that setting\n     *     stripWhitespace: {boolean},\n     *     // For nested templates, nested template content is moved into\n     *     // a document fragment stored here; this is an optimization to\n     *     // avoid the cost of nested template cloning\n     *     content: {DocumentFragment}\n     *   }\n     * ```\n     *\n     * This method kicks off a recursive treewalk as follows:\n     *\n     * ```\n     *    _parseTemplate <---------------------+\n     *      _parseTemplateContent              |\n     *        _parseTemplateNode  <------------|--+\n     *          _parseTemplateNestedTemplate --+  |\n     *          _parseTemplateChildNodes ---------+\n     *          _parseTemplateNodeAttributes\n     *            _parseTemplateNodeAttribute\n     *\n     * ```\n     *\n     * These methods may be overridden to add custom metadata about templates\n     * to either `templateInfo` or `nodeInfo`.\n     *\n     * Note that this method may be destructive to the template, in that\n     * e.g. event annotations may be removed after being noted in the\n     * template metadata.\n     *\n     * @param {!HTMLTemplateElement} template Template to parse\n     * @param {TemplateInfo=} outerTemplateInfo Template metadata from the outer\n     *   template, for parsing nested templates\n     * @return {!TemplateInfo} Parsed template metadata\n     * @nocollapse\n     */\n    static _parseTemplate(template, outerTemplateInfo) {\n      // since a template may be re-used, memo-ize metadata\n      if (!template._templateInfo) {\n        // TODO(rictic): fix typing\n        let /** ? */ templateInfo = template._templateInfo = {};\n        templateInfo.nodeInfoList = [];\n        templateInfo.stripWhiteSpace =\n          (outerTemplateInfo && outerTemplateInfo.stripWhiteSpace) ||\n          template.hasAttribute('strip-whitespace');\n         // TODO(rictic): fix typing\n         this._parseTemplateContent(\n             template, templateInfo, /** @type {?} */ ({parent: null}));\n      }\n      return template._templateInfo;\n    }\n\n    /**\n     * See docs for _parseTemplateNode.\n     *\n     * @param {!HTMLTemplateElement} template .\n     * @param {!TemplateInfo} templateInfo .\n     * @param {!NodeInfo} nodeInfo .\n     * @return {boolean} .\n     * @nocollapse\n     */\n    static _parseTemplateContent(template, templateInfo, nodeInfo) {\n      return this._parseTemplateNode(template.content, templateInfo, nodeInfo);\n    }\n\n    /**\n     * Parses template node and adds template and node metadata based on\n     * the current node, and its `childNodes` and `attributes`.\n     *\n     * This method may be overridden to add custom node or template specific\n     * metadata based on this node.\n     *\n     * @param {Node} node Node to parse\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @nocollapse\n     */\n    static _parseTemplateNode(node, templateInfo, nodeInfo) {\n      let noted = false;\n      let element = /** @type {!HTMLTemplateElement} */ (node);\n      if (element.localName == 'template' && !element.hasAttribute('preserve-content')) {\n        noted = this._parseTemplateNestedTemplate(element, templateInfo, nodeInfo) || noted;\n      } else if (element.localName === 'slot') {\n        // For ShadyDom optimization, indicating there is an insertion point\n        templateInfo.hasInsertionPoint = true;\n      }\n      fixPlaceholder(element);\n      if (element.firstChild) {\n        this._parseTemplateChildNodes(element, templateInfo, nodeInfo);\n      }\n      if (element.hasAttributes && element.hasAttributes()) {\n        noted = this._parseTemplateNodeAttributes(element, templateInfo, nodeInfo) || noted;\n      }\n      return noted;\n    }\n\n    /**\n     * Parses template child nodes for the given root node.\n     *\n     * This method also wraps whitelisted legacy template extensions\n     * (`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\n     * wrappers, collapses text nodes, and strips whitespace from the template\n     * if the `templateInfo.stripWhitespace` setting was provided.\n     *\n     * @param {Node} root Root node whose `childNodes` will be parsed\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {void}\n     */\n    static _parseTemplateChildNodes(root, templateInfo, nodeInfo) {\n      if (root.localName === 'script' || root.localName === 'style') {\n        return;\n      }\n      for (let node=root.firstChild, parentIndex=0, next; node; node=next) {\n        // Wrap templates\n        if (node.localName == 'template') {\n          node = wrapTemplateExtension(node);\n        }\n        // collapse adjacent textNodes: fixes an IE issue that can cause\n        // text nodes to be inexplicably split =(\n        // note that root.normalize() should work but does not so we do this\n        // manually.\n        next = node.nextSibling;\n        if (node.nodeType === Node.TEXT_NODE) {\n          let /** Node */ n = next;\n          while (n && (n.nodeType === Node.TEXT_NODE)) {\n            node.textContent += n.textContent;\n            next = n.nextSibling;\n            root.removeChild(n);\n            n = next;\n          }\n          // optionally strip whitespace\n          if (templateInfo.stripWhiteSpace && !node.textContent.trim()) {\n            root.removeChild(node);\n            continue;\n          }\n        }\n        let childInfo =\n            /** @type {!NodeInfo} */ ({parentIndex, parentInfo: nodeInfo});\n        if (this._parseTemplateNode(node, templateInfo, childInfo)) {\n          childInfo.infoIndex = templateInfo.nodeInfoList.push(childInfo) - 1;\n        }\n        // Increment if not removed\n        if (node.parentNode) {\n          parentIndex++;\n        }\n      }\n    }\n\n    /**\n     * Parses template content for the given nested `<template>`.\n     *\n     * Nested template info is stored as `templateInfo` in the current node's\n     * `nodeInfo`. `template.content` is removed and stored in `templateInfo`.\n     * It will then be the responsibility of the host to set it back to the\n     * template and for users stamping nested templates to use the\n     * `_contentForTemplate` method to retrieve the content for this template\n     * (an optimization to avoid the cost of cloning nested template content).\n     *\n     * @param {HTMLTemplateElement} node Node to parse (a <template>)\n     * @param {TemplateInfo} outerTemplateInfo Template metadata for current template\n     *   that includes the template `node`\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @nocollapse\n     */\n    static _parseTemplateNestedTemplate(node, outerTemplateInfo, nodeInfo) {\n      // TODO(rictic): the type of node should be non-null\n      let element = /** @type {!HTMLTemplateElement} */ (node);\n      let templateInfo = this._parseTemplate(element, outerTemplateInfo);\n      let content = templateInfo.content =\n          element.content.ownerDocument.createDocumentFragment();\n      content.appendChild(element.content);\n      nodeInfo.templateInfo = templateInfo;\n      return true;\n    }\n\n    /**\n     * Parses template node attributes and adds node metadata to `nodeInfo`\n     * for nodes of interest.\n     *\n     * @param {Element} node Node to parse\n     * @param {!TemplateInfo} templateInfo Template metadata for current\n     *     template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @nocollapse\n     */\n    static _parseTemplateNodeAttributes(node, templateInfo, nodeInfo) {\n      // Make copy of original attribute list, since the order may change\n      // as attributes are added and removed\n      let noted = false;\n      let attrs = Array.from(node.attributes);\n      for (let i=attrs.length-1, a; (a=attrs[i]); i--) {\n        noted = this._parseTemplateNodeAttribute(node, templateInfo, nodeInfo, a.name, a.value) || noted;\n      }\n      return noted;\n    }\n\n    /**\n     * Parses a single template node attribute and adds node metadata to\n     * `nodeInfo` for attributes of interest.\n     *\n     * This implementation adds metadata for `on-event=\"handler\"` attributes\n     * and `id` attributes.\n     *\n     * @param {Element} node Node to parse\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @param {string} name Attribute name\n     * @param {string} value Attribute value\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @nocollapse\n     */\n    static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {\n      // events (on-*)\n      if (name.slice(0, 3) === 'on-') {\n        node.removeAttribute(name);\n        nodeInfo.events = nodeInfo.events || [];\n        nodeInfo.events.push({\n          name: name.slice(3),\n          value\n        });\n        return true;\n      }\n      // static id\n      else if (name === 'id') {\n        nodeInfo.id = value;\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Returns the `content` document fragment for a given template.\n     *\n     * For nested templates, Polymer performs an optimization to cache nested\n     * template content to avoid the cost of cloning deeply nested templates.\n     * This method retrieves the cached content for a given template.\n     *\n     * @param {HTMLTemplateElement} template Template to retrieve `content` for\n     * @return {DocumentFragment} Content fragment\n     * @nocollapse\n     */\n    static _contentForTemplate(template) {\n      let templateInfo = /** @type {HTMLTemplateElementWithInfo} */ (template)._templateInfo;\n      return (templateInfo && templateInfo.content) || template.content;\n    }\n\n    /**\n     * Clones the provided template content and returns a document fragment\n     * containing the cloned dom.\n     *\n     * The template is parsed (once and memoized) using this library's\n     * template parsing features, and provides the following value-added\n     * features:\n     * * Adds declarative event listeners for `on-event=\"handler\"` attributes\n     * * Generates an \"id map\" for all nodes with id's under `$` on returned\n     *   document fragment\n     * * Passes template info including `content` back to templates as\n     *   `_templateInfo` (a performance optimization to avoid deep template\n     *   cloning)\n     *\n     * Note that the memoized template parsing process is destructive to the\n     * template: attributes for bindings and declarative event listeners are\n     * removed after being noted in notes, and any nested `<template>.content`\n     * is removed and stored in notes as well.\n     *\n     * @param {!HTMLTemplateElement} template Template to stamp\n     * @return {!StampedTemplate} Cloned template content\n     * @override\n     */\n    _stampTemplate(template) {\n      // Polyfill support: bootstrap the template if it has not already been\n      if (template && !template.content &&\n          window.HTMLTemplateElement && HTMLTemplateElement.decorate) {\n        HTMLTemplateElement.decorate(template);\n      }\n      let templateInfo = this.constructor._parseTemplate(template);\n      let nodeInfo = templateInfo.nodeInfoList;\n      let content = templateInfo.content || template.content;\n      let dom = /** @type {DocumentFragment} */ (document.importNode(content, true));\n      // NOTE: ShadyDom optimization indicating there is an insertion point\n      dom.__noInsertionPoint = !templateInfo.hasInsertionPoint;\n      let nodes = dom.nodeList = new Array(nodeInfo.length);\n      dom.$ = {};\n      for (let i=0, l=nodeInfo.length, info; (i<l) && (info=nodeInfo[i]); i++) {\n        let node = nodes[i] = findTemplateNode(dom, info);\n        applyIdToMap(this, dom.$, node, info);\n        applyTemplateContent(this, node, info);\n        applyEventListener(this, node, info);\n      }\n      dom = /** @type {!StampedTemplate} */(dom); // eslint-disable-line no-self-assign\n      return dom;\n    }\n\n    /**\n     * Adds an event listener by method name for the event provided.\n     *\n     * This method generates a handler function that looks up the method\n     * name at handling time.\n     *\n     * @param {!EventTarget} node Node to add listener on\n     * @param {string} eventName Name of event\n     * @param {string} methodName Name of method\n     * @param {*=} context Context the method will be called on (defaults\n     *   to `node`)\n     * @return {Function} Generated handler function\n     * @override\n     */\n    _addMethodEventListenerToNode(node, eventName, methodName, context) {\n      context = context || node;\n      let handler = createNodeEventHandler(context, eventName, methodName);\n      this._addEventListenerToNode(node, eventName, handler);\n      return handler;\n    }\n\n    /**\n     * Override point for adding custom or simulated event handling.\n     *\n     * @param {!EventTarget} node Node to add event listener to\n     * @param {string} eventName Name of event\n     * @param {function(!Event):void} handler Listener function to add\n     * @return {void}\n     * @override\n     */\n    _addEventListenerToNode(node, eventName, handler) {\n      node.addEventListener(eventName, handler);\n    }\n\n    /**\n     * Override point for adding custom or simulated event handling.\n     *\n     * @param {!EventTarget} node Node to remove event listener from\n     * @param {string} eventName Name of event\n     * @param {function(!Event):void} handler Listener function to remove\n     * @return {void}\n     * @override\n     */\n    _removeEventListenerFromNode(node, eventName, handler) {\n      node.removeEventListener(eventName, handler);\n    }\n\n  }\n\n  return TemplateStamp;\n\n});\n","/**\n * @fileoverview\n * @suppress {checkPrototypalTypes}\n * @license Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt The complete set of authors may be found\n * at http://polymer.github.io/AUTHORS.txt The complete set of contributors may\n * be found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by\n * Google as part of the polymer project is also subject to an additional IP\n * rights grant found at http://polymer.github.io/PATENTS.txt\n */\n\nimport '../utils/boot.js';\nimport { wrap } from '../utils/wrap.js';\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { root, isAncestor, isDescendant, get, translate, isPath, set, normalize } from '../utils/path.js';\n/* for notify, reflect */\nimport { camelToDashCase, dashToCamelCase } from '../utils/case-map.js';\nimport { PropertyAccessors } from './property-accessors.js';\n/* for annotated effects */\nimport { TemplateStamp } from './template-stamp.js';\nimport { sanitizeDOMValue } from '../utils/settings.js';\n\n// Monotonically increasing unique ID used for de-duping effects triggered\n// from multiple properties in the same turn\nlet dedupeId = 0;\n\n/**\n * Property effect types; effects are stored on the prototype using these keys\n * @enum {string}\n */\nconst TYPES = {\n  COMPUTE: '__computeEffects',\n  REFLECT: '__reflectEffects',\n  NOTIFY: '__notifyEffects',\n  PROPAGATE: '__propagateEffects',\n  OBSERVE: '__observeEffects',\n  READ_ONLY: '__readOnly'\n};\n\n/** @const {!RegExp} */\nconst capitalAttributeRegex = /[A-Z]/;\n\n/**\n * @typedef {{\n * name: (string | undefined),\n * structured: (boolean | undefined),\n * wildcard: (boolean | undefined)\n * }}\n */\nlet DataTrigger; //eslint-disable-line no-unused-vars\n\n/**\n * @typedef {{\n * info: ?,\n * trigger: (!DataTrigger | undefined),\n * fn: (!Function | undefined)\n * }}\n */\nlet DataEffect; //eslint-disable-line no-unused-vars\n\n/**\n * Ensures that the model has an own-property map of effects for the given type.\n * The model may be a prototype or an instance.\n *\n * Property effects are stored as arrays of effects by property in a map,\n * by named type on the model. e.g.\n *\n *   __computeEffects: {\n *     foo: [ ... ],\n *     bar: [ ... ]\n *   }\n *\n * If the model does not yet have an effect map for the type, one is created\n * and returned.  If it does, but it is not an own property (i.e. the\n * prototype had effects), the the map is deeply cloned and the copy is\n * set on the model and returned, ready for new effects to be added.\n *\n * @param {Object} model Prototype or instance\n * @param {string} type Property effect type\n * @return {Object} The own-property map of effects for the given type\n * @private\n */\nfunction ensureOwnEffectMap(model, type) {\n  let effects = model[type];\n  if (!effects) {\n    effects = model[type] = {};\n  } else if (!model.hasOwnProperty(type)) {\n    effects = model[type] = Object.create(model[type]);\n    for (let p in effects) {\n      let protoFx = effects[p];\n      let instFx = effects[p] = Array(protoFx.length);\n      for (let i=0; i<protoFx.length; i++) {\n        instFx[i] = protoFx[i];\n      }\n    }\n  }\n  return effects;\n}\n\n// -- effects ----------------------------------------------\n\n/**\n * Runs all effects of a given type for the given set of property changes\n * on an instance.\n *\n * @param {!Polymer_PropertyEffects} inst The instance with effects to run\n * @param {?Object} effects Object map of property-to-Array of effects\n * @param {?Object} props Bag of current property changes\n * @param {?Object=} oldProps Bag of previous values for changed properties\n * @param {boolean=} hasPaths True with `props` contains one or more paths\n * @param {*=} extraArgs Additional metadata to pass to effect function\n * @return {boolean} True if an effect ran for this property\n * @private\n */\nfunction runEffects(inst, effects, props, oldProps, hasPaths, extraArgs) {\n  if (effects) {\n    let ran = false;\n    let id = dedupeId++;\n    for (let prop in props) {\n      if (runEffectsForProperty(\n              inst, /** @type {!Object} */ (effects), id, prop, props, oldProps,\n              hasPaths, extraArgs)) {\n        ran = true;\n      }\n    }\n    return ran;\n  }\n  return false;\n}\n\n/**\n * Runs a list of effects for a given property.\n *\n * @param {!Polymer_PropertyEffects} inst The instance with effects to run\n * @param {!Object} effects Object map of property-to-Array of effects\n * @param {number} dedupeId Counter used for de-duping effects\n * @param {string} prop Name of changed property\n * @param {*} props Changed properties\n * @param {*} oldProps Old properties\n * @param {boolean=} hasPaths True with `props` contains one or more paths\n * @param {*=} extraArgs Additional metadata to pass to effect function\n * @return {boolean} True if an effect ran for this property\n * @private\n */\nfunction runEffectsForProperty(inst, effects, dedupeId, prop, props, oldProps, hasPaths, extraArgs) {\n  let ran = false;\n  let rootProperty = hasPaths ? root(prop) : prop;\n  let fxs = effects[rootProperty];\n  if (fxs) {\n    for (let i=0, l=fxs.length, fx; (i<l) && (fx=fxs[i]); i++) {\n      if ((!fx.info || fx.info.lastRun !== dedupeId) &&\n          (!hasPaths || pathMatchesTrigger(prop, fx.trigger))) {\n        if (fx.info) {\n          fx.info.lastRun = dedupeId;\n        }\n        fx.fn(inst, prop, props, oldProps, fx.info, hasPaths, extraArgs);\n        ran = true;\n      }\n    }\n  }\n  return ran;\n}\n\n/**\n * Determines whether a property/path that has changed matches the trigger\n * criteria for an effect.  A trigger is a descriptor with the following\n * structure, which matches the descriptors returned from `parseArg`.\n * e.g. for `foo.bar.*`:\n * ```\n * trigger: {\n *   name: 'a.b',\n *   structured: true,\n *   wildcard: true\n * }\n * ```\n * If no trigger is given, the path is deemed to match.\n *\n * @param {string} path Path or property that changed\n * @param {?DataTrigger} trigger Descriptor\n * @return {boolean} Whether the path matched the trigger\n */\nfunction pathMatchesTrigger(path, trigger) {\n  if (trigger) {\n    let triggerPath = /** @type {string} */ (trigger.name);\n    return (triggerPath == path) ||\n        !!(trigger.structured && isAncestor(triggerPath, path)) ||\n        !!(trigger.wildcard && isDescendant(triggerPath, path));\n  } else {\n    return true;\n  }\n}\n\n/**\n * Implements the \"observer\" effect.\n *\n * Calls the method with `info.methodName` on the instance, passing the\n * new and old values.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {void}\n * @private\n */\nfunction runObserverEffect(inst, property, props, oldProps, info) {\n  let fn = typeof info.method === \"string\" ? inst[info.method] : info.method;\n  let changedProp = info.property;\n  if (fn) {\n    fn.call(inst, inst.__data[changedProp], oldProps[changedProp]);\n  } else if (!info.dynamicFn) {\n    console.warn('observer method `' + info.method + '` not defined');\n  }\n}\n\n/**\n * Runs \"notify\" effects for a set of changed properties.\n *\n * This method differs from the generic `runEffects` method in that it\n * will dispatch path notification events in the case that the property\n * changed was a path and the root property for that path didn't have a\n * \"notify\" effect.  This is to maintain 1.0 behavior that did not require\n * `notify: true` to ensure object sub-property notifications were\n * sent.\n *\n * @param {!Polymer_PropertyEffects} inst The instance with effects to run\n * @param {Object} notifyProps Bag of properties to notify\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @return {void}\n * @private\n */\nfunction runNotifyEffects(inst, notifyProps, props, oldProps, hasPaths) {\n  // Notify\n  let fxs = inst[TYPES.NOTIFY];\n  let notified;\n  let id = dedupeId++;\n  // Try normal notify effects; if none, fall back to try path notification\n  for (let prop in notifyProps) {\n    if (notifyProps[prop]) {\n      if (fxs && runEffectsForProperty(inst, fxs, id, prop, props, oldProps, hasPaths)) {\n        notified = true;\n      } else if (hasPaths && notifyPath(inst, prop, props)) {\n        notified = true;\n      }\n    }\n  }\n  // Flush host if we actually notified and host was batching\n  // And the host has already initialized clients; this prevents\n  // an issue with a host observing data changes before clients are ready.\n  let host;\n  if (notified && (host = inst.__dataHost) && host._invalidateProperties) {\n    host._invalidateProperties();\n  }\n}\n\n/**\n * Dispatches {property}-changed events with path information in the detail\n * object to indicate a sub-path of the property was changed.\n *\n * @param {!Polymer_PropertyEffects} inst The element from which to fire the\n *     event\n * @param {string} path The path that was changed\n * @param {Object} props Bag of current property changes\n * @return {boolean} Returns true if the path was notified\n * @private\n */\nfunction notifyPath(inst, path, props) {\n  let rootProperty = root(path);\n  if (rootProperty !== path) {\n    let eventName = camelToDashCase(rootProperty) + '-changed';\n    dispatchNotifyEvent(inst, eventName, props[path], path);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Dispatches {property}-changed events to indicate a property (or path)\n * changed.\n *\n * @param {!Polymer_PropertyEffects} inst The element from which to fire the\n *     event\n * @param {string} eventName The name of the event to send\n *     ('{property}-changed')\n * @param {*} value The value of the changed property\n * @param {string | null | undefined} path If a sub-path of this property\n *     changed, the path that changed (optional).\n * @return {void}\n * @private\n * @suppress {invalidCasts}\n */\nfunction dispatchNotifyEvent(inst, eventName, value, path) {\n  let detail = {\n    value: value,\n    queueProperty: true\n  };\n  if (path) {\n    detail.path = path;\n  }\n  wrap(/** @type {!HTMLElement} */(inst)).dispatchEvent(new CustomEvent(eventName, { detail }));\n}\n\n/**\n * Implements the \"notify\" effect.\n *\n * Dispatches a non-bubbling event named `info.eventName` on the instance\n * with a detail object containing the new `value`.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @return {void}\n * @private\n */\nfunction runNotifyEffect(inst, property, props, oldProps, info, hasPaths) {\n  let rootProperty = hasPaths ? root(property) : property;\n  let path = rootProperty != property ? property : null;\n  let value = path ? get(inst, path) : inst.__data[property];\n  if (path && value === undefined) {\n    value = props[property];  // specifically for .splices\n  }\n  dispatchNotifyEvent(inst, info.eventName, value, path);\n}\n\n/**\n * Handler function for 2-way notification events. Receives context\n * information captured in the `addNotifyListener` closure from the\n * `__notifyListeners` metadata.\n *\n * Sets the value of the notified property to the host property or path.  If\n * the event contained path information, translate that path to the host\n * scope's name for that path first.\n *\n * @param {CustomEvent} event Notification event (e.g. '<property>-changed')\n * @param {!Polymer_PropertyEffects} inst Host element instance handling the\n *     notification event\n * @param {string} fromProp Child element property that was bound\n * @param {string} toPath Host property/path that was bound\n * @param {boolean} negate Whether the binding was negated\n * @return {void}\n * @private\n */\nfunction handleNotification(event, inst, fromProp, toPath, negate) {\n  let value;\n  let detail = /** @type {Object} */(event.detail);\n  let fromPath = detail && detail.path;\n  if (fromPath) {\n    toPath = translate(fromProp, toPath, fromPath);\n    value = detail && detail.value;\n  } else {\n    value = event.currentTarget[fromProp];\n  }\n  value = negate ? !value : value;\n  if (!inst[TYPES.READ_ONLY] || !inst[TYPES.READ_ONLY][toPath]) {\n    if (inst._setPendingPropertyOrPath(toPath, value, true, Boolean(fromPath))\n      && (!detail || !detail.queueProperty)) {\n      inst._invalidateProperties();\n    }\n  }\n}\n\n/**\n * Implements the \"reflect\" effect.\n *\n * Sets the attribute named `info.attrName` to the given property value.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {void}\n * @private\n */\nfunction runReflectEffect(inst, property, props, oldProps, info) {\n  let value = inst.__data[property];\n  if (sanitizeDOMValue) {\n    value = sanitizeDOMValue(value, info.attrName, 'attribute', /** @type {Node} */(inst));\n  }\n  inst._propertyToAttribute(property, info.attrName, value);\n}\n\n/**\n * Runs \"computed\" effects for a set of changed properties.\n *\n * This method differs from the generic `runEffects` method in that it\n * continues to run computed effects based on the output of each pass until\n * there are no more newly computed properties.  This ensures that all\n * properties that will be computed by the initial set of changes are\n * computed before other effects (binding propagation, observers, and notify)\n * run.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {?Object} changedProps Bag of changed properties\n * @param {?Object} oldProps Bag of previous values for changed properties\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @return {void}\n * @private\n */\nfunction runComputedEffects(inst, changedProps, oldProps, hasPaths) {\n  let computeEffects = inst[TYPES.COMPUTE];\n  if (computeEffects) {\n    let inputProps = changedProps;\n    while (runEffects(inst, computeEffects, inputProps, oldProps, hasPaths)) {\n      Object.assign(/** @type {!Object} */ (oldProps), inst.__dataOld);\n      Object.assign(/** @type {!Object} */ (changedProps), inst.__dataPending);\n      inputProps = inst.__dataPending;\n      inst.__dataPending = null;\n    }\n  }\n}\n\n/**\n * Implements the \"computed property\" effect by running the method with the\n * values of the arguments specified in the `info` object and setting the\n * return value to the computed property specified.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {?Object} props Bag of current property changes\n * @param {?Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {void}\n * @private\n */\nfunction runComputedEffect(inst, property, props, oldProps, info) {\n  let result = runMethodEffect(inst, property, props, oldProps, info);\n  let computedProp = info.methodInfo;\n  if (inst.__dataHasAccessor && inst.__dataHasAccessor[computedProp]) {\n    inst._setPendingProperty(computedProp, result, true);\n  } else {\n    inst[computedProp] = result;\n  }\n}\n\n/**\n * Computes path changes based on path links set up using the `linkPaths`\n * API.\n *\n * @param {!Polymer_PropertyEffects} inst The instance whose props are changing\n * @param {string} path Path that has changed\n * @param {*} value Value of changed path\n * @return {void}\n * @private\n */\nfunction computeLinkedPaths(inst, path, value) {\n  let links = inst.__dataLinkedPaths;\n  if (links) {\n    let link;\n    for (let a in links) {\n      let b = links[a];\n      if (isDescendant(a, path)) {\n        link = translate(a, b, path);\n        inst._setPendingPropertyOrPath(link, value, true, true);\n      } else if (isDescendant(b, path)) {\n        link = translate(b, a, path);\n        inst._setPendingPropertyOrPath(link, value, true, true);\n      }\n    }\n  }\n}\n\n// -- bindings ----------------------------------------------\n\n/**\n * Adds binding metadata to the current `nodeInfo`, and binding effects\n * for all part dependencies to `templateInfo`.\n *\n * @param {Function} constructor Class that `_parseTemplate` is currently\n *   running on\n * @param {TemplateInfo} templateInfo Template metadata for current template\n * @param {NodeInfo} nodeInfo Node metadata for current template node\n * @param {string} kind Binding kind, either 'property', 'attribute', or 'text'\n * @param {string} target Target property name\n * @param {!Array<!BindingPart>} parts Array of binding part metadata\n * @param {string=} literal Literal text surrounding binding parts (specified\n *   only for 'property' bindings, since these must be initialized as part\n *   of boot-up)\n * @return {void}\n * @private\n */\nfunction addBinding(constructor, templateInfo, nodeInfo, kind, target, parts, literal) {\n  // Create binding metadata and add to nodeInfo\n  nodeInfo.bindings = nodeInfo.bindings || [];\n  let /** Binding */ binding = { kind, target, parts, literal, isCompound: (parts.length !== 1) };\n  nodeInfo.bindings.push(binding);\n  // Add listener info to binding metadata\n  if (shouldAddListener(binding)) {\n    let {event, negate} = binding.parts[0];\n    binding.listenerEvent = event || (camelToDashCase(target) + '-changed');\n    binding.listenerNegate = negate;\n  }\n  // Add \"propagate\" property effects to templateInfo\n  let index = templateInfo.nodeInfoList.length;\n  for (let i=0; i<binding.parts.length; i++) {\n    let part = binding.parts[i];\n    part.compoundIndex = i;\n    addEffectForBindingPart(constructor, templateInfo, binding, part, index);\n  }\n}\n\n/**\n * Adds property effects to the given `templateInfo` for the given binding\n * part.\n *\n * @param {Function} constructor Class that `_parseTemplate` is currently\n *   running on\n * @param {TemplateInfo} templateInfo Template metadata for current template\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @param {number} index Index into `nodeInfoList` for this node\n * @return {void}\n */\nfunction addEffectForBindingPart(constructor, templateInfo, binding, part, index) {\n  if (!part.literal) {\n    if (binding.kind === 'attribute' && binding.target[0] === '-') {\n      console.warn('Cannot set attribute ' + binding.target +\n        ' because \"-\" is not a valid attribute starting character');\n    } else {\n      let dependencies = part.dependencies;\n      let info = { index, binding, part, evaluator: constructor };\n      for (let j=0; j<dependencies.length; j++) {\n        let trigger = dependencies[j];\n        if (typeof trigger == 'string') {\n          trigger = parseArg(trigger);\n          trigger.wildcard = true;\n        }\n        constructor._addTemplatePropertyEffect(templateInfo, trigger.rootProperty, {\n          fn: runBindingEffect,\n          info, trigger\n        });\n      }\n    }\n  }\n}\n\n/**\n * Implements the \"binding\" (property/path binding) effect.\n *\n * Note that binding syntax is overridable via `_parseBindings` and\n * `_evaluateBinding`.  This method will call `_evaluateBinding` for any\n * non-literal parts returned from `_parseBindings`.  However,\n * there is no support for _path_ bindings via custom binding parts,\n * as this is specific to Polymer's path binding syntax.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} path Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @param {Array} nodeList List of nodes associated with `nodeInfoList` template\n *   metadata\n * @return {void}\n * @private\n */\nfunction runBindingEffect(inst, path, props, oldProps, info, hasPaths, nodeList) {\n  let node = nodeList[info.index];\n  let binding = info.binding;\n  let part = info.part;\n  // Subpath notification: transform path and set to client\n  // e.g.: foo=\"{{obj.sub}}\", path: 'obj.sub.prop', set 'foo.prop'=obj.sub.prop\n  if (hasPaths && part.source && (path.length > part.source.length) &&\n      (binding.kind == 'property') && !binding.isCompound &&\n      node.__isPropertyEffectsClient &&\n      node.__dataHasAccessor && node.__dataHasAccessor[binding.target]) {\n    let value = props[path];\n    path = translate(part.source, binding.target, path);\n    if (node._setPendingPropertyOrPath(path, value, false, true)) {\n      inst._enqueueClient(node);\n    }\n  } else {\n    let value = info.evaluator._evaluateBinding(inst, part, path, props, oldProps, hasPaths);\n    // Propagate value to child\n    applyBindingValue(inst, node, binding, part, value);\n  }\n}\n\n/**\n * Sets the value for an \"binding\" (binding) effect to a node,\n * either as a property or attribute.\n *\n * @param {!Polymer_PropertyEffects} inst The instance owning the binding effect\n * @param {Node} node Target node for binding\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @param {*} value Value to set\n * @return {void}\n * @private\n */\nfunction applyBindingValue(inst, node, binding, part, value) {\n  value = computeBindingValue(node, value, binding, part);\n  if (sanitizeDOMValue) {\n    value = sanitizeDOMValue(value, binding.target, binding.kind, node);\n  }\n  if (binding.kind == 'attribute') {\n    // Attribute binding\n    inst._valueToNodeAttribute(/** @type {Element} */(node), value, binding.target);\n  } else {\n    // Property binding\n    let prop = binding.target;\n    if (node.__isPropertyEffectsClient &&\n        node.__dataHasAccessor && node.__dataHasAccessor[prop]) {\n      if (!node[TYPES.READ_ONLY] || !node[TYPES.READ_ONLY][prop]) {\n        if (node._setPendingProperty(prop, value)) {\n          inst._enqueueClient(node);\n        }\n      }\n    } else  {\n      inst._setUnmanagedPropertyToNode(node, prop, value);\n    }\n  }\n}\n\n/**\n * Transforms an \"binding\" effect value based on compound & negation\n * effect metadata, as well as handling for special-case properties\n *\n * @param {Node} node Node the value will be set to\n * @param {*} value Value to set\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @return {*} Transformed value to set\n * @private\n */\nfunction computeBindingValue(node, value, binding, part) {\n  if (binding.isCompound) {\n    let storage = node.__dataCompoundStorage[binding.target];\n    storage[part.compoundIndex] = value;\n    value = storage.join('');\n  }\n  if (binding.kind !== 'attribute') {\n    // Some browsers serialize `undefined` to `\"undefined\"`\n    if (binding.target === 'textContent' ||\n        (binding.target === 'value' &&\n          (node.localName === 'input' || node.localName === 'textarea'))) {\n      value = value == undefined ? '' : value;\n    }\n  }\n  return value;\n}\n\n/**\n * Returns true if a binding's metadata meets all the requirements to allow\n * 2-way binding, and therefore a `<property>-changed` event listener should be\n * added:\n * - used curly braces\n * - is a property (not attribute) binding\n * - is not a textContent binding\n * - is not compound\n *\n * @param {!Binding} binding Binding metadata\n * @return {boolean} True if 2-way listener should be added\n * @private\n */\nfunction shouldAddListener(binding) {\n  return Boolean(binding.target) &&\n         binding.kind != 'attribute' &&\n         binding.kind != 'text' &&\n         !binding.isCompound &&\n         binding.parts[0].mode === '{';\n}\n\n/**\n * Setup compound binding storage structures, notify listeners, and dataHost\n * references onto the bound nodeList.\n *\n * @param {!Polymer_PropertyEffects} inst Instance that bas been previously\n *     bound\n * @param {TemplateInfo} templateInfo Template metadata\n * @return {void}\n * @private\n */\nfunction setupBindings(inst, templateInfo) {\n  // Setup compound storage, dataHost, and notify listeners\n  let {nodeList, nodeInfoList} = templateInfo;\n  if (nodeInfoList.length) {\n    for (let i=0; i < nodeInfoList.length; i++) {\n      let info = nodeInfoList[i];\n      let node = nodeList[i];\n      let bindings = info.bindings;\n      if (bindings) {\n        for (let i=0; i<bindings.length; i++) {\n          let binding = bindings[i];\n          setupCompoundStorage(node, binding);\n          addNotifyListener(node, inst, binding);\n        }\n      }\n      node.__dataHost = inst;\n    }\n  }\n}\n\n/**\n * Initializes `__dataCompoundStorage` local storage on a bound node with\n * initial literal data for compound bindings, and sets the joined\n * literal parts to the bound property.\n *\n * When changes to compound parts occur, they are first set into the compound\n * storage array for that property, and then the array is joined to result in\n * the final value set to the property/attribute.\n *\n * @param {Node} node Bound node to initialize\n * @param {Binding} binding Binding metadata\n * @return {void}\n * @private\n */\nfunction setupCompoundStorage(node, binding) {\n  if (binding.isCompound) {\n    // Create compound storage map\n    let storage = node.__dataCompoundStorage ||\n      (node.__dataCompoundStorage = {});\n    let parts = binding.parts;\n    // Copy literals from parts into storage for this binding\n    let literals = new Array(parts.length);\n    for (let j=0; j<parts.length; j++) {\n      literals[j] = parts[j].literal;\n    }\n    let target = binding.target;\n    storage[target] = literals;\n    // Configure properties with their literal parts\n    if (binding.literal && binding.kind == 'property') {\n      // Note, className needs style scoping so this needs wrapping.\n      // We may also want to consider doing this for `textContent` and\n      // `innerHTML`.\n      if (target === 'className') {\n        node = wrap(node);\n      }\n      node[target] = binding.literal;\n    }\n  }\n}\n\n/**\n * Adds a 2-way binding notification event listener to the node specified\n *\n * @param {Object} node Child element to add listener to\n * @param {!Polymer_PropertyEffects} inst Host element instance to handle\n *     notification event\n * @param {Binding} binding Binding metadata\n * @return {void}\n * @private\n */\nfunction addNotifyListener(node, inst, binding) {\n  if (binding.listenerEvent) {\n    let part = binding.parts[0];\n    node.addEventListener(binding.listenerEvent, function(e) {\n      handleNotification(e, inst, binding.target, part.source, part.negate);\n    });\n  }\n}\n\n// -- for method-based effects (complexObserver & computed) --------------\n\n/**\n * Adds property effects for each argument in the method signature (and\n * optionally, for the method name if `dynamic` is true) that calls the\n * provided effect function.\n *\n * @param {Element | Object} model Prototype or instance\n * @param {!MethodSignature} sig Method signature metadata\n * @param {string} type Type of property effect to add\n * @param {Function} effectFn Function to run when arguments change\n * @param {*=} methodInfo Effect-specific information to be included in\n *   method effect metadata\n * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n *   method names should be included as a dependency to the effect. Note,\n *   defaults to true if the signature is static (sig.static is true).\n * @return {void}\n * @private\n */\nfunction createMethodEffect(model, sig, type, effectFn, methodInfo, dynamicFn) {\n  dynamicFn = sig.static || (dynamicFn &&\n    (typeof dynamicFn !== 'object' || dynamicFn[sig.methodName]));\n  let info = {\n    methodName: sig.methodName,\n    args: sig.args,\n    methodInfo,\n    dynamicFn\n  };\n  for (let i=0, arg; (i<sig.args.length) && (arg=sig.args[i]); i++) {\n    if (!arg.literal) {\n      model._addPropertyEffect(arg.rootProperty, type, {\n        fn: effectFn, info: info, trigger: arg\n      });\n    }\n  }\n  if (dynamicFn) {\n    model._addPropertyEffect(sig.methodName, type, {\n      fn: effectFn, info: info\n    });\n  }\n}\n\n/**\n * Calls a method with arguments marshaled from properties on the instance\n * based on the method signature contained in the effect metadata.\n *\n * Multi-property observers, computed properties, and inline computing\n * functions call this function to invoke the method, then use the return\n * value accordingly.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {*} Returns the return value from the method invocation\n * @private\n */\nfunction runMethodEffect(inst, property, props, oldProps, info) {\n  // Instances can optionally have a _methodHost which allows redirecting where\n  // to find methods. Currently used by `templatize`.\n  let context = inst._methodHost || inst;\n  let fn = context[info.methodName];\n  if (fn) {\n    let args = inst._marshalArgs(info.args, property, props);\n    return fn.apply(context, args);\n  } else if (!info.dynamicFn) {\n    console.warn('method `' + info.methodName + '` not defined');\n  }\n}\n\nconst emptyArray = [];\n\n// Regular expressions used for binding\nconst IDENT  = '(?:' + '[a-zA-Z_$][\\\\w.:$\\\\-*]*' + ')';\nconst NUMBER = '(?:' + '[-+]?[0-9]*\\\\.?[0-9]+(?:[eE][-+]?[0-9]+)?' + ')';\nconst SQUOTE_STRING = '(?:' + '\\'(?:[^\\'\\\\\\\\]|\\\\\\\\.)*\\'' + ')';\nconst DQUOTE_STRING = '(?:' + '\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\"' + ')';\nconst STRING = '(?:' + SQUOTE_STRING + '|' + DQUOTE_STRING + ')';\nconst ARGUMENT = '(?:(' + IDENT + '|' + NUMBER + '|' +  STRING + ')\\\\s*' + ')';\nconst ARGUMENTS = '(?:' + ARGUMENT + '(?:,\\\\s*' + ARGUMENT + ')*' + ')';\nconst ARGUMENT_LIST = '(?:' + '\\\\(\\\\s*' +\n                              '(?:' + ARGUMENTS + '?' + ')' +\n                            '\\\\)\\\\s*' + ')';\nconst BINDING = '(' + IDENT + '\\\\s*' + ARGUMENT_LIST + '?' + ')'; // Group 3\nconst OPEN_BRACKET = '(\\\\[\\\\[|{{)' + '\\\\s*';\nconst CLOSE_BRACKET = '(?:]]|}})';\nconst NEGATE = '(?:(!)\\\\s*)?'; // Group 2\nconst EXPRESSION = OPEN_BRACKET + NEGATE + BINDING + CLOSE_BRACKET;\nconst bindingRegex = new RegExp(EXPRESSION, \"g\");\n\n/**\n * Create a string from binding parts of all the literal parts\n *\n * @param {!Array<BindingPart>} parts All parts to stringify\n * @return {string} String made from the literal parts\n */\nfunction literalFromParts(parts) {\n  let s = '';\n  for (let i=0; i<parts.length; i++) {\n    let literal = parts[i].literal;\n    s += literal || '';\n  }\n  return s;\n}\n\n/**\n * Parses an expression string for a method signature, and returns a metadata\n * describing the method in terms of `methodName`, `static` (whether all the\n * arguments are literals), and an array of `args`\n *\n * @param {string} expression The expression to parse\n * @return {?MethodSignature} The method metadata object if a method expression was\n *   found, otherwise `undefined`\n * @private\n */\nfunction parseMethod(expression) {\n  // tries to match valid javascript property names\n  let m = expression.match(/([^\\s]+?)\\(([\\s\\S]*)\\)/);\n  if (m) {\n    let methodName = m[1];\n    let sig = { methodName, static: true, args: emptyArray };\n    if (m[2].trim()) {\n      // replace escaped commas with comma entity, split on un-escaped commas\n      let args = m[2].replace(/\\\\,/g, '&comma;').split(',');\n      return parseArgs(args, sig);\n    } else {\n      return sig;\n    }\n  }\n  return null;\n}\n\n/**\n * Parses an array of arguments and sets the `args` property of the supplied\n * signature metadata object. Sets the `static` property to false if any\n * argument is a non-literal.\n *\n * @param {!Array<string>} argList Array of argument names\n * @param {!MethodSignature} sig Method signature metadata object\n * @return {!MethodSignature} The updated signature metadata object\n * @private\n */\nfunction parseArgs(argList, sig) {\n  sig.args = argList.map(function(rawArg) {\n    let arg = parseArg(rawArg);\n    if (!arg.literal) {\n      sig.static = false;\n    }\n    return arg;\n  }, this);\n  return sig;\n}\n\n/**\n * Parses an individual argument, and returns an argument metadata object\n * with the following fields:\n *\n *   {\n *     value: 'prop',        // property/path or literal value\n *     literal: false,       // whether argument is a literal\n *     structured: false,    // whether the property is a path\n *     rootProperty: 'prop', // the root property of the path\n *     wildcard: false       // whether the argument was a wildcard '.*' path\n *   }\n *\n * @param {string} rawArg The string value of the argument\n * @return {!MethodArg} Argument metadata object\n * @private\n */\nfunction parseArg(rawArg) {\n  // clean up whitespace\n  let arg = rawArg.trim()\n    // replace comma entity with comma\n    .replace(/&comma;/g, ',')\n    // repair extra escape sequences; note only commas strictly need\n    // escaping, but we allow any other char to be escaped since its\n    // likely users will do this\n    .replace(/\\\\(.)/g, '\\$1')\n    ;\n  // basic argument descriptor\n  let a = {\n    name: arg,\n    value: '',\n    literal: false\n  };\n  // detect literal value (must be String or Number)\n  let fc = arg[0];\n  if (fc === '-') {\n    fc = arg[1];\n  }\n  if (fc >= '0' && fc <= '9') {\n    fc = '#';\n  }\n  switch(fc) {\n    case \"'\":\n    case '\"':\n      a.value = arg.slice(1, -1);\n      a.literal = true;\n      break;\n    case '#':\n      a.value = Number(arg);\n      a.literal = true;\n      break;\n  }\n  // if not literal, look for structured path\n  if (!a.literal) {\n    a.rootProperty = root(arg);\n    // detect structured path (has dots)\n    a.structured = isPath(arg);\n    if (a.structured) {\n      a.wildcard = (arg.slice(-2) == '.*');\n      if (a.wildcard) {\n        a.name = arg.slice(0, -2);\n      }\n    }\n  }\n  return a;\n}\n\nfunction getArgValue(data, props, path) {\n  let value = get(data, path);\n  // when data is not stored e.g. `splices`, get the value from changedProps\n  // TODO(kschaaf): Note, this can cause a rare issue where the wildcard\n  // info.value could pull a stale value out of changedProps during a reentrant\n  // change that sets the value back to undefined.\n  // https://github.com/Polymer/polymer/issues/5479\n  if (value === undefined) {\n    value = props[path];\n  }\n  return value;\n}\n\n// data api\n\n/**\n * Sends array splice notifications (`.splices` and `.length`)\n *\n * Note: this implementation only accepts normalized paths\n *\n * @param {!Polymer_PropertyEffects} inst Instance to send notifications to\n * @param {Array} array The array the mutations occurred on\n * @param {string} path The path to the array that was mutated\n * @param {Array} splices Array of splice records\n * @return {void}\n * @private\n */\nfunction notifySplices(inst, array, path, splices) {\n  inst.notifyPath(path + '.splices', { indexSplices: splices });\n  inst.notifyPath(path + '.length', array.length);\n}\n\n/**\n * Creates a splice record and sends an array splice notification for\n * the described mutation\n *\n * Note: this implementation only accepts normalized paths\n *\n * @param {!Polymer_PropertyEffects} inst Instance to send notifications to\n * @param {Array} array The array the mutations occurred on\n * @param {string} path The path to the array that was mutated\n * @param {number} index Index at which the array mutation occurred\n * @param {number} addedCount Number of added items\n * @param {Array} removed Array of removed items\n * @return {void}\n * @private\n */\nfunction notifySplice(inst, array, path, index, addedCount, removed) {\n  notifySplices(inst, array, path, [{\n    index: index,\n    addedCount: addedCount,\n    removed: removed,\n    object: array,\n    type: 'splice'\n  }]);\n}\n\n/**\n * Returns an upper-cased version of the string.\n *\n * @param {string} name String to uppercase\n * @return {string} Uppercased string\n * @private\n */\nfunction upper(name) {\n  return name[0].toUpperCase() + name.substring(1);\n}\n\n/**\n * Element class mixin that provides meta-programming for Polymer's template\n * binding and data observation (collectively, \"property effects\") system.\n *\n * This mixin uses provides the following key static methods for adding\n * property effects to an element class:\n * - `addPropertyEffect`\n * - `createPropertyObserver`\n * - `createMethodObserver`\n * - `createNotifyingProperty`\n * - `createReadOnlyProperty`\n * - `createReflectedProperty`\n * - `createComputedProperty`\n * - `bindTemplate`\n *\n * Each method creates one or more property accessors, along with metadata\n * used by this mixin's implementation of `_propertiesChanged` to perform\n * the property effects.\n *\n * Underscored versions of the above methods also exist on the element\n * prototype for adding property effects on instances at runtime.\n *\n * Note that this mixin overrides several `PropertyAccessors` methods, in\n * many cases to maintain guarantees provided by the Polymer 1.x features;\n * notably it changes property accessors to be synchronous by default\n * whereas the default when using `PropertyAccessors` standalone is to be\n * async by default.\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin TemplateStamp\n * @appliesMixin PropertyAccessors\n * @summary Element class mixin that provides meta-programming for Polymer's\n * template binding and data observation system.\n * @template T\n * @param {function(new:T)} superClass Class to apply mixin to.\n * @return {function(new:T)} superClass with mixin applied.\n */\nexport const PropertyEffects = dedupingMixin(superClass => {\n\n  /**\n   * @constructor\n   * @implements {Polymer_PropertyAccessors}\n   * @implements {Polymer_TemplateStamp}\n   * @unrestricted\n   * @private\n   */\n  const propertyEffectsBase = TemplateStamp(PropertyAccessors(superClass));\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_PropertyEffects}\n   * @extends {propertyEffectsBase}\n   * @unrestricted\n   */\n  class PropertyEffects extends propertyEffectsBase {\n\n    constructor() {\n      super();\n      /** @type {boolean} */\n      // Used to identify users of this mixin, ala instanceof\n      this.__isPropertyEffectsClient = true;\n      /** @type {number} */\n      // NOTE: used to track re-entrant calls to `_flushProperties`\n      // path changes dirty check against `__dataTemp` only during one \"turn\"\n      // and are cleared when `__dataCounter` returns to 0.\n      this.__dataCounter = 0;\n      /** @type {boolean} */\n      this.__dataClientsReady;\n      /** @type {Array} */\n      this.__dataPendingClients;\n      /** @type {Object} */\n      this.__dataToNotify;\n      /** @type {Object} */\n      this.__dataLinkedPaths;\n      /** @type {boolean} */\n      this.__dataHasPaths;\n      /** @type {Object} */\n      this.__dataCompoundStorage;\n      /** @type {Polymer_PropertyEffects} */\n      this.__dataHost;\n      /** @type {!Object} */\n      this.__dataTemp;\n      /** @type {boolean} */\n      this.__dataClientsInitialized;\n      /** @type {!Object} */\n      this.__data;\n      /** @type {!Object|null} */\n      this.__dataPending;\n      /** @type {!Object} */\n      this.__dataOld;\n      /** @type {Object} */\n      this.__computeEffects;\n      /** @type {Object} */\n      this.__reflectEffects;\n      /** @type {Object} */\n      this.__notifyEffects;\n      /** @type {Object} */\n      this.__propagateEffects;\n      /** @type {Object} */\n      this.__observeEffects;\n      /** @type {Object} */\n      this.__readOnly;\n      /** @type {!TemplateInfo} */\n      this.__templateInfo;\n    }\n\n    /**\n     * @return {!Object<string, string>} Effect prototype property name map.\n     */\n    get PROPERTY_EFFECT_TYPES() {\n      return TYPES;\n    }\n\n    /**\n     * @override\n     * @return {void}\n     */\n    _initializeProperties() {\n      super._initializeProperties();\n      hostStack.registerHost(this);\n      this.__dataClientsReady = false;\n      this.__dataPendingClients = null;\n      this.__dataToNotify = null;\n      this.__dataLinkedPaths = null;\n      this.__dataHasPaths = false;\n      // May be set on instance prior to upgrade\n      this.__dataCompoundStorage = this.__dataCompoundStorage || null;\n      this.__dataHost = this.__dataHost || null;\n      this.__dataTemp = {};\n      this.__dataClientsInitialized = false;\n    }\n\n    /**\n     * Overrides `PropertyAccessors` implementation to provide a\n     * more efficient implementation of initializing properties from\n     * the prototype on the instance.\n     *\n     * @override\n     * @param {Object} props Properties to initialize on the prototype\n     * @return {void}\n     */\n    _initializeProtoProperties(props) {\n      this.__data = Object.create(props);\n      this.__dataPending = Object.create(props);\n      this.__dataOld = {};\n    }\n\n    /**\n     * Overrides `PropertyAccessors` implementation to avoid setting\n     * `_setProperty`'s `shouldNotify: true`.\n     *\n     * @override\n     * @param {Object} props Properties to initialize on the instance\n     * @return {void}\n     */\n    _initializeInstanceProperties(props) {\n      let readOnly = this[TYPES.READ_ONLY];\n      for (let prop in props) {\n        if (!readOnly || !readOnly[prop]) {\n          this.__dataPending = this.__dataPending || {};\n          this.__dataOld = this.__dataOld || {};\n          this.__data[prop] = this.__dataPending[prop] = props[prop];\n        }\n      }\n    }\n\n    // Prototype setup ----------------------------------------\n\n    /**\n     * Equivalent to static `addPropertyEffect` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Property that should trigger the effect\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object\n     * @return {void}\n     * @protected\n     */\n    _addPropertyEffect(property, type, effect) {\n      this._createPropertyAccessor(property, type == TYPES.READ_ONLY);\n      // effects are accumulated into arrays per property based on type\n      let effects = ensureOwnEffectMap(this, type)[property];\n      if (!effects) {\n        effects = this[type][property] = [];\n      }\n      effects.push(effect);\n    }\n\n    /**\n     * Removes the given property effect.\n     *\n     * @override\n     * @param {string} property Property the effect was associated with\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object to remove\n     * @return {void}\n     */\n    _removePropertyEffect(property, type, effect) {\n      let effects = ensureOwnEffectMap(this, type)[property];\n      let idx = effects.indexOf(effect);\n      if (idx >= 0) {\n        effects.splice(idx, 1);\n      }\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a property effect\n     * of a certain type.\n     *\n     * @override\n     * @param {string} property Property name\n     * @param {string=} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @return {boolean} True if the prototype/instance has an effect of this\n     *     type\n     * @protected\n     */\n    _hasPropertyEffect(property, type) {\n      let effects = this[type];\n      return Boolean(effects && effects[property]);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"read only\"\n     * accessor for the given property.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this\n     *     type\n     * @protected\n     */\n    _hasReadOnlyEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.READ_ONLY);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"notify\"\n     * property effect for the given property.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this\n     *     type\n     * @protected\n     */\n    _hasNotifyEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.NOTIFY);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"reflect to\n     * attribute\" property effect for the given property.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this\n     *     type\n     * @protected\n     */\n    _hasReflectEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.REFLECT);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"computed\"\n     * property effect for the given property.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this\n     *     type\n     * @protected\n     */\n    _hasComputedEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.COMPUTE);\n    }\n\n    // Runtime ----------------------------------------\n\n    /**\n     * Sets a pending property or path.  If the root property of the path in\n     * question had no accessor, the path is set, otherwise it is enqueued\n     * via `_setPendingProperty`.\n     *\n     * This function isolates relatively expensive functionality necessary\n     * for the public API (`set`, `setProperties`, `notifyPath`, and property\n     * change listeners via {{...}} bindings), such that it is only done\n     * when paths enter the system, and not at every propagation step.  It\n     * also sets a `__dataHasPaths` flag on the instance which is used to\n     * fast-path slower path-matching code in the property effects host paths.\n     *\n     * `path` can be a path string or array of path parts as accepted by the\n     * public API.\n     *\n     * @override\n     * @param {string | !Array<number|string>} path Path to set\n     * @param {*} value Value to set\n     * @param {boolean=} shouldNotify Set to true if this change should\n     *  cause a property notification event dispatch\n     * @param {boolean=} isPathNotification If the path being set is a path\n     *   notification of an already changed value, as opposed to a request\n     *   to set and notify the change.  In the latter `false` case, a dirty\n     *   check is performed and then the value is set to the path before\n     *   enqueuing the pending property change.\n     * @return {boolean} Returns true if the property/path was enqueued in\n     *   the pending changes bag.\n     * @protected\n     */\n    _setPendingPropertyOrPath(path, value, shouldNotify, isPathNotification) {\n      if (isPathNotification ||\n          root(Array.isArray(path) ? path[0] : path) !== path) {\n        // Dirty check changes being set to a path against the actual object,\n        // since this is the entry point for paths into the system; from here\n        // the only dirty checks are against the `__dataTemp` cache to prevent\n        // duplicate work in the same turn only. Note, if this was a notification\n        // of a change already set to a path (isPathNotification: true),\n        // we always let the change through and skip the `set` since it was\n        // already dirty checked at the point of entry and the underlying\n        // object has already been updated\n        if (!isPathNotification) {\n          let old = get(this, path);\n          path = /** @type {string} */ (set(this, path, value));\n          // Use property-accessor's simpler dirty check\n          if (!path || !super._shouldPropertyChange(path, value, old)) {\n            return false;\n          }\n        }\n        this.__dataHasPaths = true;\n        if (this._setPendingProperty(/**@type{string}*/(path), value, shouldNotify)) {\n          computeLinkedPaths(this, /**@type{string}*/ (path), value);\n          return true;\n        }\n      } else {\n        if (this.__dataHasAccessor && this.__dataHasAccessor[path]) {\n          return this._setPendingProperty(/**@type{string}*/(path), value, shouldNotify);\n        } else {\n          this[path] = value;\n        }\n      }\n      return false;\n    }\n\n    /**\n     * Applies a value to a non-Polymer element/node's property.\n     *\n     * The implementation makes a best-effort at binding interop:\n     * Some native element properties have side-effects when\n     * re-setting the same value (e.g. setting `<input>.value` resets the\n     * cursor position), so we do a dirty-check before setting the value.\n     * However, for better interop with non-Polymer custom elements that\n     * accept objects, we explicitly re-set object changes coming from the\n     * Polymer world (which may include deep object changes without the\n     * top reference changing), erring on the side of providing more\n     * information.\n     *\n     * Users may override this method to provide alternate approaches.\n     *\n     * @override\n     * @param {!Node} node The node to set a property on\n     * @param {string} prop The property to set\n     * @param {*} value The value to set\n     * @return {void}\n     * @protected\n     */\n    _setUnmanagedPropertyToNode(node, prop, value) {\n      // It is a judgment call that resetting primitives is\n      // \"bad\" and resettings objects is also \"good\"; alternatively we could\n      // implement a whitelist of tag & property values that should never\n      // be reset (e.g. <input>.value && <select>.value)\n      if (value !== node[prop] || typeof value == 'object') {\n        // Note, className needs style scoping so this needs wrapping.\n        if (prop === 'className') {\n          node = /** @type {!Node} */(wrap(node));\n        }\n        node[prop] = value;\n      }\n    }\n\n    /**\n     * Overrides the `PropertiesChanged` implementation to introduce special\n     * dirty check logic depending on the property & value being set:\n     *\n     * 1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n     *    Stored in `__dataTemp`, dirty checked against `__dataTemp`\n     * 2. Object set to simple property (e.g. 'prop': {...})\n     *    Stored in `__dataTemp` and `__data`, dirty checked against\n     *    `__dataTemp` by default implementation of `_shouldPropertyChange`\n     * 3. Primitive value set to simple property (e.g. 'prop': 42)\n     *    Stored in `__data`, dirty checked against `__data`\n     *\n     * The dirty-check is important to prevent cycles due to two-way\n     * notification, but paths and objects are only dirty checked against any\n     * previous value set during this turn via a \"temporary cache\" that is\n     * cleared when the last `_propertiesChanged` exits. This is so:\n     * a. any cached array paths (e.g. 'array.3.prop') may be invalidated\n     *    due to array mutations like shift/unshift/splice; this is fine\n     *    since path changes are dirty-checked at user entry points like `set`\n     * b. dirty-checking for objects only lasts one turn to allow the user\n     *    to mutate the object in-place and re-set it with the same identity\n     *    and have all sub-properties re-propagated in a subsequent turn.\n     *\n     * The temp cache is not necessarily sufficient to prevent invalid array\n     * paths, since a splice can happen during the same turn (with pathological\n     * user code); we could introduce a \"fixup\" for temporarily cached array\n     * paths if needed: https://github.com/Polymer/polymer/issues/4227\n     *\n     * @override\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @param {boolean=} shouldNotify True if property should fire notification\n     *   event (applies only for `notify: true` properties)\n     * @return {boolean} Returns true if the property changed\n     */\n    _setPendingProperty(property, value, shouldNotify) {\n      let propIsPath = this.__dataHasPaths && isPath(property);\n      let prevProps = propIsPath ? this.__dataTemp : this.__data;\n      if (this._shouldPropertyChange(property, value, prevProps[property])) {\n        if (!this.__dataPending) {\n          this.__dataPending = {};\n          this.__dataOld = {};\n        }\n        // Ensure old is captured from the last turn\n        if (!(property in this.__dataOld)) {\n          this.__dataOld[property] = this.__data[property];\n        }\n        // Paths are stored in temporary cache (cleared at end of turn),\n        // which is used for dirty-checking, all others stored in __data\n        if (propIsPath) {\n          this.__dataTemp[property] = value;\n        } else {\n          this.__data[property] = value;\n        }\n        // All changes go into pending property bag, passed to _propertiesChanged\n        this.__dataPending[property] = value;\n        // Track properties that should notify separately\n        if (propIsPath || (this[TYPES.NOTIFY] && this[TYPES.NOTIFY][property])) {\n          this.__dataToNotify = this.__dataToNotify || {};\n          this.__dataToNotify[property] = shouldNotify;\n        }\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Overrides base implementation to ensure all accessors set `shouldNotify`\n     * to true, for per-property notification tracking.\n     *\n     * @override\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @return {void}\n     */\n    _setProperty(property, value) {\n      if (this._setPendingProperty(property, value, true)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Overrides `PropertyAccessor`'s default async queuing of\n     * `_propertiesChanged`: if `__dataReady` is false (has not yet been\n     * manually flushed), the function no-ops; otherwise flushes\n     * `_propertiesChanged` synchronously.\n     *\n     * @override\n     * @return {void}\n     */\n    _invalidateProperties() {\n      if (this.__dataReady) {\n        this._flushProperties();\n      }\n    }\n\n    /**\n     * Enqueues the given client on a list of pending clients, whose\n     * pending property changes can later be flushed via a call to\n     * `_flushClients`.\n     *\n     * @override\n     * @param {Object} client PropertyEffects client to enqueue\n     * @return {void}\n     * @protected\n     */\n    _enqueueClient(client) {\n      this.__dataPendingClients = this.__dataPendingClients || [];\n      if (client !== this) {\n        this.__dataPendingClients.push(client);\n      }\n    }\n\n    /**\n     * Overrides superclass implementation.\n     *\n     * @override\n     * @return {void}\n     * @protected\n     */\n    _flushProperties() {\n      this.__dataCounter++;\n      super._flushProperties();\n      this.__dataCounter--;\n    }\n\n    /**\n     * Flushes any clients previously enqueued via `_enqueueClient`, causing\n     * their `_flushProperties` method to run.\n     *\n     * @override\n     * @return {void}\n     * @protected\n     */\n    _flushClients() {\n      if (!this.__dataClientsReady) {\n        this.__dataClientsReady = true;\n        this._readyClients();\n        // Override point where accessors are turned on; importantly,\n        // this is after clients have fully readied, providing a guarantee\n        // that any property effects occur only after all clients are ready.\n        this.__dataReady = true;\n      } else {\n        this.__enableOrFlushClients();\n      }\n    }\n\n    // NOTE: We ensure clients either enable or flush as appropriate. This\n    // handles two corner cases:\n    // (1) clients flush properly when connected/enabled before the host\n    // enables; e.g.\n    //   (a) Templatize stamps with no properties and does not flush and\n    //   (b) the instance is inserted into dom and\n    //   (c) then the instance flushes.\n    // (2) clients enable properly when not connected/enabled when the host\n    // flushes; e.g.\n    //   (a) a template is runtime stamped and not yet connected/enabled\n    //   (b) a host sets a property, causing stamped dom to flush\n    //   (c) the stamped dom enables.\n    __enableOrFlushClients() {\n      let clients = this.__dataPendingClients;\n      if (clients) {\n        this.__dataPendingClients = null;\n        for (let i=0; i < clients.length; i++) {\n          let client = clients[i];\n          if (!client.__dataEnabled) {\n            client._enableProperties();\n          } else if (client.__dataPending) {\n            client._flushProperties();\n          }\n        }\n      }\n    }\n\n    /**\n     * Perform any initial setup on client dom. Called before the first\n     * `_flushProperties` call on client dom and before any element\n     * observers are called.\n     *\n     * @override\n     * @return {void}\n     * @protected\n     */\n    _readyClients() {\n      this.__enableOrFlushClients();\n    }\n\n    /**\n     * Sets a bag of property changes to this instance, and\n     * synchronously processes all effects of the properties as a batch.\n     *\n     * Property names must be simple properties, not paths.  Batched\n     * path propagation is not supported.\n     *\n     * @override\n     * @param {Object} props Bag of one or more key-value pairs whose key is\n     *   a property and value is the new value to set for that property.\n     * @param {boolean=} setReadOnly When true, any private values set in\n     *   `props` will be set. By default, `setProperties` will not set\n     *   `readOnly: true` root properties.\n     * @return {void}\n     * @public\n     */\n    setProperties(props, setReadOnly) {\n      for (let path in props) {\n        if (setReadOnly || !this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][path]) {\n          //TODO(kschaaf): explicitly disallow paths in setProperty?\n          // wildcard observers currently only pass the first changed path\n          // in the `info` object, and you could do some odd things batching\n          // paths, e.g. {'foo.bar': {...}, 'foo': null}\n          this._setPendingPropertyOrPath(path, props[path], true);\n        }\n      }\n      this._invalidateProperties();\n    }\n\n    /**\n     * Overrides `PropertyAccessors` so that property accessor\n     * side effects are not enabled until after client dom is fully ready.\n     * Also calls `_flushClients` callback to ensure client dom is enabled\n     * that was not enabled as a result of flushing properties.\n     *\n     * @override\n     * @return {void}\n     */\n    ready() {\n      // It is important that `super.ready()` is not called here as it\n      // immediately turns on accessors. Instead, we wait until `readyClients`\n      // to enable accessors to provide a guarantee that clients are ready\n      // before processing any accessors side effects.\n      this._flushProperties();\n      // If no data was pending, `_flushProperties` will not `flushClients`\n      // so ensure this is done.\n      if (!this.__dataClientsReady) {\n        this._flushClients();\n      }\n      // Before ready, client notifications do not trigger _flushProperties.\n      // Therefore a flush is necessary here if data has been set.\n      if (this.__dataPending) {\n        this._flushProperties();\n      }\n    }\n\n    /**\n     * Implements `PropertyAccessors`'s properties changed callback.\n     *\n     * Runs each class of effects for the batch of changed properties in\n     * a specific order (compute, propagate, reflect, observe, notify).\n     *\n     * @override\n     * @param {!Object} currentProps Bag of all current accessor values\n     * @param {?Object} changedProps Bag of properties changed since the last\n     *   call to `_propertiesChanged`\n     * @param {?Object} oldProps Bag of previous values for each property\n     *   in `changedProps`\n     * @return {void}\n     */\n    _propertiesChanged(currentProps, changedProps, oldProps) {\n      // ----------------------------\n      // let c = Object.getOwnPropertyNames(changedProps || {});\n      // window.debug && console.group(this.localName + '#' + this.id + ': ' + c);\n      // if (window.debug) { debugger; }\n      // ----------------------------\n      let hasPaths = this.__dataHasPaths;\n      this.__dataHasPaths = false;\n      // Compute properties\n      runComputedEffects(this, changedProps, oldProps, hasPaths);\n      // Clear notify properties prior to possible reentry (propagate, observe),\n      // but after computing effects have a chance to add to them\n      let notifyProps = this.__dataToNotify;\n      this.__dataToNotify = null;\n      // Propagate properties to clients\n      this._propagatePropertyChanges(changedProps, oldProps, hasPaths);\n      // Flush clients\n      this._flushClients();\n      // Reflect properties\n      runEffects(this, this[TYPES.REFLECT], changedProps, oldProps, hasPaths);\n      // Observe properties\n      runEffects(this, this[TYPES.OBSERVE], changedProps, oldProps, hasPaths);\n      // Notify properties to host\n      if (notifyProps) {\n        runNotifyEffects(this, notifyProps, changedProps, oldProps, hasPaths);\n      }\n      // Clear temporary cache at end of turn\n      if (this.__dataCounter == 1) {\n        this.__dataTemp = {};\n      }\n      // ----------------------------\n      // window.debug && console.groupEnd(this.localName + '#' + this.id + ': ' + c);\n      // ----------------------------\n    }\n\n    /**\n     * Called to propagate any property changes to stamped template nodes\n     * managed by this element.\n     *\n     * @override\n     * @param {Object} changedProps Bag of changed properties\n     * @param {Object} oldProps Bag of previous values for changed properties\n     * @param {boolean} hasPaths True with `props` contains one or more paths\n     * @return {void}\n     * @protected\n     */\n    _propagatePropertyChanges(changedProps, oldProps, hasPaths) {\n      if (this[TYPES.PROPAGATE]) {\n        runEffects(this, this[TYPES.PROPAGATE], changedProps, oldProps, hasPaths);\n      }\n      let templateInfo = this.__templateInfo;\n      while (templateInfo) {\n        runEffects(this, templateInfo.propertyEffects, changedProps, oldProps,\n          hasPaths, templateInfo.nodeList);\n        templateInfo = templateInfo.nextTemplateInfo;\n      }\n    }\n\n    /**\n     * Aliases one data path as another, such that path notifications from one\n     * are routed to the other.\n     *\n     * @override\n     * @param {string | !Array<string|number>} to Target path to link.\n     * @param {string | !Array<string|number>} from Source path to link.\n     * @return {void}\n     * @public\n     */\n    linkPaths(to, from) {\n      to = normalize(to);\n      from = normalize(from);\n      this.__dataLinkedPaths = this.__dataLinkedPaths || {};\n      this.__dataLinkedPaths[to] = from;\n    }\n\n    /**\n     * Removes a data path alias previously established with `_linkPaths`.\n     *\n     * Note, the path to unlink should be the target (`to`) used when\n     * linking the paths.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Target path to unlink.\n     * @return {void}\n     * @public\n     */\n    unlinkPaths(path) {\n      path = normalize(path);\n      if (this.__dataLinkedPaths) {\n        delete this.__dataLinkedPaths[path];\n      }\n    }\n\n    /**\n     * Notify that an array has changed.\n     *\n     * Example:\n     *\n     *     this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n     *     ...\n     *     this.items.splice(1, 1, {name: 'Sam'});\n     *     this.items.push({name: 'Bob'});\n     *     this.notifySplices('items', [\n     *       { index: 1, removed: [{name: 'Todd'}], addedCount: 1,\n     *         object: this.items, type: 'splice' },\n     *       { index: 3, removed: [], addedCount: 1,\n     *         object: this.items, type: 'splice'}\n     *     ]);\n     *\n     * @param {string} path Path that should be notified.\n     * @param {Array} splices Array of splice records indicating ordered\n     *   changes that occurred to the array. Each record should have the\n     *   following fields:\n     *    * index: index at which the change occurred\n     *    * removed: array of items that were removed from this index\n     *    * addedCount: number of new items added at this index\n     *    * object: a reference to the array in question\n     *    * type: the string literal 'splice'\n     *\n     *   Note that splice records _must_ be normalized such that they are\n     *   reported in index order (raw results from `Object.observe` are not\n     *   ordered and must be normalized/merged before notifying).\n     *\n     * @override\n     * @return {void}\n     * @public\n     */\n    notifySplices(path, splices) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get(this, path, info));\n      notifySplices(this, array, info.path, splices);\n    }\n\n    /**\n     * Convenience method for reading a value from a path.\n     *\n     * Note, if any part in the path is undefined, this method returns\n     * `undefined` (this method does not throw when dereferencing undefined\n     * paths).\n     *\n     * @override\n     * @param {(string|!Array<(string|number)>)} path Path to the value\n     *   to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n     *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n     *   bracketed expressions are not supported; string-based path parts\n     *   *must* be separated by dots.  Note that when dereferencing array\n     *   indices, the index may be used as a dotted part directly\n     *   (e.g. `users.12.name` or `['users', 12, 'name']`).\n     * @param {Object=} root Root object from which the path is evaluated.\n     * @return {*} Value at the path, or `undefined` if any part of the path\n     *   is undefined.\n     * @public\n     */\n    get(path, root) {\n      return get(root || this, path);\n    }\n\n    /**\n     * Convenience method for setting a value to a path and notifying any\n     * elements bound to the same path.\n     *\n     * Note, if any part in the path except for the last is undefined,\n     * this method does nothing (this method does not throw when\n     * dereferencing undefined paths).\n     *\n     * @override\n     * @param {(string|!Array<(string|number)>)} path Path to the value\n     *   to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n     *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n     *   bracketed expressions are not supported; string-based path parts\n     *   *must* be separated by dots.  Note that when dereferencing array\n     *   indices, the index may be used as a dotted part directly\n     *   (e.g. `'users.12.name'` or `['users', 12, 'name']`).\n     * @param {*} value Value to set at the specified path.\n     * @param {Object=} root Root object from which the path is evaluated.\n     *   When specified, no notification will occur.\n     * @return {void}\n     * @public\n     */\n    set(path, value, root) {\n      if (root) {\n        set(root, path, value);\n      } else {\n        if (!this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][/** @type {string} */(path)]) {\n          if (this._setPendingPropertyOrPath(path, value, true)) {\n            this._invalidateProperties();\n          }\n        }\n      }\n    }\n\n    /**\n     * Adds items onto the end of the array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.push`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {...*} items Items to push onto array\n     * @return {number} New length of the array.\n     * @public\n     */\n    push(path, ...items) {\n      let info = {path: ''};\n      let array = /** @type {Array}*/(get(this, path, info));\n      let len = array.length;\n      let ret = array.push(...items);\n      if (items.length) {\n        notifySplice(this, array, info.path, len, items.length, []);\n      }\n      return ret;\n    }\n\n    /**\n     * Removes an item from the end of array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.pop`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Path to array.\n     * @return {*} Item that was removed.\n     * @public\n     */\n    pop(path) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get(this, path, info));\n      let hadLength = Boolean(array.length);\n      let ret = array.pop();\n      if (hadLength) {\n        notifySplice(this, array, info.path, array.length, 0, [ret]);\n      }\n      return ret;\n    }\n\n    /**\n     * Starting from the start index specified, removes 0 or more items\n     * from the array and inserts 0 or more new items in their place.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.splice`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {number} start Index from which to start removing/inserting.\n     * @param {number=} deleteCount Number of items to remove.\n     * @param {...*} items Items to insert into array.\n     * @return {Array} Array of removed items.\n     * @public\n     */\n    splice(path, start, deleteCount, ...items) {\n      let info = {path : ''};\n      let array = /** @type {Array} */(get(this, path, info));\n      // Normalize fancy native splice handling of crazy start values\n      if (start < 0) {\n        start = array.length - Math.floor(-start);\n      } else if (start) {\n        start = Math.floor(start);\n      }\n      // array.splice does different things based on the number of arguments\n      // you pass in. Therefore, array.splice(0) and array.splice(0, undefined)\n      // do different things. In the former, the whole array is cleared. In the\n      // latter, no items are removed.\n      // This means that we need to detect whether 1. one of the arguments\n      // is actually passed in and then 2. determine how many arguments\n      // we should pass on to the native array.splice\n      //\n      let ret;\n      // Omit any additional arguments if they were not passed in\n      if (arguments.length === 2) {\n        ret = array.splice(start);\n      // Either start was undefined and the others were defined, but in this\n      // case we can safely pass on all arguments\n      //\n      // Note: this includes the case where none of the arguments were passed in,\n      // e.g. this.splice('array'). However, if both start and deleteCount\n      // are undefined, array.splice will not modify the array (as expected)\n      } else {\n        ret = array.splice(start, deleteCount, ...items);\n      }\n      // At the end, check whether any items were passed in (e.g. insertions)\n      // or if the return array contains items (e.g. deletions).\n      // Only notify if items were added or deleted.\n      if (items.length || ret.length) {\n        notifySplice(this, array, info.path, start, items.length, ret);\n      }\n      return ret;\n    }\n\n    /**\n     * Removes an item from the beginning of array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.pop`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Path to array.\n     * @return {*} Item that was removed.\n     * @public\n     */\n    shift(path) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get(this, path, info));\n      let hadLength = Boolean(array.length);\n      let ret = array.shift();\n      if (hadLength) {\n        notifySplice(this, array, info.path, 0, 0, [ret]);\n      }\n      return ret;\n    }\n\n    /**\n     * Adds items onto the beginning of the array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.push`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {...*} items Items to insert info array\n     * @return {number} New length of the array.\n     * @public\n     */\n    unshift(path, ...items) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get(this, path, info));\n      let ret = array.unshift(...items);\n      if (items.length) {\n        notifySplice(this, array, info.path, 0, items.length, []);\n      }\n      return ret;\n    }\n\n    /**\n     * Notify that a path has changed.\n     *\n     * Example:\n     *\n     *     this.item.user.name = 'Bob';\n     *     this.notifyPath('item.user.name');\n     *\n     * @override\n     * @param {string} path Path that should be notified.\n     * @param {*=} value Value at the path (optional).\n     * @return {void}\n     * @public\n     */\n    notifyPath(path, value) {\n      /** @type {string} */\n      let propPath;\n      if (arguments.length == 1) {\n        // Get value if not supplied\n        let info = {path: ''};\n        value = get(this, path, info);\n        propPath = info.path;\n      } else if (Array.isArray(path)) {\n        // Normalize path if needed\n        propPath = normalize(path);\n      } else {\n        propPath = /** @type{string} */(path);\n      }\n      if (this._setPendingPropertyOrPath(propPath, value, true, true)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Equivalent to static `createReadOnlyProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Property name\n     * @param {boolean=} protectedSetter Creates a custom protected setter\n     *   when `true`.\n     * @return {void}\n     * @protected\n     */\n    _createReadOnlyProperty(property, protectedSetter) {\n      this._addPropertyEffect(property, TYPES.READ_ONLY);\n      if (protectedSetter) {\n        this['_set' + upper(property)] = /** @this {PropertyEffects} */function(value) {\n          this._setProperty(property, value);\n        };\n      }\n    }\n\n    /**\n     * Equivalent to static `createPropertyObserver` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Property name\n     * @param {string|function(*,*)} method Function or name of observer method\n     *     to call\n     * @param {boolean=} dynamicFn Whether the method name should be included as\n     *   a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    _createPropertyObserver(property, method, dynamicFn) {\n      let info = { property, method, dynamicFn: Boolean(dynamicFn) };\n      this._addPropertyEffect(property, TYPES.OBSERVE, {\n        fn: runObserverEffect, info, trigger: {name: property}\n      });\n      if (dynamicFn) {\n        this._addPropertyEffect(/** @type {string} */(method), TYPES.OBSERVE, {\n          fn: runObserverEffect, info, trigger: {name: method}\n        });\n      }\n    }\n\n    /**\n     * Equivalent to static `createMethodObserver` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     *   whether method names should be included as a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    _createMethodObserver(expression, dynamicFn) {\n      let sig = parseMethod(expression);\n      if (!sig) {\n        throw new Error(\"Malformed observer expression '\" + expression + \"'\");\n      }\n      createMethodEffect(this, sig, TYPES.OBSERVE, runMethodEffect, null, dynamicFn);\n    }\n\n    /**\n     * Equivalent to static `createNotifyingProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     */\n    _createNotifyingProperty(property) {\n      this._addPropertyEffect(property, TYPES.NOTIFY, {\n        fn: runNotifyEffect,\n        info: {\n          eventName: camelToDashCase(property) + '-changed',\n          property: property\n        }\n      });\n    }\n\n    /**\n     * Equivalent to static `createReflectedProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     * @suppress {missingProperties} go/missingfnprops\n     */\n    _createReflectedProperty(property) {\n      let attr = this.constructor.attributeNameForProperty(property);\n      if (attr[0] === '-') {\n        console.warn('Property ' + property + ' cannot be reflected to attribute ' +\n          attr + ' because \"-\" is not a valid starting attribute name. Use a lowercase first letter for the property instead.');\n      } else {\n        this._addPropertyEffect(property, TYPES.REFLECT, {\n          fn: runReflectEffect,\n          info: {\n            attrName: attr\n          }\n        });\n      }\n    }\n\n    /**\n     * Equivalent to static `createComputedProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Name of computed property to set\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     *   whether method names should be included as a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    _createComputedProperty(property, expression, dynamicFn) {\n      let sig = parseMethod(expression);\n      if (!sig) {\n        throw new Error(\"Malformed computed expression '\" + expression + \"'\");\n      }\n      createMethodEffect(this, sig, TYPES.COMPUTE, runComputedEffect, property, dynamicFn);\n    }\n\n    /**\n     * Gather the argument values for a method specified in the provided array\n     * of argument metadata.\n     *\n     * The `path` and `value` arguments are used to fill in wildcard descriptor\n     * when the method is being called as a result of a path notification.\n     *\n     * @param {!Array<!MethodArg>} args Array of argument metadata\n     * @param {string} path Property/path name that triggered the method effect\n     * @param {Object} props Bag of current property changes\n     * @return {Array<*>} Array of argument values\n     * @private\n     */\n    _marshalArgs(args, path, props) {\n      const data = this.__data;\n      const values = [];\n      for (let i=0, l=args.length; i<l; i++) {\n        let {name, structured, wildcard, value, literal} = args[i];\n        if (!literal) {\n          if (wildcard) {\n            const matches = isDescendant(name, path);\n            const pathValue = getArgValue(data, props, matches ? path : name);\n            value = {\n              path: matches ? path : name,\n              value: pathValue,\n              base: matches ? get(data, name) : pathValue\n            };\n          } else {\n            value = structured ? getArgValue(data, props, name) : data[name];\n          }\n        }\n        values[i] = value;\n      }\n      return values;\n    }\n\n    // -- static class methods ------------\n\n    /**\n     * Ensures an accessor exists for the specified property, and adds\n     * to a list of \"property effects\" that will run when the accessor for\n     * the specified property is set.  Effects are grouped by \"type\", which\n     * roughly corresponds to a phase in effect processing.  The effect\n     * metadata should be in the following form:\n     *\n     *     {\n     *       fn: effectFunction, // Reference to function to call to perform effect\n     *       info: { ... }       // Effect metadata passed to function\n     *       trigger: {          // Optional triggering metadata; if not provided\n     *         name: string      // the property is treated as a wildcard\n     *         structured: boolean\n     *         wildcard: boolean\n     *       }\n     *     }\n     *\n     * Effects are called from `_propertiesChanged` in the following order by\n     * type:\n     *\n     * 1. COMPUTE\n     * 2. PROPAGATE\n     * 3. REFLECT\n     * 4. OBSERVE\n     * 5. NOTIFY\n     *\n     * Effect functions are called with the following signature:\n     *\n     *     effectFunction(inst, path, props, oldProps, info, hasPaths)\n     *\n     * @param {string} property Property that should trigger the effect\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static addPropertyEffect(property, type, effect) {\n      this.prototype._addPropertyEffect(property, type, effect);\n    }\n\n    /**\n     * Creates a single-property observer for the given property.\n     *\n     * @param {string} property Property name\n     * @param {string|function(*,*)} method Function or name of observer method to call\n     * @param {boolean=} dynamicFn Whether the method name should be included as\n     *   a dependency to the effect.\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static createPropertyObserver(property, method, dynamicFn) {\n      this.prototype._createPropertyObserver(property, method, dynamicFn);\n    }\n\n    /**\n     * Creates a multi-property \"method observer\" based on the provided\n     * expression, which should be a string in the form of a normal JavaScript\n     * function signature: `'methodName(arg1, [..., argn])'`.  Each argument\n     * should correspond to a property or path in the context of this\n     * prototype (or instance), or may be a literal string or number.\n     *\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     * @return {void}\n     *   whether method names should be included as a dependency to the effect.\n     * @protected\n     * @nocollapse\n     */\n    static createMethodObserver(expression, dynamicFn) {\n      this.prototype._createMethodObserver(expression, dynamicFn);\n    }\n\n    /**\n     * Causes the setter for the given property to dispatch `<property>-changed`\n     * events to notify of changes to the property.\n     *\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static createNotifyingProperty(property) {\n      this.prototype._createNotifyingProperty(property);\n    }\n\n    /**\n     * Creates a read-only accessor for the given property.\n     *\n     * To set the property, use the protected `_setProperty` API.\n     * To create a custom protected setter (e.g. `_setMyProp()` for\n     * property `myProp`), pass `true` for `protectedSetter`.\n     *\n     * Note, if the property will have other property effects, this method\n     * should be called first, before adding other effects.\n     *\n     * @param {string} property Property name\n     * @param {boolean=} protectedSetter Creates a custom protected setter\n     *   when `true`.\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static createReadOnlyProperty(property, protectedSetter) {\n      this.prototype._createReadOnlyProperty(property, protectedSetter);\n    }\n\n    /**\n     * Causes the setter for the given property to reflect the property value\n     * to a (dash-cased) attribute of the same name.\n     *\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static createReflectedProperty(property) {\n      this.prototype._createReflectedProperty(property);\n    }\n\n    /**\n     * Creates a computed property whose value is set to the result of the\n     * method described by the given `expression` each time one or more\n     * arguments to the method changes.  The expression should be a string\n     * in the form of a normal JavaScript function signature:\n     * `'methodName(arg1, [..., argn])'`\n     *\n     * @param {string} property Name of computed property to set\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n     *   method names should be included as a dependency to the effect.\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static createComputedProperty(property, expression, dynamicFn) {\n      this.prototype._createComputedProperty(property, expression, dynamicFn);\n    }\n\n    /**\n     * Parses the provided template to ensure binding effects are created\n     * for them, and then ensures property accessors are created for any\n     * dependent properties in the template.  Binding effects for bound\n     * templates are stored in a linked list on the instance so that\n     * templates can be efficiently stamped and unstamped.\n     *\n     * @param {!HTMLTemplateElement} template Template containing binding\n     *   bindings\n     * @return {!TemplateInfo} Template metadata object\n     * @protected\n     * @nocollapse\n     */\n    static bindTemplate(template) {\n      return this.prototype._bindTemplate(template);\n    }\n\n    // -- binding ----------------------------------------------\n\n    /**\n     * Equivalent to static `bindTemplate` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * This method may be called on the prototype (for prototypical template\n     * binding, to avoid creating accessors every instance) once per prototype,\n     * and will be called with `runtimeBinding: true` by `_stampTemplate` to\n     * create and link an instance of the template metadata associated with a\n     * particular stamping.\n     *\n     * @override\n     * @param {!HTMLTemplateElement} template Template containing binding\n     *   bindings\n     * @param {boolean=} instanceBinding When false (default), performs\n     *   \"prototypical\" binding of the template and overwrites any previously\n     *   bound template for the class. When true (as passed from\n     *   `_stampTemplate`), the template info is instanced and linked into\n     *   the list of bound templates.\n     * @return {!TemplateInfo} Template metadata object; for `runtimeBinding`,\n     *   this is an instance of the prototypical template info\n     * @protected\n     * @suppress {missingProperties} go/missingfnprops\n     */\n    _bindTemplate(template, instanceBinding) {\n      let templateInfo = this.constructor._parseTemplate(template);\n      let wasPreBound = this.__templateInfo == templateInfo;\n      // Optimization: since this is called twice for proto-bound templates,\n      // don't attempt to recreate accessors if this template was pre-bound\n      if (!wasPreBound) {\n        for (let prop in templateInfo.propertyEffects) {\n          this._createPropertyAccessor(prop);\n        }\n      }\n      if (instanceBinding) {\n        // For instance-time binding, create instance of template metadata\n        // and link into list of templates if necessary\n        templateInfo = /** @type {!TemplateInfo} */(Object.create(templateInfo));\n        templateInfo.wasPreBound = wasPreBound;\n        if (!wasPreBound && this.__templateInfo) {\n          let last = this.__templateInfoLast || this.__templateInfo;\n          this.__templateInfoLast = last.nextTemplateInfo = templateInfo;\n          templateInfo.previousTemplateInfo = last;\n          return templateInfo;\n        }\n      }\n      return this.__templateInfo = templateInfo;\n    }\n\n    /**\n     * Adds a property effect to the given template metadata, which is run\n     * at the \"propagate\" stage of `_propertiesChanged` when the template\n     * has been bound to the element via `_bindTemplate`.\n     *\n     * The `effect` object should match the format in `_addPropertyEffect`.\n     *\n     * @param {Object} templateInfo Template metadata to add effect to\n     * @param {string} prop Property that should trigger the effect\n     * @param {Object=} effect Effect metadata object\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static _addTemplatePropertyEffect(templateInfo, prop, effect) {\n      let hostProps = templateInfo.hostProps = templateInfo.hostProps || {};\n      hostProps[prop] = true;\n      let effects = templateInfo.propertyEffects = templateInfo.propertyEffects || {};\n      let propEffects = effects[prop] = effects[prop] || [];\n      propEffects.push(effect);\n    }\n\n    /**\n     * Stamps the provided template and performs instance-time setup for\n     * Polymer template features, including data bindings, declarative event\n     * listeners, and the `this.$` map of `id`'s to nodes.  A document fragment\n     * is returned containing the stamped DOM, ready for insertion into the\n     * DOM.\n     *\n     * This method may be called more than once; however note that due to\n     * `shadycss` polyfill limitations, only styles from templates prepared\n     * using `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\n     * to the shadow root and support CSS custom properties), and note that\n     * `ShadyCSS.prepareTemplate` may only be called once per element. As such,\n     * any styles required by in runtime-stamped templates must be included\n     * in the main element template.\n     *\n     * @param {!HTMLTemplateElement} template Template to stamp\n     * @return {!StampedTemplate} Cloned template content\n     * @override\n     * @protected\n     */\n    _stampTemplate(template) {\n      // Ensures that created dom is `_enqueueClient`'d to this element so\n      // that it can be flushed on next call to `_flushProperties`\n      hostStack.beginHosting(this);\n      let dom = super._stampTemplate(template);\n      hostStack.endHosting(this);\n      let templateInfo = /** @type {!TemplateInfo} */(this._bindTemplate(template, true));\n      // Add template-instance-specific data to instanced templateInfo\n      templateInfo.nodeList = dom.nodeList;\n      // Capture child nodes to allow unstamping of non-prototypical templates\n      if (!templateInfo.wasPreBound) {\n        let nodes = templateInfo.childNodes = [];\n        for (let n=dom.firstChild; n; n=n.nextSibling) {\n          nodes.push(n);\n        }\n      }\n      dom.templateInfo = templateInfo;\n      // Setup compound storage, 2-way listeners, and dataHost for bindings\n      setupBindings(this, templateInfo);\n      // Flush properties into template nodes if already booted\n      if (this.__dataReady) {\n        runEffects(this, templateInfo.propertyEffects, this.__data, null,\n          false, templateInfo.nodeList);\n      }\n      return dom;\n    }\n\n    /**\n     * Removes and unbinds the nodes previously contained in the provided\n     * DocumentFragment returned from `_stampTemplate`.\n     *\n     * @override\n     * @param {!StampedTemplate} dom DocumentFragment previously returned\n     *   from `_stampTemplate` associated with the nodes to be removed\n     * @return {void}\n     * @protected\n     */\n    _removeBoundDom(dom) {\n      // Unlink template info\n      let templateInfo = dom.templateInfo;\n      if (templateInfo.previousTemplateInfo) {\n        templateInfo.previousTemplateInfo.nextTemplateInfo =\n          templateInfo.nextTemplateInfo;\n      }\n      if (templateInfo.nextTemplateInfo) {\n        templateInfo.nextTemplateInfo.previousTemplateInfo =\n          templateInfo.previousTemplateInfo;\n      }\n      if (this.__templateInfoLast == templateInfo) {\n        this.__templateInfoLast = templateInfo.previousTemplateInfo;\n      }\n      templateInfo.previousTemplateInfo = templateInfo.nextTemplateInfo = null;\n      // Remove stamped nodes\n      let nodes = templateInfo.childNodes;\n      for (let i=0; i<nodes.length; i++) {\n        let node = nodes[i];\n        node.parentNode.removeChild(node);\n      }\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * parsing bindings from `TextNode`'s' `textContent`.  A `bindings`\n     * array is added to `nodeInfo` and populated with binding metadata\n     * with information capturing the binding target, and a `parts` array\n     * with one or more metadata objects capturing the source(s) of the\n     * binding.\n     *\n     * @param {Node} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     * @nocollapse\n     */\n    static _parseTemplateNode(node, templateInfo, nodeInfo) {\n      // TODO(https://github.com/google/closure-compiler/issues/3240):\n      //     Change back to just super.methodCall()\n      let noted = propertyEffectsBase._parseTemplateNode.call(\n        this, node, templateInfo, nodeInfo);\n      if (node.nodeType === Node.TEXT_NODE) {\n        let parts = this._parseBindings(node.textContent, templateInfo);\n        if (parts) {\n          // Initialize the textContent with any literal parts\n          // NOTE: default to a space here so the textNode remains; some browsers\n          // (IE) omit an empty textNode following cloneNode/importNode.\n          node.textContent = literalFromParts(parts) || ' ';\n          addBinding(this, templateInfo, nodeInfo, 'text', 'textContent', parts);\n          noted = true;\n        }\n      }\n      return noted;\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * parsing bindings from attributes.  A `bindings`\n     * array is added to `nodeInfo` and populated with binding metadata\n     * with information capturing the binding target, and a `parts` array\n     * with one or more metadata objects capturing the source(s) of the\n     * binding.\n     *\n     * @param {Element} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @param {string} name Attribute name\n     * @param {string} value Attribute value\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     * @nocollapse\n     */\n    static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {\n      let parts = this._parseBindings(value, templateInfo);\n      if (parts) {\n        // Attribute or property\n        let origName = name;\n        let kind = 'property';\n        // The only way we see a capital letter here is if the attr has\n        // a capital letter in it per spec. In this case, to make sure\n        // this binding works, we go ahead and make the binding to the attribute.\n        if (capitalAttributeRegex.test(name)) {\n          kind = 'attribute';\n        } else if (name[name.length-1] == '$') {\n          name = name.slice(0, -1);\n          kind = 'attribute';\n        }\n        // Initialize attribute bindings with any literal parts\n        let literal = literalFromParts(parts);\n        if (literal && kind == 'attribute') {\n          // Ensure a ShadyCSS template scoped style is not removed\n          // when a class$ binding's initial literal value is set.\n          if (name == 'class' && node.hasAttribute('class')) {\n            literal += ' ' + node.getAttribute(name);\n          }\n          node.setAttribute(name, literal);\n        }\n        // Clear attribute before removing, since IE won't allow removing\n        // `value` attribute if it previously had a value (can't\n        // unconditionally set '' before removing since attributes with `$`\n        // can't be set using setAttribute)\n        if (node.localName === 'input' && origName === 'value') {\n          node.setAttribute(origName, '');\n        }\n        // Remove annotation\n        node.removeAttribute(origName);\n        // Case hackery: attributes are lower-case, but bind targets\n        // (properties) are case sensitive. Gambit is to map dash-case to\n        // camel-case: `foo-bar` becomes `fooBar`.\n        // Attribute bindings are excepted.\n        if (kind === 'property') {\n          name = dashToCamelCase(name);\n        }\n        addBinding(this, templateInfo, nodeInfo, kind, name, parts, literal);\n        return true;\n      } else {\n        // TODO(https://github.com/google/closure-compiler/issues/3240):\n        //     Change back to just super.methodCall()\n        return propertyEffectsBase._parseTemplateNodeAttribute.call(\n          this, node, templateInfo, nodeInfo, name, value);\n      }\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * binding the properties that a nested template depends on to the template\n     * as `_host_<property>`.\n     *\n     * @param {Node} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     * @nocollapse\n     */\n    static _parseTemplateNestedTemplate(node, templateInfo, nodeInfo) {\n      // TODO(https://github.com/google/closure-compiler/issues/3240):\n      //     Change back to just super.methodCall()\n      let noted = propertyEffectsBase._parseTemplateNestedTemplate.call(\n        this, node, templateInfo, nodeInfo);\n      // Merge host props into outer template and add bindings\n      let hostProps = nodeInfo.templateInfo.hostProps;\n      let mode = '{';\n      for (let source in hostProps) {\n        let parts = [{ mode, source, dependencies: [source] }];\n        addBinding(this, templateInfo, nodeInfo, 'property', '_host_' + source, parts);\n      }\n      return noted;\n    }\n\n    /**\n     * Called to parse text in a template (either attribute values or\n     * textContent) into binding metadata.\n     *\n     * Any overrides of this method should return an array of binding part\n     * metadata  representing one or more bindings found in the provided text\n     * and any \"literal\" text in between.  Any non-literal parts will be passed\n     * to `_evaluateBinding` when any dependencies change.  The only required\n     * fields of each \"part\" in the returned array are as follows:\n     *\n     * - `dependencies` - Array containing trigger metadata for each property\n     *   that should trigger the binding to update\n     * - `literal` - String containing text if the part represents a literal;\n     *   in this case no `dependencies` are needed\n     *\n     * Additional metadata for use by `_evaluateBinding` may be provided in\n     * each part object as needed.\n     *\n     * The default implementation handles the following types of bindings\n     * (one or more may be intermixed with literal strings):\n     * - Property binding: `[[prop]]`\n     * - Path binding: `[[object.prop]]`\n     * - Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n     * - Two-way property or path bindings (supports negation):\n     *   `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n     * - Inline computed method (supports negation):\n     *   `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`\n     *\n     * The default implementation uses a regular expression for best\n     * performance. However, the regular expression uses a white-list of\n     * allowed characters in a data-binding, which causes problems for\n     * data-bindings that do use characters not in this white-list.\n     *\n     * Instead of updating the white-list with all allowed characters,\n     * there is a StrictBindingParser (see lib/mixins/strict-binding-parser)\n     * that uses a state machine instead. This state machine is able to handle\n     * all characters. However, it is slightly less performant, therefore we\n     * extracted it into a separate optional mixin.\n     *\n     * @param {string} text Text to parse from attribute or textContent\n     * @param {Object} templateInfo Current template metadata\n     * @return {Array<!BindingPart>} Array of binding part metadata\n     * @protected\n     * @nocollapse\n     */\n    static _parseBindings(text, templateInfo) {\n      let parts = [];\n      let lastIndex = 0;\n      let m;\n      // Example: \"literal1{{prop}}literal2[[!compute(foo,bar)]]final\"\n      // Regex matches:\n      //        Iteration 1:  Iteration 2:\n      // m[1]: '{{'          '[['\n      // m[2]: ''            '!'\n      // m[3]: 'prop'        'compute(foo,bar)'\n      while ((m = bindingRegex.exec(text)) !== null) {\n        // Add literal part\n        if (m.index > lastIndex) {\n          parts.push({literal: text.slice(lastIndex, m.index)});\n        }\n        // Add binding part\n        let mode = m[1][0];\n        let negate = Boolean(m[2]);\n        let source = m[3].trim();\n        let customEvent = false, notifyEvent = '', colon = -1;\n        if (mode == '{' && (colon = source.indexOf('::')) > 0) {\n          notifyEvent = source.substring(colon + 2);\n          source = source.substring(0, colon);\n          customEvent = true;\n        }\n        let signature = parseMethod(source);\n        let dependencies = [];\n        if (signature) {\n          // Inline computed function\n          let {args, methodName} = signature;\n          for (let i=0; i<args.length; i++) {\n            let arg = args[i];\n            if (!arg.literal) {\n              dependencies.push(arg);\n            }\n          }\n          let dynamicFns = templateInfo.dynamicFns;\n          if (dynamicFns && dynamicFns[methodName] || signature.static) {\n            dependencies.push(methodName);\n            signature.dynamicFn = true;\n          }\n        } else {\n          // Property or path\n          dependencies.push(source);\n        }\n        parts.push({\n          source, mode, negate, customEvent, signature, dependencies,\n          event: notifyEvent\n        });\n        lastIndex = bindingRegex.lastIndex;\n      }\n      // Add a final literal part\n      if (lastIndex && lastIndex < text.length) {\n        let literal = text.substring(lastIndex);\n        if (literal) {\n          parts.push({\n            literal: literal\n          });\n        }\n      }\n      if (parts.length) {\n        return parts;\n      } else {\n        return null;\n      }\n    }\n\n    /**\n     * Called to evaluate a previously parsed binding part based on a set of\n     * one or more changed dependencies.\n     *\n     * @param {!Polymer_PropertyEffects} inst Element that should be used as\n     *     scope for binding dependencies\n     * @param {BindingPart} part Binding part metadata\n     * @param {string} path Property/path that triggered this effect\n     * @param {Object} props Bag of current property changes\n     * @param {Object} oldProps Bag of previous values for changed properties\n     * @param {boolean} hasPaths True with `props` contains one or more paths\n     * @return {*} Value the binding part evaluated to\n     * @protected\n     * @nocollapse\n     */\n    static _evaluateBinding(inst, part, path, props, oldProps, hasPaths) {\n      let value;\n      if (part.signature) {\n        value = runMethodEffect(inst, path, props, oldProps, part.signature);\n      } else if (path != part.source) {\n        value = get(inst, part.source);\n      } else {\n        if (hasPaths && isPath(path)) {\n          value = get(inst, path);\n        } else {\n          value = inst.__data[path];\n        }\n      }\n      if (part.negate) {\n        value = !value;\n      }\n      return value;\n    }\n\n  }\n\n  return PropertyEffects;\n});\n\n/**\n * Helper api for enqueuing client dom created by a host element.\n *\n * By default elements are flushed via `_flushProperties` when\n * `connectedCallback` is called. Elements attach their client dom to\n * themselves at `ready` time which results from this first flush.\n * This provides an ordering guarantee that the client dom an element\n * creates is flushed before the element itself (i.e. client `ready`\n * fires before host `ready`).\n *\n * However, if `_flushProperties` is called *before* an element is connected,\n * as for example `Templatize` does, this ordering guarantee cannot be\n * satisfied because no elements are connected. (Note: Bound elements that\n * receive data do become enqueued clients and are properly ordered but\n * unbound elements are not.)\n *\n * To maintain the desired \"client before host\" ordering guarantee for this\n * case we rely on the \"host stack. Client nodes registers themselves with\n * the creating host element when created. This ensures that all client dom\n * is readied in the proper order, maintaining the desired guarantee.\n *\n * @private\n */\nclass HostStack {\n  constructor() {\n    this.stack = [];\n  }\n\n  /**\n   * @param {*} inst Instance to add to hostStack\n   * @return {void}\n   */\n  registerHost(inst) {\n    if (this.stack.length) {\n      let host = this.stack[this.stack.length-1];\n      host._enqueueClient(inst);\n    }\n  }\n\n  /**\n   * @param {*} inst Instance to begin hosting\n   * @return {void}\n   */\n  beginHosting(inst) {\n    this.stack.push(inst);\n  }\n\n  /**\n   * @param {*} inst Instance to end hosting\n   * @return {void}\n   */\n  endHosting(inst) {\n    let stackLen = this.stack.length;\n    if (stackLen && this.stack[stackLen-1] == inst) {\n      this.stack.pop();\n    }\n  }\n}\nconst hostStack = new HostStack();\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * Total number of Polymer element instances created.\n * @type {number}\n */\nexport let instanceCount = 0;\n\nexport function incrementInstanceCount() {\n  instanceCount++;\n}\n\n/**\n * Array of Polymer element classes that have been finalized.\n * @type {!Array<!PolymerElementConstructor>}\n */\nexport const registrations = [];\n\n/**\n * @param {!PolymerElementConstructor} prototype Element prototype to log\n * @private\n */\nfunction _regLog(prototype) {\n  console.log('[' + /** @type {?} */(prototype).is + ']: registered');\n}\n\n/**\n * Registers a class prototype for telemetry purposes.\n * @param {!PolymerElementConstructor} prototype Element prototype to register\n * @protected\n */\nexport function register(prototype) {\n  registrations.push(prototype);\n}\n\n/**\n * Logs all elements registered with an `is` to the console.\n * @public\n */\nexport function dumpRegistrations() {\n  registrations.forEach(_regLog);\n}","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { register, incrementInstanceCount } from '../utils/telemetry.js';\nimport { PropertiesChanged } from './properties-changed.js';\n\n/**\n * Creates a copy of `props` with each property normalized such that\n * upgraded it is an object with at least a type property { type: Type}.\n *\n * @param {Object} props Properties to normalize\n * @return {Object} Copy of input `props` with normalized properties that\n * are in the form {type: Type}\n * @private\n */\nfunction normalizeProperties(props) {\n  const output = {};\n  for (let p in props) {\n    const o = props[p];\n    output[p] = (typeof o === 'function') ? {type: o} : o;\n  }\n  return output;\n}\n\n/**\n * Mixin that provides a minimal starting point to using the PropertiesChanged\n * mixin by providing a mechanism to declare properties in a static\n * getter (e.g. static get properties() { return { foo: String } }). Changes\n * are reported via the `_propertiesChanged` method.\n *\n * This mixin provides no specific support for rendering. Users are expected\n * to create a ShadowRoot and put content into it and update it in whatever\n * way makes sense. This can be done in reaction to properties changing by\n * implementing `_propertiesChanged`.\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin PropertiesChanged\n * @summary Mixin that provides a minimal starting point for using\n * the PropertiesChanged mixin by providing a declarative `properties` object.\n * @template T\n * @param {function(new:T)} superClass Class to apply mixin to.\n * @return {function(new:T)} superClass with mixin applied.\n */\nexport const PropertiesMixin = dedupingMixin(superClass => {\n\n /**\n  * @constructor\n  * @implements {Polymer_PropertiesChanged}\n  * @private\n  */\n const base = PropertiesChanged(superClass);\n\n /**\n  * Returns the super class constructor for the given class, if it is an\n  * instance of the PropertiesMixin.\n  *\n  * @param {!PropertiesMixinConstructor} constructor PropertiesMixin constructor\n  * @return {?PropertiesMixinConstructor} Super class constructor\n  */\n function superPropertiesClass(constructor) {\n   const superCtor = Object.getPrototypeOf(constructor);\n\n   // Note, the `PropertiesMixin` class below only refers to the class\n   // generated by this call to the mixin; the instanceof test only works\n   // because the mixin is deduped and guaranteed only to apply once, hence\n   // all constructors in a proto chain will see the same `PropertiesMixin`\n   return (superCtor.prototype instanceof PropertiesMixin) ?\n     /** @type {!PropertiesMixinConstructor} */ (superCtor) : null;\n }\n\n /**\n  * Returns a memoized version of the `properties` object for the\n  * given class. Properties not in object format are converted to at\n  * least {type}.\n  *\n  * @param {PropertiesMixinConstructor} constructor PropertiesMixin constructor\n  * @return {Object} Memoized properties object\n  */\n function ownProperties(constructor) {\n   if (!constructor.hasOwnProperty(JSCompiler_renameProperty('__ownProperties', constructor))) {\n     let props = null;\n\n     if (constructor.hasOwnProperty(JSCompiler_renameProperty('properties', constructor))) {\n       const properties = constructor.properties;\n\n       if (properties) {\n        props = normalizeProperties(properties);\n       }\n     }\n\n     constructor.__ownProperties = props;\n   }\n   return constructor.__ownProperties;\n }\n\n /**\n  * @polymer\n  * @mixinClass\n  * @extends {base}\n  * @implements {Polymer_PropertiesMixin}\n  * @unrestricted\n  */\n class PropertiesMixin extends base {\n\n   /**\n    * Implements standard custom elements getter to observes the attributes\n    * listed in `properties`.\n    * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n    * @nocollapse\n    */\n   static get observedAttributes() {\n     if (!this.hasOwnProperty(JSCompiler_renameProperty('__observedAttributes', this))) {\n       register(this.prototype);\n       const props = this._properties;\n       this.__observedAttributes = props ? Object.keys(props).map(p => this.attributeNameForProperty(p)) : [];\n     }\n     return this.__observedAttributes;\n   }\n\n   /**\n    * Finalizes an element definition, including ensuring any super classes\n    * are also finalized. This includes ensuring property\n    * accessors exist on the element prototype. This method calls\n    * `_finalizeClass` to finalize each constructor in the prototype chain.\n    * @return {void}\n    * @nocollapse\n    */\n   static finalize() {\n     if (!this.hasOwnProperty(JSCompiler_renameProperty('__finalized', this))) {\n       const superCtor = superPropertiesClass(/** @type {!PropertiesMixinConstructor} */(this));\n       if (superCtor) {\n         superCtor.finalize();\n       }\n       this.__finalized = true;\n       this._finalizeClass();\n     }\n   }\n\n   /**\n    * Finalize an element class. This includes ensuring property\n    * accessors exist on the element prototype. This method is called by\n    * `finalize` and finalizes the class constructor.\n    *\n    * @protected\n    * @nocollapse\n    */\n   static _finalizeClass() {\n     const props = ownProperties(/** @type {!PropertiesMixinConstructor} */(this));\n     if (props) {\n       /** @type {?} */ (this).createProperties(props);\n     }\n   }\n\n   /**\n    * Returns a memoized version of all properties, including those inherited\n    * from super classes. Properties not in object format are converted to\n    * at least {type}.\n    *\n    * @return {Object} Object containing properties for this class\n    * @protected\n    * @nocollapse\n    */\n   static get _properties() {\n     if (!this.hasOwnProperty(\n       JSCompiler_renameProperty('__properties', this))) {\n       const superCtor = superPropertiesClass(/** @type {!PropertiesMixinConstructor} */(this));\n       this.__properties = Object.assign({},\n         superCtor && superCtor._properties,\n         ownProperties(/** @type {PropertiesMixinConstructor} */(this)));\n     }\n     return this.__properties;\n   }\n\n   /**\n    * Overrides `PropertiesChanged` method to return type specified in the\n    * static `properties` object for the given property.\n    * @param {string} name Name of property\n    * @return {*} Type to which to deserialize attribute\n    *\n    * @protected\n    * @nocollapse\n    */\n   static typeForProperty(name) {\n     const info = this._properties[name];\n     return info && info.type;\n   }\n\n   /**\n    * Overrides `PropertiesChanged` method and adds a call to\n    * `finalize` which lazily configures the element's property accessors.\n    * @override\n    * @return {void}\n    */\n   _initializeProperties() {\n     incrementInstanceCount();\n     this.constructor.finalize();\n     super._initializeProperties();\n   }\n\n   /**\n    * Called when the element is added to a document.\n    * Calls `_enableProperties` to turn on property system from\n    * `PropertiesChanged`.\n    * @suppress {missingProperties} Super may or may not implement the callback\n    * @return {void}\n    * @override\n    */\n   connectedCallback() {\n     if (super.connectedCallback) {\n       super.connectedCallback();\n     }\n     this._enableProperties();\n   }\n\n   /**\n    * Called when the element is removed from a document\n    * @suppress {missingProperties} Super may or may not implement the callback\n    * @return {void}\n    * @override\n    */\n   disconnectedCallback() {\n     if (super.disconnectedCallback) {\n       super.disconnectedCallback();\n     }\n   }\n\n }\n\n return PropertiesMixin;\n\n});\n","/**\n * @fileoverview\n * @suppress {checkPrototypalTypes}\n * @license Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt The complete set of authors may be found\n * at http://polymer.github.io/AUTHORS.txt The complete set of contributors may\n * be found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by\n * Google as part of the polymer project is also subject to an additional IP\n * rights grant found at http://polymer.github.io/PATENTS.txt\n */\nimport '../utils/boot.js';\n\nimport { rootPath, strictTemplatePolicy, allowTemplateFromDomModule, legacyOptimizations, syncInitialRender } from '../utils/settings.js';\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { stylesFromTemplate, stylesFromModuleImports } from '../utils/style-gather.js';\nimport { pathFromUrl, resolveCss, resolveUrl } from '../utils/resolve-url.js';\nimport { DomModule } from '../elements/dom-module.js';\nimport { PropertyEffects } from './property-effects.js';\nimport { PropertiesMixin } from './properties-mixin.js';\nimport { wrap } from '../utils/wrap.js';\n\n/**\n * Current Polymer version in Semver notation.\n * @type {string} Semver notation of the current version of Polymer.\n */\nexport const version = '3.3.1';\n\nconst builtCSS = window.ShadyCSS && window.ShadyCSS['cssBuild'];\n\n/**\n * Element class mixin that provides the core API for Polymer's meta-programming\n * features including template stamping, data-binding, attribute deserialization,\n * and property change observation.\n *\n * Subclassers may provide the following static getters to return metadata\n * used to configure Polymer's features for the class:\n *\n * - `static get is()`: When the template is provided via a `dom-module`,\n *   users should return the `dom-module` id from a static `is` getter.  If\n *   no template is needed or the template is provided directly via the\n *   `template` getter, there is no need to define `is` for the element.\n *\n * - `static get template()`: Users may provide the template directly (as\n *   opposed to via `dom-module`) by implementing a static `template` getter.\n *   The getter must return an `HTMLTemplateElement`.\n *\n * - `static get properties()`: Should return an object describing\n *   property-related metadata used by Polymer features (key: property name\n *   value: object containing property metadata). Valid keys in per-property\n *   metadata include:\n *   - `type` (String|Number|Object|Array|...): Used by\n *     `attributeChangedCallback` to determine how string-based attributes\n *     are deserialized to JavaScript property values.\n *   - `notify` (boolean): Causes a change in the property to fire a\n *     non-bubbling event called `<property>-changed`. Elements that have\n *     enabled two-way binding to the property use this event to observe changes.\n *   - `readOnly` (boolean): Creates a getter for the property, but no setter.\n *     To set a read-only property, use the private setter method\n *     `_setProperty(property, value)`.\n *   - `observer` (string): Observer method name that will be called when\n *     the property changes. The arguments of the method are\n *     `(value, previousValue)`.\n *   - `computed` (string): String describing method and dependent properties\n *     for computing the value of this property (e.g. `'computeFoo(bar, zot)'`).\n *     Computed properties are read-only by default and can only be changed\n *     via the return value of the computing method.\n *\n * - `static get observers()`: Array of strings describing multi-property\n *   observer methods and their dependent properties (e.g.\n *   `'observeABC(a, b, c)'`).\n *\n * The base class provides default implementations for the following standard\n * custom element lifecycle callbacks; users may override these, but should\n * call the super method to ensure\n * - `constructor`: Run when the element is created or upgraded\n * - `connectedCallback`: Run each time the element is connected to the\n *   document\n * - `disconnectedCallback`: Run each time the element is disconnected from\n *   the document\n * - `attributeChangedCallback`: Run each time an attribute in\n *   `observedAttributes` is set or removed (note: this element's default\n *   `observedAttributes` implementation will automatically return an array\n *   of dash-cased attributes based on `properties`)\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin PropertyEffects\n * @appliesMixin PropertiesMixin\n * @property rootPath {string} Set to the value of `rootPath`,\n *   which defaults to the main document path\n * @property importPath {string} Set to the value of the class's static\n *   `importPath` property, which defaults to the path of this element's\n *   `dom-module` (when `is` is used), but can be overridden for other\n *   import strategies.\n * @summary Element class mixin that provides the core API for Polymer's\n * meta-programming features.\n * @template T\n * @param {function(new:T)} superClass Class to apply mixin to.\n * @return {function(new:T)} superClass with mixin applied.\n */\nexport const ElementMixin = dedupingMixin(base => {\n  /**\n   * @constructor\n   * @implements {Polymer_PropertyEffects}\n   * @implements {Polymer_PropertiesMixin}\n   * @extends {HTMLElement}\n   * @private\n   */\n  const polymerElementBase = PropertiesMixin(PropertyEffects(base));\n\n  /**\n   * Returns a list of properties with default values.\n   * This list is created as an optimization since it is a subset of\n   * the list returned from `_properties`.\n   * This list is used in `_initializeProperties` to set property defaults.\n   *\n   * @param {PolymerElementConstructor} constructor Element class\n   * @return {PolymerElementProperties} Flattened properties for this class\n   *   that have default values\n   * @private\n   */\n  function propertyDefaults(constructor) {\n    if (!constructor.hasOwnProperty(\n      JSCompiler_renameProperty('__propertyDefaults', constructor))) {\n      constructor.__propertyDefaults = null;\n      let props = constructor._properties;\n      for (let p in props) {\n        let info = props[p];\n        if ('value' in info) {\n          constructor.__propertyDefaults = constructor.__propertyDefaults || {};\n          constructor.__propertyDefaults[p] = info;\n        }\n      }\n    }\n    return constructor.__propertyDefaults;\n  }\n\n  /**\n   * Returns a memoized version of the `observers` array.\n   * @param {PolymerElementConstructor} constructor Element class\n   * @return {Array} Array containing own observers for the given class\n   * @protected\n   */\n  function ownObservers(constructor) {\n    if (!constructor.hasOwnProperty(\n      JSCompiler_renameProperty('__ownObservers', constructor))) {\n      constructor.__ownObservers =\n          constructor.hasOwnProperty(\n              JSCompiler_renameProperty('observers', constructor)) ?\n          /** @type {PolymerElementConstructor} */ (constructor).observers :\n          null;\n    }\n    return constructor.__ownObservers;\n  }\n\n  /**\n   * Creates effects for a property.\n   *\n   * Note, once a property has been set to\n   * `readOnly`, `computed`, `reflectToAttribute`, or `notify`\n   * these values may not be changed. For example, a subclass cannot\n   * alter these settings. However, additional `observers` may be added\n   * by subclasses.\n   *\n   * The info object should contain property metadata as follows:\n   *\n   * * `type`: {function} type to which an attribute matching the property\n   * is deserialized. Note the property is camel-cased from a dash-cased\n   * attribute. For example, 'foo-bar' attribute is deserialized to a\n   * property named 'fooBar'.\n   *\n   * * `readOnly`: {boolean} creates a readOnly property and\n   * makes a private setter for the private of the form '_setFoo' for a\n   * property 'foo',\n   *\n   * * `computed`: {string} creates a computed property. A computed property\n   * is also automatically set to `readOnly: true`. The value is calculated\n   * by running a method and arguments parsed from the given string. For\n   * example 'compute(foo)' will compute a given property when the\n   * 'foo' property changes by executing the 'compute' method. This method\n   * must return the computed value.\n   *\n   * * `reflectToAttribute`: {boolean} If true, the property value is reflected\n   * to an attribute of the same name. Note, the attribute is dash-cased\n   * so a property named 'fooBar' is reflected as 'foo-bar'.\n   *\n   * * `notify`: {boolean} sends a non-bubbling notification event when\n   * the property changes. For example, a property named 'foo' sends an\n   * event named 'foo-changed' with `event.detail` set to the value of\n   * the property.\n   *\n   * * observer: {string} name of a method that runs when the property\n   * changes. The arguments of the method are (value, previousValue).\n   *\n   * Note: Users may want control over modifying property\n   * effects via subclassing. For example, a user might want to make a\n   * reflectToAttribute property not do so in a subclass. We've chosen to\n   * disable this because it leads to additional complication.\n   * For example, a readOnly effect generates a special setter. If a subclass\n   * disables the effect, the setter would fail unexpectedly.\n   * Based on feedback, we may want to try to make effects more malleable\n   * and/or provide an advanced api for manipulating them.\n   *\n   * @param {!PolymerElement} proto Element class prototype to add accessors\n   *   and effects to\n   * @param {string} name Name of the property.\n   * @param {Object} info Info object from which to create property effects.\n   * Supported keys:\n   * @param {Object} allProps Flattened map of all properties defined in this\n   *   element (including inherited properties)\n   * @return {void}\n   * @private\n   */\n  function createPropertyFromConfig(proto, name, info, allProps) {\n    // computed forces readOnly...\n    if (info.computed) {\n      info.readOnly = true;\n    }\n    // Note, since all computed properties are readOnly, this prevents\n    // adding additional computed property effects (which leads to a confusing\n    // setup where multiple triggers for setting a property)\n    // While we do have `hasComputedEffect` this is set on the property's\n    // dependencies rather than itself.\n    if (info.computed) {\n      if (proto._hasReadOnlyEffect(name)) {\n        console.warn(`Cannot redefine computed property '${name}'.`);\n      } else {\n        proto._createComputedProperty(name, info.computed, allProps);\n      }\n    }\n    if (info.readOnly && !proto._hasReadOnlyEffect(name)) {\n      proto._createReadOnlyProperty(name, !info.computed);\n    } else if (info.readOnly === false && proto._hasReadOnlyEffect(name)) {\n      console.warn(`Cannot make readOnly property '${name}' non-readOnly.`);\n    }\n    if (info.reflectToAttribute && !proto._hasReflectEffect(name)) {\n      proto._createReflectedProperty(name);\n    } else if (info.reflectToAttribute === false && proto._hasReflectEffect(name)) {\n      console.warn(`Cannot make reflected property '${name}' non-reflected.`);\n    }\n    if (info.notify && !proto._hasNotifyEffect(name)) {\n      proto._createNotifyingProperty(name);\n    } else if (info.notify === false && proto._hasNotifyEffect(name)) {\n      console.warn(`Cannot make notify property '${name}' non-notify.`);\n    }\n    // always add observer\n    if (info.observer) {\n      proto._createPropertyObserver(name, info.observer, allProps[info.observer]);\n    }\n    // always create the mapping from attribute back to property for deserialization.\n    proto._addPropertyToAttributeMap(name);\n  }\n\n  /**\n   * Process all style elements in the element template. Styles with the\n   * `include` attribute are processed such that any styles in\n   * the associated \"style modules\" are included in the element template.\n   * @param {PolymerElementConstructor} klass Element class\n   * @param {!HTMLTemplateElement} template Template to process\n   * @param {string} is Name of element\n   * @param {string} baseURI Base URI for element\n   * @private\n   */\n  function processElementStyles(klass, template, is, baseURI) {\n    if (!builtCSS) {\n      const templateStyles = template.content.querySelectorAll('style');\n      const stylesWithImports = stylesFromTemplate(template);\n      // insert styles from <link rel=\"import\" type=\"css\"> at the top of the template\n      const linkedStyles = stylesFromModuleImports(is);\n      const firstTemplateChild = template.content.firstElementChild;\n      for (let idx = 0; idx < linkedStyles.length; idx++) {\n        let s = linkedStyles[idx];\n        s.textContent = klass._processStyleText(s.textContent, baseURI);\n        template.content.insertBefore(s, firstTemplateChild);\n      }\n      // keep track of the last \"concrete\" style in the template we have encountered\n      let templateStyleIndex = 0;\n      // ensure all gathered styles are actually in this template.\n      for (let i = 0; i < stylesWithImports.length; i++) {\n        let s = stylesWithImports[i];\n        let templateStyle = templateStyles[templateStyleIndex];\n        // if the style is not in this template, it's been \"included\" and\n        // we put a clone of it in the template before the style that included it\n        if (templateStyle !== s) {\n          s = s.cloneNode(true);\n          templateStyle.parentNode.insertBefore(s, templateStyle);\n        } else {\n          templateStyleIndex++;\n        }\n        s.textContent = klass._processStyleText(s.textContent, baseURI);\n      }\n    }\n    if (window.ShadyCSS) {\n      window.ShadyCSS.prepareTemplate(template, is);\n    }\n  }\n\n  /**\n   * Look up template from dom-module for element\n   *\n   * @param {string} is Element name to look up\n   * @return {?HTMLTemplateElement|undefined} Template found in dom module, or\n   *   undefined if not found\n   * @protected\n   */\n  function getTemplateFromDomModule(is) {\n    let template = null;\n    // Under strictTemplatePolicy in 3.x+, dom-module lookup is only allowed\n    // when opted-in via allowTemplateFromDomModule\n    if (is && (!strictTemplatePolicy || allowTemplateFromDomModule)) {\n      template = /** @type {?HTMLTemplateElement} */ (\n          DomModule.import(is, 'template'));\n      // Under strictTemplatePolicy, require any element with an `is`\n      // specified to have a dom-module\n      if (strictTemplatePolicy && !template) {\n        throw new Error(`strictTemplatePolicy: expecting dom-module or null template for ${is}`);\n      }\n    }\n    return template;\n  }\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @unrestricted\n   * @implements {Polymer_ElementMixin}\n   * @extends {polymerElementBase}\n   */\n  class PolymerElement extends polymerElementBase {\n\n    /**\n     * Current Polymer version in Semver notation.\n     * @type {string} Semver notation of the current version of Polymer.\n     * @nocollapse\n     */\n    static get polymerElementVersion() {\n      return version;\n    }\n\n    /**\n     * Override of PropertiesMixin _finalizeClass to create observers and\n     * find the template.\n     * @return {void}\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     * @nocollapse\n     */\n    static _finalizeClass() {\n      // TODO(https://github.com/google/closure-compiler/issues/3240):\n      //     Change back to just super.methodCall()\n      polymerElementBase._finalizeClass.call(this);\n      const observers = ownObservers(this);\n      if (observers) {\n        this.createObservers(observers, this._properties);\n      }\n      this._prepareTemplate();\n    }\n\n    /** @nocollapse */\n    static _prepareTemplate() {\n      // note: create \"working\" template that is finalized at instance time\n      let template = /** @type {PolymerElementConstructor} */ (this).template;\n      if (template) {\n        if (typeof template === 'string') {\n          console.error('template getter must return HTMLTemplateElement');\n          template = null;\n        } else if (!legacyOptimizations) {\n          template = template.cloneNode(true);\n        }\n      }\n\n      /** @override */\n      this.prototype._template = template;\n    }\n\n    /**\n     * Override of PropertiesChanged createProperties to create accessors\n     * and property effects for all of the properties.\n     * @param {!Object} props .\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static createProperties(props) {\n      for (let p in props) {\n        createPropertyFromConfig(\n            /** @type {?} */ (this.prototype), p, props[p], props);\n      }\n    }\n\n    /**\n     * Creates observers for the given `observers` array.\n     * Leverages `PropertyEffects` to create observers.\n     * @param {Object} observers Array of observer descriptors for\n     *   this class\n     * @param {Object} dynamicFns Object containing keys for any properties\n     *   that are functions and should trigger the effect when the function\n     *   reference is changed\n     * @return {void}\n     * @protected\n     * @nocollapse\n     */\n    static createObservers(observers, dynamicFns) {\n      const proto = this.prototype;\n      for (let i=0; i < observers.length; i++) {\n        proto._createMethodObserver(observers[i], dynamicFns);\n      }\n    }\n\n    /**\n     * Returns the template that will be stamped into this element's shadow root.\n     *\n     * If a `static get is()` getter is defined, the default implementation\n     * will return the first `<template>` in a `dom-module` whose `id`\n     * matches this element's `is`.\n     *\n     * Users may override this getter to return an arbitrary template\n     * (in which case the `is` getter is unnecessary). The template returned\n     * must be an `HTMLTemplateElement`.\n     *\n     * Note that when subclassing, if the super class overrode the default\n     * implementation and the subclass would like to provide an alternate\n     * template via a `dom-module`, it should override this getter and\n     * return `DomModule.import(this.is, 'template')`.\n     *\n     * If a subclass would like to modify the super class template, it should\n     * clone it rather than modify it in place.  If the getter does expensive\n     * work such as cloning/modifying a template, it should memoize the\n     * template for maximum performance:\n     *\n     *   let memoizedTemplate;\n     *   class MySubClass extends MySuperClass {\n     *     static get template() {\n     *       if (!memoizedTemplate) {\n     *         memoizedTemplate = super.template.cloneNode(true);\n     *         let subContent = document.createElement('div');\n     *         subContent.textContent = 'This came from MySubClass';\n     *         memoizedTemplate.content.appendChild(subContent);\n     *       }\n     *       return memoizedTemplate;\n     *     }\n     *   }\n     *\n     * @return {!HTMLTemplateElement|string} Template to be stamped\n     * @nocollapse\n     */\n    static get template() {\n      // Explanation of template-related properties:\n      // - constructor.template (this getter): the template for the class.\n      //     This can come from the prototype (for legacy elements), from a\n      //     dom-module, or from the super class's template (or can be overridden\n      //     altogether by the user)\n      // - constructor._template: memoized version of constructor.template\n      // - prototype._template: working template for the element, which will be\n      //     parsed and modified in place. It is a cloned version of\n      //     constructor.template, saved in _finalizeClass(). Note that before\n      //     this getter is called, for legacy elements this could be from a\n      //     _template field on the info object passed to Polymer(), a behavior,\n      //     or set in registered(); once the static getter runs, a clone of it\n      //     will overwrite it on the prototype as the working template.\n      if (!this.hasOwnProperty(JSCompiler_renameProperty('_template', this))) {\n        this._template =\n          // If user has put template on prototype (e.g. in legacy via registered\n          // callback or info object), prefer that first\n          this.prototype.hasOwnProperty(JSCompiler_renameProperty('_template', this.prototype)) ?\n          this.prototype._template :\n          // Look in dom-module associated with this element's is\n          (getTemplateFromDomModule(/** @type {PolymerElementConstructor}*/ (this).is) ||\n          // Next look for superclass template (call the super impl this\n          // way so that `this` points to the superclass)\n          Object.getPrototypeOf(/** @type {PolymerElementConstructor}*/ (this).prototype).constructor.template);\n      }\n      return this._template;\n    }\n\n    /**\n     * Set the template.\n     *\n     * @param {!HTMLTemplateElement|string} value Template to set.\n     * @nocollapse\n     */\n    static set template(value) {\n      this._template = value;\n    }\n\n    /**\n     * Path matching the url from which the element was imported.\n     *\n     * This path is used to resolve url's in template style cssText.\n     * The `importPath` property is also set on element instances and can be\n     * used to create bindings relative to the import path.\n     *\n     * For elements defined in ES modules, users should implement\n     * `static get importMeta() { return import.meta; }`, and the default\n     * implementation of `importPath` will  return `import.meta.url`'s path.\n     * For elements defined in HTML imports, this getter will return the path\n     * to the document containing a `dom-module` element matching this\n     * element's static `is` property.\n     *\n     * Note, this path should contain a trailing `/`.\n     *\n     * @return {string} The import path for this element class\n     * @suppress {missingProperties}\n     * @nocollapse\n     */\n    static get importPath() {\n      if (!this.hasOwnProperty(JSCompiler_renameProperty('_importPath', this))) {\n        const meta = this.importMeta;\n        if (meta) {\n          this._importPath = pathFromUrl(meta.url);\n        } else {\n          const module = DomModule.import(/** @type {PolymerElementConstructor} */ (this).is);\n          this._importPath = (module && module.assetpath) ||\n            Object.getPrototypeOf(/** @type {PolymerElementConstructor}*/ (this).prototype).constructor.importPath;\n        }\n      }\n      return this._importPath;\n    }\n\n    constructor() {\n      super();\n      /** @type {HTMLTemplateElement} */\n      this._template;\n      /** @type {string} */\n      this._importPath;\n      /** @type {string} */\n      this.rootPath;\n      /** @type {string} */\n      this.importPath;\n      /** @type {StampedTemplate | HTMLElement | ShadowRoot} */\n      this.root;\n      /** @type {!Object<string, !Element>} */\n      this.$;\n    }\n\n    /**\n     * Overrides the default `PropertyAccessors` to ensure class\n     * metaprogramming related to property accessors and effects has\n     * completed (calls `finalize`).\n     *\n     * It also initializes any property defaults provided via `value` in\n     * `properties` metadata.\n     *\n     * @return {void}\n     * @override\n     * @suppress {invalidCasts,missingProperties} go/missingfnprops\n     */\n    _initializeProperties() {\n      this.constructor.finalize();\n      // note: finalize template when we have access to `localName` to\n      // avoid dependence on `is` for polyfilling styling.\n      this.constructor._finalizeTemplate(/** @type {!HTMLElement} */(this).localName);\n      super._initializeProperties();\n      // set path defaults\n      this.rootPath = rootPath;\n      this.importPath = this.constructor.importPath;\n      // apply property defaults...\n      let p$ = propertyDefaults(this.constructor);\n      if (!p$) {\n        return;\n      }\n      for (let p in p$) {\n        let info = p$[p];\n        // Don't set default value if there is already an own property, which\n        // happens when a `properties` property with default but no effects had\n        // a property set (e.g. bound) by its host before upgrade\n        if (!this.hasOwnProperty(p)) {\n          let value = typeof info.value == 'function' ?\n            info.value.call(this) :\n            info.value;\n          // Set via `_setProperty` if there is an accessor, to enable\n          // initializing readOnly property defaults\n          if (this._hasAccessor(p)) {\n            this._setPendingProperty(p, value, true);\n          } else {\n            this[p] = value;\n          }\n        }\n      }\n    }\n\n    /**\n     * Gather style text for a style element in the template.\n     *\n     * @param {string} cssText Text containing styling to process\n     * @param {string} baseURI Base URI to rebase CSS paths against\n     * @return {string} The processed CSS text\n     * @protected\n     * @nocollapse\n     */\n    static _processStyleText(cssText, baseURI) {\n      return resolveCss(cssText, baseURI);\n    }\n\n    /**\n    * Configures an element `proto` to function with a given `template`.\n    * The element name `is` and extends `ext` must be specified for ShadyCSS\n    * style scoping.\n    *\n    * @param {string} is Tag name (or type extension name) for this element\n    * @return {void}\n    * @protected\n    * @nocollapse\n    */\n    static _finalizeTemplate(is) {\n      /** @const {HTMLTemplateElement} */\n      const template = this.prototype._template;\n      if (template && !template.__polymerFinalized) {\n        template.__polymerFinalized = true;\n        const importPath = this.importPath;\n        const baseURI = importPath ? resolveUrl(importPath) : '';\n        // e.g. support `include=\"module-name\"`, and ShadyCSS\n        processElementStyles(this, template, is, baseURI);\n        this.prototype._bindTemplate(template);\n      }\n    }\n\n    /**\n     * Provides a default implementation of the standard Custom Elements\n     * `connectedCallback`.\n     *\n     * The default implementation enables the property effects system and\n     * flushes any pending properties, and updates shimmed CSS properties\n     * when using the ShadyCSS scoping/custom properties polyfill.\n     *\n     * @override\n     * @suppress {missingProperties, invalidCasts} Super may or may not\n     *     implement the callback\n     * @return {void}\n     */\n    connectedCallback() {\n      if (window.ShadyCSS && this._template) {\n        window.ShadyCSS.styleElement(/** @type {!HTMLElement} */(this));\n      }\n      super.connectedCallback();\n    }\n\n    /**\n     * Stamps the element template.\n     *\n     * @return {void}\n     * @override\n     */\n    ready() {\n      if (this._template) {\n        this.root = this._stampTemplate(this._template);\n        this.$ = this.root.$;\n      }\n      super.ready();\n    }\n\n    /**\n     * Implements `PropertyEffects`'s `_readyClients` call. Attaches\n     * element dom by calling `_attachDom` with the dom stamped from the\n     * element's template via `_stampTemplate`. Note that this allows\n     * client dom to be attached to the element prior to any observers\n     * running.\n     *\n     * @return {void}\n     * @override\n     */\n    _readyClients() {\n      if (this._template) {\n        this.root = this._attachDom(/** @type {StampedTemplate} */(this.root));\n      }\n      // The super._readyClients here sets the clients initialized flag.\n      // We must wait to do this until after client dom is created/attached\n      // so that this flag can be checked to prevent notifications fired\n      // during this process from being handled before clients are ready.\n      super._readyClients();\n    }\n\n\n    /**\n     * Attaches an element's stamped dom to itself. By default,\n     * this method creates a `shadowRoot` and adds the dom to it.\n     * However, this method may be overridden to allow an element\n     * to put its dom in another location.\n     *\n     * @override\n     * @throws {Error}\n     * @suppress {missingReturn}\n     * @param {StampedTemplate} dom to attach to the element.\n     * @return {ShadowRoot} node to which the dom has been attached.\n     */\n    _attachDom(dom) {\n      const n = wrap(this);\n      if (n.attachShadow) {\n        if (dom) {\n          if (!n.shadowRoot) {\n            n.attachShadow({mode: 'open', shadyUpgradeFragment: dom});\n            n.shadowRoot.appendChild(dom);\n          }\n          if (syncInitialRender && window.ShadyDOM) {\n            window.ShadyDOM.flushInitial(n.shadowRoot);\n          }\n          return n.shadowRoot;\n        }\n        return null;\n      } else {\n        throw new Error('ShadowDOM not available. ' +\n          // TODO(sorvell): move to compile-time conditional when supported\n        'PolymerElement can create dom as children instead of in ' +\n        'ShadowDOM by setting `this.root = this;\\` before \\`ready\\`.');\n      }\n    }\n\n    /**\n     * When using the ShadyCSS scoping and custom property shim, causes all\n     * shimmed styles in this element (and its subtree) to be updated\n     * based on current custom property values.\n     *\n     * The optional parameter overrides inline custom property styles with an\n     * object of properties where the keys are CSS properties, and the values\n     * are strings.\n     *\n     * Example: `this.updateStyles({'--color': 'blue'})`\n     *\n     * These properties are retained unless a value of `null` is set.\n     *\n     * Note: This function does not support updating CSS mixins.\n     * You can not dynamically change the value of an `@apply`.\n     *\n     * @override\n     * @param {Object=} properties Bag of custom property key/values to\n     *   apply to this element.\n     * @return {void}\n     * @suppress {invalidCasts}\n     */\n    updateStyles(properties) {\n      if (window.ShadyCSS) {\n        window.ShadyCSS.styleSubtree(/** @type {!HTMLElement} */(this), properties);\n      }\n    }\n\n    /**\n     * Rewrites a given URL relative to a base URL. The base URL defaults to\n     * the original location of the document containing the `dom-module` for\n     * this element. This method will return the same URL before and after\n     * bundling.\n     *\n     * Note that this function performs no resolution for URLs that start\n     * with `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\n     * URL resolution, use `window.URL`.\n     *\n     * @override\n     * @param {string} url URL to resolve.\n     * @param {string=} base Optional base URL to resolve against, defaults\n     * to the element's `importPath`\n     * @return {string} Rewritten URL relative to base\n     */\n    resolveUrl(url, base) {\n      if (!base && this.importPath) {\n        base = resolveUrl(this.importPath);\n      }\n      return resolveUrl(url, base);\n    }\n\n    /**\n     * Overrides `PropertyEffects` to add map of dynamic functions on\n     * template info, for consumption by `PropertyEffects` template binding\n     * code. This map determines which method templates should have accessors\n     * created for them.\n     *\n     * @param {!HTMLTemplateElement} template Template\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} .\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     * @nocollapse\n     */\n    static _parseTemplateContent(template, templateInfo, nodeInfo) {\n      templateInfo.dynamicFns = templateInfo.dynamicFns || this._properties;\n      // TODO(https://github.com/google/closure-compiler/issues/3240):\n      //     Change back to just super.methodCall()\n      return polymerElementBase._parseTemplateContent.call(\n        this, template, templateInfo, nodeInfo);\n    }\n\n    /**\n     * Overrides `PropertyEffects` to warn on use of undeclared properties in\n     * template.\n     *\n     * @param {Object} templateInfo Template metadata to add effect to\n     * @param {string} prop Property that should trigger the effect\n     * @param {Object=} effect Effect metadata object\n     * @return {void}\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     * @nocollapse\n     */\n    static _addTemplatePropertyEffect(templateInfo, prop, effect) {\n      // Warn if properties are used in template without being declared.\n      // Properties must be listed in `properties` to be included in\n      // `observedAttributes` since CE V1 reads that at registration time, and\n      // since we want to keep template parsing lazy, we can't automatically\n      // add undeclared properties used in templates to `observedAttributes`.\n      // The warning is only enabled in `legacyOptimizations` mode, since\n      // we don't want to spam existing users who might have adopted the\n      // shorthand when attribute deserialization is not important.\n      if (legacyOptimizations && !(prop in this._properties)) {\n        console.warn(`Property '${prop}' used in template but not declared in 'properties'; ` +\n          `attribute will not be observed.`);\n      }\n      // TODO(https://github.com/google/closure-compiler/issues/3240):\n      //     Change back to just super.methodCall()\n      return polymerElementBase._addTemplatePropertyEffect.call(\n        this, templateInfo, prop, effect);\n    }\n\n  }\n\n  return PolymerElement;\n});\n\n/**\n * When using the ShadyCSS scoping and custom property shim, causes all\n * shimmed `styles` (via `custom-style`) in the document (and its subtree)\n * to be updated based on current custom property values.\n *\n * The optional parameter overrides inline custom property styles with an\n * object of properties where the keys are CSS properties, and the values\n * are strings.\n *\n * Example: `updateStyles({'--color': 'blue'})`\n *\n * These properties are retained unless a value of `null` is set.\n *\n * @param {Object=} props Bag of custom property key/values to\n *   apply to the document.\n * @return {void}\n */\nexport const updateStyles = function(props) {\n  if (window.ShadyCSS) {\n    window.ShadyCSS.styleDocument(props);\n  }\n};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\n/**\n * Class representing a static string value which can be used to filter\n * strings by asseting that they have been created via this class. The\n * `value` property returns the string passed to the constructor.\n */\nclass LiteralString {\n  constructor(string) {\n    /** @type {string} */\n    this.value = string.toString();\n  }\n  /**\n   * @return {string} LiteralString string value\n   * @override\n   */\n  toString() {\n    return this.value;\n  }\n}\n\n/**\n * @param {*} value Object to stringify into HTML\n * @return {string} HTML stringified form of `obj`\n */\nfunction literalValue(value) {\n  if (value instanceof LiteralString) {\n    return /** @type {!LiteralString} */(value).value;\n  } else {\n    throw new Error(\n        `non-literal value passed to Polymer's htmlLiteral function: ${value}`\n    );\n  }\n}\n\n/**\n * @param {*} value Object to stringify into HTML\n * @return {string} HTML stringified form of `obj`\n */\nfunction htmlValue(value) {\n  if (value instanceof HTMLTemplateElement) {\n    return /** @type {!HTMLTemplateElement } */(value).innerHTML;\n  } else if (value instanceof LiteralString) {\n    return literalValue(value);\n  } else {\n    throw new Error(\n        `non-template value passed to Polymer's html function: ${value}`);\n  }\n}\n\n/**\n * A template literal tag that creates an HTML <template> element from the\n * contents of the string.\n *\n * This allows you to write a Polymer Template in JavaScript.\n *\n * Templates can be composed by interpolating `HTMLTemplateElement`s in\n * expressions in the JavaScript template literal. The nested template's\n * `innerHTML` is included in the containing template.  The only other\n * values allowed in expressions are those returned from `htmlLiteral`\n * which ensures only literal values from JS source ever reach the HTML, to\n * guard against XSS risks.\n *\n * All other values are disallowed in expressions to help prevent XSS\n * attacks; however, `htmlLiteral` can be used to compose static\n * string values into templates. This is useful to compose strings into\n * places that do not accept html, like the css text of a `style`\n * element.\n *\n * Example:\n *\n *     static get template() {\n *       return html`\n *         <style>:host{ content:\"...\" }</style>\n *         <div class=\"shadowed\">${this.partialTemplate}</div>\n *         ${super.template}\n *       `;\n *     }\n *     static get partialTemplate() { return html`<span>Partial!</span>`; }\n *\n * @param {!ITemplateArray} strings Constant parts of tagged template literal\n * @param {...*} values Variable parts of tagged template literal\n * @return {!HTMLTemplateElement} Constructed HTMLTemplateElement\n */\nexport const html = function html(strings, ...values) {\n  const template = /** @type {!HTMLTemplateElement} */(document.createElement('template'));\n  template.innerHTML = values.reduce((acc, v, idx) =>\n      acc + htmlValue(v) + strings[idx + 1], strings[0]);\n  return template;\n};\n\n/**\n * An html literal tag that can be used with `html` to compose.\n * a literal string.\n *\n * Example:\n *\n *     static get template() {\n *       return html`\n *         <style>\n *           :host { display: block; }\n *           ${this.styleTemplate()}\n *         </style>\n *         <div class=\"shadowed\">${staticValue}</div>\n *         ${super.template}\n *       `;\n *     }\n *     static get styleTemplate() {\n *        return htmlLiteral`.shadowed { background: gray; }`;\n *     }\n *\n * @param {!ITemplateArray} strings Constant parts of tagged template literal\n * @param {...*} values Variable parts of tagged template literal\n * @return {!LiteralString} Constructed literal string\n */\nexport const htmlLiteral = function(strings, ...values) {\n  return new LiteralString(values.reduce((acc, v, idx) =>\n      acc + literalValue(v) + strings[idx + 1], strings[0]));\n};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nimport { ElementMixin, version } from './lib/mixins/element-mixin.js';\nexport { html } from './lib/utils/html-tag.js';\n\nexport { version };\n\n/**\n * Base class that provides the core API for Polymer's meta-programming\n * features including template stamping, data-binding, attribute deserialization,\n * and property change observation.\n *\n * @customElement\n * @polymer\n * @constructor\n * @implements {Polymer_ElementMixin}\n * @extends HTMLElement\n * @appliesMixin ElementMixin\n * @summary Custom element base class that provides the core API for Polymer's\n *   key meta-programming features including template stamping, data-binding,\n *   attribute deserialization, and property change observation\n */\nexport const PolymerElement = ElementMixin(HTMLElement);\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nimport './mixin.js';\nimport './async.js';\n\n/**\n * @summary Collapse multiple callbacks into one invocation after a timer.\n */\nexport class Debouncer {\n  constructor() {\n    this._asyncModule = null;\n    this._callback = null;\n    this._timer = null;\n  }\n  /**\n   * Sets the scheduler; that is, a module with the Async interface,\n   * a callback and optional arguments to be passed to the run function\n   * from the async module.\n   *\n   * @param {!AsyncInterface} asyncModule Object with Async interface.\n   * @param {function()} callback Callback to run.\n   * @return {void}\n   */\n  setConfig(asyncModule, callback) {\n    this._asyncModule = asyncModule;\n    this._callback = callback;\n    this._timer = this._asyncModule.run(() => {\n      this._timer = null;\n      debouncerQueue.delete(this);\n      this._callback();\n    });\n  }\n  /**\n   * Cancels an active debouncer and returns a reference to itself.\n   *\n   * @return {void}\n   */\n  cancel() {\n    if (this.isActive()) {\n      this._cancelAsync();\n      // Canceling a debouncer removes its spot from the flush queue,\n      // so if a debouncer is manually canceled and re-debounced, it\n      // will reset its flush order (this is a very minor difference from 1.x)\n      // Re-debouncing via the `debounce` API retains the 1.x FIFO flush order\n      debouncerQueue.delete(this);\n    }\n  }\n  /**\n   * Cancels a debouncer's async callback.\n   *\n   * @return {void}\n   */\n  _cancelAsync() {\n    if (this.isActive()) {\n      this._asyncModule.cancel(/** @type {number} */(this._timer));\n      this._timer = null;\n    }\n  }\n  /**\n   * Flushes an active debouncer and returns a reference to itself.\n   *\n   * @return {void}\n   */\n  flush() {\n    if (this.isActive()) {\n      this.cancel();\n      this._callback();\n    }\n  }\n  /**\n   * Returns true if the debouncer is active.\n   *\n   * @return {boolean} True if active.\n   */\n  isActive() {\n    return this._timer != null;\n  }\n  /**\n   * Creates a debouncer if no debouncer is passed as a parameter\n   * or it cancels an active debouncer otherwise. The following\n   * example shows how a debouncer can be called multiple times within a\n   * microtask and \"debounced\" such that the provided callback function is\n   * called once. Add this method to a custom element:\n   *\n   * ```js\n   * import {microTask} from '@polymer/polymer/lib/utils/async.js';\n   * import {Debouncer} from '@polymer/polymer/lib/utils/debounce.js';\n   * // ...\n   *\n   * _debounceWork() {\n   *   this._debounceJob = Debouncer.debounce(this._debounceJob,\n   *       microTask, () => this._doWork());\n   * }\n   * ```\n   *\n   * If the `_debounceWork` method is called multiple times within the same\n   * microtask, the `_doWork` function will be called only once at the next\n   * microtask checkpoint.\n   *\n   * Note: In testing it is often convenient to avoid asynchrony. To accomplish\n   * this with a debouncer, you can use `enqueueDebouncer` and\n   * `flush`. For example, extend the above example by adding\n   * `enqueueDebouncer(this._debounceJob)` at the end of the\n   * `_debounceWork` method. Then in a test, call `flush` to ensure\n   * the debouncer has completed.\n   *\n   * @param {Debouncer?} debouncer Debouncer object.\n   * @param {!AsyncInterface} asyncModule Object with Async interface\n   * @param {function()} callback Callback to run.\n   * @return {!Debouncer} Returns a debouncer object.\n   */\n  static debounce(debouncer, asyncModule, callback) {\n    if (debouncer instanceof Debouncer) {\n      // Cancel the async callback, but leave in debouncerQueue if it was\n      // enqueued, to maintain 1.x flush order\n      debouncer._cancelAsync();\n    } else {\n      debouncer = new Debouncer();\n    }\n    debouncer.setConfig(asyncModule, callback);\n    return debouncer;\n  }\n}\n\nlet debouncerQueue = new Set();\n\n/**\n * Adds a `Debouncer` to a list of globally flushable tasks.\n *\n * @param {!Debouncer} debouncer Debouncer to enqueue\n * @return {void}\n */\nexport const enqueueDebouncer = function(debouncer) {\n  debouncerQueue.add(debouncer);\n};\n\n/**\n * Flushes any enqueued debouncers\n *\n * @return {boolean} Returns whether any debouncers were flushed\n */\nexport const flushDebouncers = function() {\n  const didFlush = Boolean(debouncerQueue.size);\n  // If new debouncers are added while flushing, Set.forEach will ensure\n  // newly added ones are also flushed\n  debouncerQueue.forEach(debouncer => {\n    try {\n      debouncer.flush();\n    } catch(e) {\n      setTimeout(() => {\n        throw e;\n      });\n    }\n  });\n  return didFlush;\n};","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at https://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at https://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at https://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at https://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * Promise that resolves when the gviz loader script is loaded, which\n * provides access to the Google Charts loading API.\n * @type {!Promise}\n */\nconst loaderPromise = new Promise((resolve, reject) => {\n  // Resolve immediately if the loader script has been added already and\n  // `google.charts.load` is available. Adding the loader script twice throws\n  // an error.\n  if (typeof google !== 'undefined' && google.charts &&\n      typeof google.charts.load === 'function') {\n    resolve();\n  } else {\n    // Try to find existing loader script.\n    let loaderScript = document.querySelector(\n        'script[src=\"https://www.gstatic.com/charts/loader.js\"]');\n    if (!loaderScript) {\n      // If the loader is not present, add it.\n      loaderScript =\n          /** @type {!HTMLScriptElement} */ (document.createElement('script'));\n      // Specify URL directly to pass JS compiler conformance checks.\n      loaderScript.src = 'https://www.gstatic.com/charts/loader.js';\n      document.head.appendChild(loaderScript);\n    }\n    loaderScript.addEventListener('load', resolve);\n    loaderScript.addEventListener('error', reject);\n  }\n});\n\n/**\n * @typedef {{\n *   version: (string|undefined),\n *   packages: (!Array<string>|undefined),\n *   language: (string|undefined),\n *   mapsApiKey: (string|undefined),\n * }}\n */\nvar LoadSettings;\n\n/**\n * Loads Google Charts API with the selected settings or using defaults.\n *\n * The following settings are available:\n * - version: which version of library to load, default: 'current',\n * - packages: which chart packages to load, default: ['corechart'],\n * - language: what language to load library in, default: `lang` attribute on\n *   `<html>` or 'en' if not specified,\n * - mapsApiKey: key to use for maps API.\n *\n * @param {!LoadSettings=} settings\n * @return {!Promise}\n */\nexport async function load(settings = {}) {\n  await loaderPromise;\n  const {\n    version = 'current',\n    packages = ['corechart'],\n    language = document.documentElement.lang || 'en',\n    mapsApiKey,\n  } = settings;\n  return google.charts.load(version, {\n    'packages': packages,\n    'language': language,\n    'mapsApiKey': mapsApiKey,\n  });\n}\n\n/**\n * Creates a DataTable object for use with a chart.\n *\n * Multiple different argument types are supported. This is because the\n * result of loading the JSON data URL is fed into this function for\n * DataTable construction and its format is unknown.\n *\n * The data argument can be one of a few options:\n *\n * - null/undefined: An empty DataTable is created. Columns must be added\n * - !DataTable: The object is simply returned\n * - {{cols: !Array, rows: !Array}}: A DataTable in object format\n * - {{cols: !Array}}: A DataTable in object format without rows\n * - !Array<!Array>: A DataTable in 2D array format\n *\n * Un-supported types:\n *\n * - Empty !Array<!Array>: (e.g. `[]`) While technically a valid data\n *   format, this is rejected as charts will not render empty DataTables.\n *   DataTables must at least have columns specified. An empty array is most\n *   likely due to a bug or bad data. If one wants an empty DataTable, pass\n *   no arguments.\n * - Anything else\n *\n * See <a href=\"https://developers.google.com/chart/interactive/docs/reference#datatable-class\">the docs</a> for more details.\n *\n * @param {!Array|{cols: !Array, rows: (!Array<!Array>|undefined)}|undefined} data\n *     the data with which we should use to construct the new DataTable object\n * @return {!Promise<!google.visualization.DataTable>} promise for the created DataTable\n */\nexport async function dataTable(data) {\n  // Ensure that `google.visualization` namespace is added to the document.\n  await load();\n  if (data == null) {\n    return new google.visualization.DataTable();\n  } else if (data.getNumberOfRows) {\n    // Data is already a DataTable\n    return /** @type {!google.visualization.DataTable} */ (data);\n  } else if (data.cols) {  // data.rows may also be specified\n    // Data is in the form of object DataTable structure\n    return new google.visualization.DataTable(data);\n  } else if (data.length > 0) {\n    // Data is in the form of a two dimensional array.\n    return google.visualization.arrayToDataTable(data);\n  } else if (data.length === 0) {\n    // Chart data was empty.\n    // We throw instead of creating an empty DataTable because most\n    // (if not all) charts will render a sticky error in this situation.\n    throw new Error('Data was empty.');\n    }\n  throw new Error('Data format was not recognized.');\n}\n\n/**\n * Creates new `ChartWrapper`.\n * @param {!Element} container Element in which the chart will be drawn\n * @return {!Promise<!google.visualization.ChartWrapper>}\n */\nexport async function createChartWrapper(container) {\n  // Ensure that `google.visualization` namespace is added to the document.\n  await load();\n  return new google.visualization.ChartWrapper({'container': container});\n}\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at https://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at https://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at https://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at https://polymer.github.io/PATENTS.txt\n*/\nimport { PolymerElement, html } from '@polymer/polymer';\nimport { timeOut } from '@polymer/polymer/lib/utils/async.js';\nimport { Debouncer } from '@polymer/polymer/lib/utils/debounce.js';\nimport { createChartWrapper, dataTable } from './loader.js';\n\nconst DEFAULT_EVENTS = ['ready', 'select'];\n\n/**\n * Constructor names for supported chart types.\n *\n * `ChartWrapper` expects a constructor name and assumes `google.visualization`\n *  as the default namespace.\n *\n * @type {!Object<string, (string|undefined)>}\n */\nconst CHART_TYPES = {\n  'area': 'AreaChart',\n  'bar': 'BarChart',\n  'md-bar': 'google.charts.Bar',\n  'bubble': 'BubbleChart',\n  'calendar': 'Calendar',\n  'candlestick': 'CandlestickChart',\n  'column': 'ColumnChart',\n  'combo': 'ComboChart',\n  'gauge': 'Gauge',\n  'geo': 'GeoChart',\n  'histogram': 'Histogram',\n  'line': 'LineChart',\n  'md-line': 'google.charts.Line',\n  'org': 'OrgChart',\n  'pie': 'PieChart',\n  'sankey': 'Sankey',\n  'scatter': 'ScatterChart',\n  'md-scatter': 'google.charts.Scatter',\n  'stepped-area': 'SteppedAreaChart',\n  'table': 'Table',\n  'timeline': 'Timeline',\n  'treemap': 'TreeMap',\n  'wordtree': 'WordTree',\n};\n\n/**\n`google-chart` encapsulates Google Charts as a web component, allowing you to easily visualize\ndata. From simple line charts to complex hierarchical tree maps, the chart element provides a\nnumber of ready-to-use chart types.\n\n    <google-chart\n      type='pie'\n      options='{\"title\": \"Distribution of days in 2001Q1\"}'\n      cols='[{\"label\":\"Month\", \"type\":\"string\"}, {\"label\":\"Days\", \"type\":\"number\"}]'\n      rows='[[\"Jan\", 31],[\"Feb\", 28],[\"Mar\", 31]]'>\n    </google-chart>\n\nNote: if you're passing JSON as attributes, single quotes are necessary to be valid JSON.\nSee https://www.polymer-project.org/1.0/docs/devguide/properties#configuring-object-and-array-properties.\n\nHeight and width are specified as style attributes:\n\n    google-chart {\n      height: 300px;\n      width: 50em;\n    }\n\nData can be provided in one of three ways:\n\n- Via the `cols` and `rows` attributes:\n\n      cols='[{\"label\":\"Mth\", \"type\":\"string\"}, {\"label\":\"Days\", \"type\":\"number\"}]'\n      rows='[[\"Jan\", 31],[\"Feb\", 28],[\"Mar\", 31]]'\n\n- Via the `data` attribute, passing in the data directly:\n\n      data='[[\"Month\", \"Days\"], [\"Jan\", 31], [\"Feb\", 28], [\"Mar\", 31]]'\n\n- Via the `data` attribute, passing in the URL to a resource containing the\n  data, in JSON format:\n\n      data='http://example.com/chart-data.json'\n\n- Via the `data` attribute, passing in a Google DataTable object:\n\n      data='{{dataTable}}'\n\n- Via the `view` attribute, passing in a Google DataView object:\n\n      view='{{dataView}}'\n\nYou can display the charts in locales other than \"en\" by setting the `lang` attribute\non the `html` tag of your document.\n\n    <html lang=\"ja\">\n\n@demo\n*/\nexport class GoogleChart extends PolymerElement {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: -webkit-flex;\n          display: -ms-flex;\n          display: flex;\n          margin: 0;\n          padding: 0;\n          width: 400px;\n          height: 300px;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n\n        :host([type=\"gauge\"]) {\n          width: 300px;\n          height: 300px;\n        }\n\n        #chartdiv {\n          width: 100%;\n        }\n\n        /* Workaround for slow initial ready event for tables. */\n        .google-visualization-table-loadtest {\n          padding-left: 6px;\n        }\n      </style>\n      <div id=\"styles\"></div>\n      <div id=\"chartdiv\"></div>\n    `;\n  }\n\n  /**\n   * Fired after a chart type is rendered and ready for interaction.\n   *\n   * @event google-chart-ready\n   * @param {{chart: !Object}} The raw chart object.\n   */\n\n  /**\n   * Fired when the user makes a selection in the chart.\n   *\n   * @event google-chart-select\n   * @param {{chart: !Object}} The raw chart object.\n   */\n\n  /** Polymer element properties. */\n  static get properties() {\n    return {\n      type: {\n        type: String,\n        observer: GoogleChart.prototype._typeChanged,\n      },\n      events: Array,\n      options: Object,\n      cols: {\n        type: Array,\n        observer: GoogleChart.prototype._rowsOrColumnsChanged,\n      },\n      rows: {\n        type: Array,\n        observer: GoogleChart.prototype._rowsOrColumnsChanged,\n      },\n      data: {\n        // Note: type: String, because it is parsed manually in the observer.\n        type: String,\n        observer: GoogleChart.prototype._dataChanged,\n      },\n      view: {\n        type: Object,\n        observer: GoogleChart.prototype._viewChanged,\n      },\n      selection: {\n        type: Array,\n        notify: true,\n        observer: GoogleChart.prototype._setSelection,\n      },\n      drawn: {\n        type: Boolean,\n        readOnly: true,\n      },\n      _data: Object,\n    };\n  }\n\n  static get observers() {\n    return [\n      'redraw(_data, options.*)',\n    ];\n  }\n\n  constructor() {\n    super();\n\n    /**\n     * Sets the type of the chart.\n     *\n     * Should be one of:\n     * - `area`\n     * - `(md-)bar`\n     * - `bubble`\n     * - `calendar`\n     * - `candlestick`\n     * - `column`\n     * - `combo`\n     * - `gauge`\n     * - `geo`\n     * - `histogram`\n     * - `(md-)line`\n     * - `org`\n     * - `pie`\n     * - `sankey`\n     * - `(md-)scatter`\n     * - `stepped-area`\n     * - `table`\n     * - `timeline`\n     * - `treemap`\n     * - `wordtree`\n     *\n     * See <a href=\"https://google-developers.appspot.com/chart/interactive/docs/gallery\">Google Visualization API reference (Chart Gallery)</a>\n     * for details.\n     *\n     * @type {string}\n     */\n    this.type = 'column';\n\n    /**\n     * Enumerates the chart events that should be fired.\n     *\n     * Charts support a variety of events. By default, this element only\n     * fires on `ready` and `select`. If you would like to be notified of\n     * other chart events, use this property to list them.\n     * Events `ready` and `select` are always fired.\n     *\n     * Changes to this property are _not_ observed. Events are attached only\n     * at chart construction time.\n     *\n     * @type {!Array<string>}\n     */\n    this.events = [];\n\n    /**\n     * Sets the options for the chart.\n     *\n     * Example:\n     * <pre>{\n     *   title: \"Chart title goes here\",\n     *   hAxis: {title: \"Categories\"},\n     *   vAxis: {title: \"Values\", minValue: 0, maxValue: 2},\n     *   legend: \"none\"\n     * };</pre>\n     * See <a href=\"https://google-developers.appspot.com/chart/interactive/docs/gallery\">Google Visualization API reference (Chart Gallery)</a>\n     * for the options available to each chart type.\n     *\n     * This property is observed via a deep object observer.\n     * If you would like to make changes to a sub-property, be sure to use the\n     * Polymer method `set`: `googleChart.set('options.vAxis.logScale', true)`\n     * (Note: Missing parent properties are not automatically created.)\n     *\n     * @type {!Object|undefined}\n     */\n    this.options = undefined;\n\n    /**\n     * Sets the data columns for this object.\n     *\n     * When specifying data with `cols` you must also specify `rows`, and\n     * not specify `data`.\n     *\n     * Example:\n     * <pre>[{label: \"Categories\", type: \"string\"},\n     *  {label: \"Value\", type: \"number\"}]</pre>\n     * See <a href=\"https://google-developers.appspot.com/chart/interactive/docs/reference#DataTable_addColumn\">Google Visualization API reference (addColumn)</a>\n     * for column definition format.\n     *\n     * @type {!Array|undefined}\n     */\n    this.cols = undefined;\n\n    /**\n     * Sets the data rows for this object.\n     *\n     * When specifying data with `rows` you must also specify `cols`, and\n     * not specify `data`.\n     *\n     * Example:\n     * <pre>[[\"Category 1\", 1.0],\n     *  [\"Category 2\", 1.1]]</pre>\n     * See <a href=\"https://google-developers.appspot.com/chart/interactive/docs/reference#addrow\">Google Visualization API reference (addRow)</a>\n     * for row format.\n     *\n     * @type {!Array<!Array>|undefined}\n     */\n    this.rows = undefined;\n\n    /**\n     * Sets the entire dataset for this object.\n     * Can be used to provide the data directly, or to provide a URL from\n     * which to request the data.\n     *\n     * The data format can be a two-dimensional array or the DataTable format\n     * expected by Google Charts.\n     * See <a href=\"https://google-developers.appspot.com/chart/interactive/docs/reference#DataTable\">Google Visualization API reference (DataTable constructor)</a>\n     * for data table format details.\n     *\n     * When specifying data with `data` you must not specify `cols` or `rows`.\n     *\n     * Example:\n     * <pre>[[\"Categories\", \"Value\"],\n     *  [\"Category 1\", 1.0],\n     *  [\"Category 2\", 1.1]]</pre>\n     *\n     * @type {!google.visualization.DataTable|\n     *        !Array<!Array>|\n     *        {cols: !Array, rows: (!Array<!Array>|undefined)}|\n     *        string|\n     *        undefined}\n     */\n    this.data = undefined;\n\n    /**\n     * Sets the entire dataset for this object to a Google DataView.\n     *\n     * See <a href=\"https://google-developers.appspot.com/chart/interactive/docs/reference#dataview-class\">Google Visualization API reference (DataView)</a>\n     * for details.\n     *\n     * When specifying data with `view` you must not specify `data`, `cols` or `rows`.\n     *\n     * @type {!google.visualization.DataView|undefined}\n     */\n    this.view = undefined;\n\n    /**\n     * Selected datapoint(s) in the chart.\n     *\n     * An array of objects, each with a numeric row and/or column property.\n     * `row` and `column` are the zero-based row or column number of an item\n     * in the data table to select.\n     *\n     * To select a whole column, set row to null;\n     * to select a whole row, set column to null.\n     *\n     * Example:\n     * <pre>\n     *   [{row:0,column:1}, {row:1, column:null}]\n     * </pre>\n     *\n     * @type {!Array|undefined}\n     */\n    this.selection = undefined;\n\n\n    /**\n     * Whether the chart is currently rendered.\n     *\n     * @type {boolean}\n     */\n    this.drawn;\n    this._setDrawn(false);\n\n    /**\n     * Internal data displayed on the chart.\n     *\n     * This property has protected visibility because it is used from an observer.\n     *\n     * @protected {!google.visualization.DataTable|\n     *             !google.visualization.DataView|\n     *             undefined}\n     */\n    this._data = undefined;\n\n    /**\n     * Internal chart object.\n     * @private {!google.visualization.ChartWrapper|null}\n     */\n    this._chartWrapper = null;\n\n    /** @private {?Debouncer} */\n    this._redrawDebouncer = null;\n  }\n\n  /** @override */\n  ready() {\n    super.ready();\n    createChartWrapper(this.$.chartdiv).then((chartWrapper) => {\n      this._chartWrapper = chartWrapper;\n      this._typeChanged();\n      google.visualization.events.addListener(chartWrapper, 'ready', () => {\n        this._setDrawn(true);\n      });\n      google.visualization.events.addListener(chartWrapper, 'select', () => {\n        this.selection = chartWrapper.getChart().getSelection();\n      });\n      this._propagateEvents(DEFAULT_EVENTS, chartWrapper);\n    });\n  }\n\n  /** Reacts to chart type change. */\n  _typeChanged() {\n    if (this._chartWrapper == null) return;\n    this._chartWrapper.setChartType(CHART_TYPES[this.type] || this.type);\n    const lastChart = this._chartWrapper.getChart();\n    google.visualization.events.addOneTimeListener(this._chartWrapper, 'ready', () => {\n      const chart = this._chartWrapper.getChart();\n      if (chart !== lastChart) {\n        this._propagateEvents(this.events.filter((eventName) => !DEFAULT_EVENTS.includes(eventName)), chart);\n      }\n      if (!this.$.styles.children.length) {\n        this._localizeGlobalStylesheets();\n      }\n      if (this.selection) {\n        this._setSelection();\n      }\n    });\n    this.redraw();\n  }\n\n  /**\n   * Adds listeners to propagate events from the chart.\n   *\n   * @param {!Array<string>} events\n   * @private\n   */\n  _propagateEvents(events, eventTarget) {\n    for (const eventName of events) {\n      google.visualization.events.addListener(eventTarget, eventName, (event) => {\n        this.dispatchEvent(new CustomEvent(`google-chart-${eventName}`, {\n          bubbles: true,\n          composed: true,\n          detail: {\n            chart: this._chartWrapper.getChart(),\n            data: event,\n          }}));\n      });\n    }\n  }\n\n  /** Sets the selectiton on the chart. */\n  _setSelection() {\n    if (this._chartWrapper == null) return;\n    const chart = this._chartWrapper.getChart();\n    if (chart == null) return;\n    if (chart.setSelection) {\n      // Workaround for timeline chart which emits select event on setSelection.\n      // See issue #256.\n      if (this.type === 'timeline') {\n        const oldSelection = JSON.stringify(chart.getSelection());\n        const newSelection = JSON.stringify(this.selection);\n        if (newSelection === oldSelection) return;\n      }\n      chart.setSelection(this.selection);\n    }\n  }\n\n  /**\n   * Redraws the chart.\n   *\n   * Called automatically when data/type/selection attributes change.\n   * Call manually to handle view updates, page resizes, etc.\n   */\n  redraw() {\n    if (this._chartWrapper == null || this._data == null) return;\n    this._chartWrapper.setDataTable(this._data);\n    this._chartWrapper.setOptions(this.options || {});\n\n    this._setDrawn(false);\n    this._redrawDebouncer = Debouncer.debounce(this._redrawDebouncer, timeOut.after(5), () => {\n      this._chartWrapper.draw();\n    });\n  }\n\n  /**\n   * Returns the chart serialized as an image URI.\n   *\n   * Call this after the chart is drawn (google-chart-ready event).\n   *\n   * @return {?string} Returns image URI.\n   */\n  get imageURI() {\n    if (this._chartWrapper == null) return null;\n    const chart = this._chartWrapper.getChart();\n    return chart && chart.getImageURI();\n  }\n\n  /** Handles changes to the `view` attribute. */\n  _viewChanged() {\n    if (!this.view) { return; }\n    this._data = this.view;\n  }\n\n  /** Handles changes to the rows & columns attributes. */\n  async _rowsOrColumnsChanged() {\n    const {rows, cols} = this;\n    if (!rows || !cols) return;\n    try {\n      const dt = await dataTable({cols});\n      dt.addRows(rows);\n      this._data = dt;\n    } catch (reason) {\n      this.$.chartdiv.textContent = reason;\n    }\n  }\n\n  /**\n   * Handles changes to the `data` attribute.\n   *\n   * @param {\n   *     !google.visualization.DataTable|\n   *     !Array<!Array>|\n   *     {cols: !Array, rows: (!Array<!Array>|undefined)}|\n   *     string|\n   *     undefined} data The new data value\n   */\n  _dataChanged(data) {\n    var dataPromise;\n    if (!data) { return; }\n\n    var isString = false;\n\n    // Polymer 2 will not call observer if type:Object is set and fails, so\n    // we must parse the string ourselves.\n    try {\n      /**\n       * @suppress {checkTypes} `JSON.parse` expects a string but here it tries to deserialize\n       * the value of the `data` property which might be a serialized array.\n       */\n      data = JSON.parse(data);\n    } catch (e) {\n      isString = typeof data == 'string' || data instanceof String;\n    }\n\n    if (isString) {\n      // Load data asynchronously, from external URL.\n      dataPromise = fetch(data).then((response) => response.json());\n    } else {\n      // Data is all ready to be processed.\n      dataPromise = Promise.resolve(data);\n    }\n    dataPromise.then(dataTable).then((data) => {\n      this._data = data;\n    });\n  }\n\n  /**\n   * Queries global document head for google charts link#load-css-* and clones\n   * them into the local root's div#styles element for shadow dom support.\n   *\n   * @private\n   */\n  _localizeGlobalStylesheets() {\n    // get all gchart stylesheets\n    var stylesheets = document.head\n        .querySelectorAll('link[rel=\"stylesheet\"][type=\"text/css\"]');\n\n    var stylesheetsArray = Array.from(stylesheets);\n\n    for (var i = 0; i < stylesheetsArray.length; i++) {\n      var sheetLinkEl = stylesheetsArray[i];\n      var isGchartStylesheet = sheetLinkEl.id.indexOf('load-css-') == 0;\n\n      if (isGchartStylesheet) {\n        // clone necessary stylesheet attributes\n        var clonedLinkEl = document.createElement('link');\n        clonedLinkEl.setAttribute('rel', 'stylesheet');\n        clonedLinkEl.setAttribute('type', 'text/css');\n        clonedLinkEl.setAttribute('href', sheetLinkEl.getAttribute('href'));\n\n        this.$.styles.appendChild(clonedLinkEl);\n      }\n    }\n  }\n}\n\ncustomElements.define('google-chart', GoogleChart);\n","import  { saveAs } from 'file-saver';\nimport leafletImage from 'leaflet-image';\nimport '@google-web-components/google-chart';\n\nconst cout = console.log;\nconst cerr = console.error;\nconst sel = s => document.querySelector(s);\nconst middleindiacoords = [23.012455, 78.085792];\nconst NDLScoords = [28.642257, 77.218603];\nconst DELAY_MIN = 0;\nconst DELAY_MAX = 120;\nconst DELAY_RANGE = DELAY_MAX - DELAY_MIN;\nconst PARTITIONS = 5;\nconst STEP = DELAY_RANGE / PARTITIONS;\nconst delayRangeColors = ['blue', 'green', 'orange', 'yellow', 'red'];\n\nconst accessToken = 'pk.eyJ1IjoidGVzdGluZ21hcGJveGlpdGsiLCJhIjoiY2pvanlqN3JnMDFiOTNwbW5xbG83NnE1cSJ9.Fx5Gu72P14nE2qcVshLMbg';\n\nconst stationMarkers = [];\nconst stationData = {}, stationsByName = {}, options = [];\nconst searchBar = sel('#searchBar');\nconst months = ['October 2017', 'November 2017', 'Decmber 2017', 'January 2018', 'February 2018', 'March 2018', 'April 2018', 'May 2018', 'June 2018', 'July 2018', 'August 2018', 'September 2018', 'October 2018']\nconst month_keys = ['oct17', 'nov17', 'dec17', 'jan18', 'feb18', 'mar18', 'apr18', 'may18', 'jun18', 'jul18', 'aug18', 'sep18', 'oct18'];\n\nlet newMap = null;\nlet satelliteLayer = null;\nlet streetsLayer = null;\n\nlet counter = 4;\n\n// MAIN\n\nmain();\n\nfunction main()\n{\n    cout('hi from the main thread');\n\n    newMap = createMap();\n\n    const worker = new Worker('worker.js');\n    worker.onmessage = event => handleRow(event, newMap);\n}\n\n// FUNCTIONS\n\nfunction createMap()\n{\n    const attribution = 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>';\n    const tileOptions = { attribution, accessToken, maxZoom: 18 };\n    const mapBoxURL = 'https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}';\n\n    satelliteLayer = L.tileLayer(mapBoxURL, {...tileOptions, id: 'mapbox.satellite'});\n    streetsLayer = L.tileLayer(mapBoxURL, {...tileOptions, id: 'mapbox.streets'});\n    const mapOptions = {\n        preferCanvas: true,\n        layers: [satelliteLayer],\n        center: NDLScoords,\n        zoom: 10\n    };\n    const newMap = L.map('mapid', mapOptions)\n\n    return newMap;\n}\n\nconst normalizeStationName = name => name.trim().toLowerCase();\nconst roundValue = value => Math.round((value + Number.EPSILON) * 100) / 100;\n\nfunction handleRow(event, newMap)\n{\n    if(event.data === 'done')\n    {\n        cout('worker is done');\n        return nextStage(newMap);\n    }\n\n    if(event.data.length < 1)return cout('length of row < 1');\n\n    const data = event.data[0];\n    if(!isValid(data))\n    {\n        if(counter < 1)return;\n        counter--;\n        cout('event:', event)\n        return cout('data is not valid');\n    }\n    const normalized_name = normalizeStationName(data.station_name);\n\n    stationData[data.station_code] = data;\n    stationsByName[normalized_name] = data;\n  \n    //const delayColor = {color: '#FF0000', colorClass: 'red'};\n\n    const red = blueToRed(data.yr_mean);\n    const delayColor = {color: `rgb(${red}, 0, ${255 - red})`, colorClass: 'red'}\n\n    for(let i = 0, threshold = DELAY_MIN; i < PARTITIONS; i++, threshold += STEP)\n    {\n        if(data.yr_mean < threshold)break;\n        delayColor.colorClass = delayRangeColors[i];\n    }\n    /*\n    for(let threshold in delayRange)\n    {\n        if(data.yr_mean < threshold)\n        {\n            const [color, colorClass] = delayRange[threshold];\n            //delayColor.color = color;\n            delayColor.colorClass = colorClass;\n            break;\n        }\n    }\n    */\n\n    const google_chart_string = `<google-chart type=\"line\" options='{\"chartArea\":{\"width\": \"100%\", \"height\": \"80%\"}}' data='[[\"Month\", \"Delay\", {\"type\":\"number\", \"role\":\"interval\"}, {\"type\":\"number\", \"role\":\"interval\"}],` +\n    months.map((month, i) => {\n        const key = month_keys[i];\n        const mean = roundValue(data[key + '_mean']);\n        const std = roundValue(data[key + '_std']) / 10;\n        const lower = roundValue(mean - std);\n        const upper = roundValue(mean + std);\n        return `[\"${month}\",${mean},${lower},${upper}]`;\n    }).join(',') +\n    `]'></google-chart>`;\n\n    const stationPopupHtml = `\n    ${google_chart_string}\n    <div class=\"station_name\">${data.station_name}(${data.station_code})</div>\n    <div class=\"station_delay ${delayColor.colorClass}\">\n\n    <div>Time period</div><div>Mean delay<br/>(in minutes)</div><div>Standard deviation<br/>of delay</div>\n    <div>Oct 2017 to Oct 2018</div><div>${roundValue(data.yr_mean)}</div><div>${roundValue(data.yr_std)}</div>` +\n    months.map((month, i) => {\n        const key = month_keys[i];\n        const mean = roundValue(data[key + '_mean']);\n        const std = roundValue(data[key + '_std']);\n        return `<div>${month}</div><div>${mean}</div><div>${std}</div>`;\n    }).join('') +\n    `<div>Christmas 2017</div><div>${roundValue(data.christmas17_mean)}</div><div>${roundValue(data.christmas17_std)}</div>\n    <div>Diwali 2018</div><div>${roundValue(data.diwali18_mean)}</div><div>${roundValue(data.diwali18_std)}</div>\n    <div>Holi 2018</div><div>${roundValue(data.holi18_mean)}</div><div>${roundValue(data.holi18_std)}</div>\n    \n    </div>\n    `;\n  \n    const marker = L.circleMarker([data.longitude, data.latitude], {radius: 1, color: delayColor.color})\n    marker.bindPopup(stationPopupHtml);//.addTo(newMap);\n    stationMarkers.push(marker);\n\n    stationData[data.station_code].marker = marker;\n    stationsByName[normalized_name].marker = marker;\n\n    const option = document.createElement('option');\n    option.value = normalized_name;\n    options.push(option);\n}\n\nfunction isValid(data)\n{\n    if(!('latitude' in data) || data['latitude'] === null)return false;\n    if(!('longitude' in data) || data['longitude'] === null)return false;\n    if(!('station_code' in data) || data['station_code'] === null)return false;\n    return true;\n}\n\nfunction nextStage(newMap)\n{\n    const stationsLayer = L.layerGroup(stationMarkers);\n    newMap.addLayer(stationsLayer);\n    var baseMaps = {\n        \"Satellite\": satelliteLayer,\n        \"Streets\": streetsLayer\n    };\n    var overlayMaps = {\n        \"Stations\": stationsLayer\n    };\n    L.control.layers(baseMaps, overlayMaps).addTo(newMap);\n\n    const dataList = document.createElement('datalist');\n    dataList.id = 'stations-name-list';\n    dataList.append(...options);\n    document.body.appendChild(dataList);\n\n    // Hack for firefox for desktop start.\n    // Firefox version 70.0.1 on Windows 10 doesn't fire change event when a option is selected.\n    searchBar.addEventListener('keyup', e =>\n    {\n        if(e.key !== 'Enter')return;\n        handleSearch();\n    });\n    // Hack for firefox for desktop end.\n\n    searchBar.addEventListener('change', () => handleSearch());\n\n    const saveButton = sel('#save');\n    saveButton.addEventListener('click', () => handleClickSave(saveButton, newMap));\n    const loading = sel('#loading');\n    loading.classList.add('hidden');\n\n    stationData['NDLS'].marker.openPopup();\n}\n\nfunction handleSearch()\n{\n    const query = searchBar.value.trim().toUpperCase();\n    if(query in stationData)\n    {\n        cout('Found it');\n        const station = stationData[query];\n        newMap.panTo([station.longitude, station.latitude]);\n        station.marker.openPopup();\n    }\n    else if(query.toLowerCase() in stationsByName)\n    {\n        cout('Found it');\n        const station = stationsByName[query.toLowerCase()];\n        newMap.panTo([station.longitude, station.latitude]);\n        station.marker.openPopup();\n    }\n    else\n    {\n        return alert(\"Couldn't find station\");\n    }\n}\n\nfunction blueToRed(delay)\n{\n    let x = 0;\n    if(delay > DELAY_MAX)x = 1;\n    else if(delay < DELAY_MIN)x = 0;\n    else x = (delay - DELAY_MIN) / DELAY_RANGE;\n\n    return x * 255;\n}\n\nfunction handleClickSave(saveButton, map)\n{\n    const loading = sel('#loading');\n    loading.classList.remove('hidden');\n\n    leafletImage(map, (err, canvas) => {\n        loading.classList.add('hidden');\n\n        if(err)return cout(err);\n\n        const filename = `map_saved_at_${Date()}.png`;\n        canvas.toBlob(blob => saveAs(blob, filename));\n    });\n}"]}